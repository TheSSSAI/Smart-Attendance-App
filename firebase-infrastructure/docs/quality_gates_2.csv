"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"Pull Request Gate","Static Analysis & Unit Test","Pull Request Creation/Update","Linting passes; Unit test coverage > 80% (REQ-1-072); All unit tests pass; No new critical/blocker issues in static code analysis.","Block PR merge; Post failure report to PR comments.","Development Team","Fully Automated","GitHub Actions; Jest; flutter_test; SonarQube","Every commit to a PR","PR author is responsible for fixing.","85","0.5","Prevents broken code and low-quality contributions from entering the main branch."
"Staging Deployment Gate","Integration & E2E Test","Merge to `staging` branch","Successful deployment to Staging environment; All smoke tests pass; All critical path E2E tests pass.","Roll back deployment automatically; Create a P1 bug; Notify on-call engineer.","QA & DevOps Teams","Fully Automated","GitHub Actions; Flutter Driver (integration_test)","On every deployment to Staging","On-call engineer investigates and coordinates fix.","92","4","Ensures the staging environment is always stable for UAT and further testing."
"Production Release Gate","Manual & Automated Sign-off","Manual trigger for production release","All staging quality gates passing; UAT completed and signed off by Product Owner; Performance tests show no regression; No open P0/P1 bugs for the release.","Block production deployment; Hold release meeting to triage.","Release Manager, Product Owner, Tech Lead","Partially Automated (checks) with Manual Approval","Jira; CI/CD Dashboard","Per release","Release is postponed until criteria are met.","99","24","Prevents critical defects from reaching customers and ensures release readiness."