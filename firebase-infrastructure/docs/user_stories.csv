"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"US-001","Tenant & User Lifecycle Management","Admin registers a new organization tenant","Initial Admin User","As a new administrator, I want to register my organization by providing my details, a unique organization name, and selecting a data residency region, so that a new, isolated tenant is created for my company and I can begin configuring the system.","Enables new organizations to onboard themselves, creating the foundational tenant structure. This is the primary entry point for customer acquisition and is critical for the multi-tenant architecture.","Must Have","8","[]","[{""scenario"":""Successful registration with unique organization name"",""given"":""A potential administrator is on the registration page and has filled all required fields with valid data, including a globally unique organization name and a password meeting complexity requirements"",""when"":""The user clicks the 'Register' button"",""then"":""A new tenant document is created in Firestore, a new user is created in Firebase Authentication with the 'Admin' role, custom claims for tenantId and role are set on the user's auth token, the user is automatically logged in, and they are redirected to the Admin dashboard.""},{""scenario"":""Registration attempt with a duplicate organization name"",""given"":""An organization with the name 'Global Tech Inc.' already exists in the system"",""when"":""A new user enters 'Global Tech Inc.' as the organization name and submits the registration form"",""then"":""The system prevents form submission and displays an inline error message: 'Organization name is already taken. Please choose another.'""},{""scenario"":""Registration process creates all required data atomically"",""given"":""A user submits a valid registration form"",""when"":""An unexpected error occurs during the creation of the Firestore user document after the Firebase Auth user has been created"",""then"":""The entire transaction is rolled back, the Firebase Auth user is deleted, and no tenant or user documents are left in the database. The user is shown a generic error message like 'Registration failed. Please try again.'""}]","[""[Flutter Web] Build Organization Registration Page UI"",""[Functions] Implement Callable Function for Tenant Registration""]","[""All acceptance criteria validated and passing"",""Code for frontend and backend is peer-reviewed and merged"",""Unit tests for form validation and Cloud Function logic implemented with >80% coverage"",""Integration testing of the full registration flow completed successfully in the emulator suite"",""Security requirements, especially regarding custom claims and data handling, are validated"",""Story deployed and verified in the staging environment""]"
"US-002","Tenant & User Lifecycle Management","Admin is notified of a non-unique organization name during registration","Initial Admin User","As a Prospective Admin registering my organization for the first time, I want to be immediately notified if the organization name I enter is already in use, so that I can choose a unique name and complete the registration process without errors or confusion.","Ensures data integrity by enforcing unique tenant names, prevents user frustration during onboarding, and reduces potential support requests related to registration failures.","Must Have","3","[""US-001""]","[{""scenario"":""Duplicate organization name provided (case-insensitive)"",""given"":""an organization with the name 'Vandelay Industries' already exists in the system"",""when"":""a user enters 'vandelay industries' in the 'Organization Name' field and the field loses focus"",""then"":""an inline error message 'This organization name is already taken. Please choose another.' is displayed below the input field and the registration submission button is disabled.""},{""scenario"":""Unique organization name provided"",""given"":""a user is on the new organization registration page"",""when"":""the user enters a globally unique name in the 'Organization Name' field and the field loses focus (onBlur event)"",""then"":""a success indicator (e.g., green checkmark) is displayed next to the input field, and the registration submission button is enabled.""},{""scenario"":""Validation in progress feedback"",""given"":""a user is on the new organization registration page"",""when"":""the user enters text into the 'Organization Name' field and the field loses focus, triggering the asynchronous validation check"",""then"":""a loading indicator (e.g., spinner) is displayed next to the field until the validation check completes and is replaced by either a success or error indicator.""}]","[""[Flutter Web] Build Organization Registration Page UI"",""Implement backend function for uniqueness check""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for both frontend and backend logic implemented with >80% coverage"",""Performance requirements for the validation endpoint are verified"",""Security requirements (rate limiting, App Check) are implemented and validated"",""Story deployed and verified in the staging environment""]"
"US-003","Security & Compliance","Admin selects a data residency region during tenant creation","Initial Admin user","As an initial Admin registering my organization, I want to select a primary data residency region from a list of supported locations during the sign-up process so that I can ensure my organization's data is stored in a specific geographic area to comply with data sovereignty regulations like GDPR.","Enables the product to meet data sovereignty and regulatory compliance requirements (e.g., GDPR), expanding the addressable market to enterprise customers in regulated regions and building trust.","Should Have","8","[""US-001""]","[{""scenario"":""Successful selection of a data residency region during registration"",""given"":""A user is on the new organization registration page"",""when"":""The user fills in all required fields and selects a valid data residency region (e.g., \""Europe (Frankfurt)\"") from the dropdown list"",""then"":""The system successfully creates a new tenant upon form submission and all subsequent data created for this tenant is physically stored in the infrastructure provisioned for the selected region.""},{""scenario"":""Attempting to register without selecting a region"",""given"":""A user is on the new organization registration page"",""when"":""The user attempts to submit the registration form without selecting a data residency region"",""then"":""The form submission is prevented and a validation error message, such as \""Please select a data residency region,\"" is displayed next to the region selection field.""},{""scenario"":""Region selection is non-modifiable after tenant creation"",""given"":""An Admin has successfully created a tenant with a specific data residency region"",""when"":""The Admin navigates to the organization settings page in the web dashboard"",""then"":""The selected data residency region is displayed as a read-only value and there is no user interface option to change the data residency region.""}]","[""[Functions] Implement Function for Data Residency Selection"",""Update Organization Registration Page UI with region dropdown""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing completed successfully, confirming data is written to the correct regional database"",""Architectural decisions and implementation details are documented"",""Story deployed and manually verified by QA in the staging environment for at least two different regions""]"
"US-004","Tenant & User Lifecycle Management","Admin invites a new user to the organization via email","Admin","As an Admin, I want to invite new employees to the application by entering their email address and assigning them a role, so that they can receive a secure registration link, create their account, and become part of my organization's tenant.","Enables the onboarding of new employees into the system, facilitating organizational growth and the core attendance tracking function. Ensures that only authorized individuals can join a specific tenant, maintaining data security and isolation.","Must Have","5","[""US-001""]","[{""scenario"":""Successful invitation of a new user"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Manage Users' page"",""when"":""I enter a valid and unique email address 'new.user@example.com', select the role 'Subordinate', and click 'Send Invitation'"",""then"":""I see a success notification message: 'Invitation sent successfully to new.user@example.com', a user document is created in Firestore with status 'invited', and a transactional email is triggered to the user with a unique registration link.""},{""scenario"":""Attempting to invite a user who already exists in the tenant"",""given"":""I am an Admin logged in, and a user with the email 'existing.user@example.com' already exists in my tenant"",""when"":""I attempt to invite a new user with the email 'existing.user@example.com'"",""then"":""The form submission is blocked and I see an inline error message: 'A user with this email already exists in your organization.'""}]","[""[Flutter Web] Build 'Invite User' UI for Admins"",""[Functions] Implement Callable Function to Invite User""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for form validation logic and Cloud Function logic implemented with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements for role-based access and token generation are validated"",""Story deployed and verified in the staging environment""]"
"US-005","Tenant & User Lifecycle Management","Invited user receives an email with a time-limited registration link","Invited User","As an invited user, I want to receive an email containing a unique, time-limited registration link after an Admin invites me, so that I can securely and easily begin the process of creating my account and joining my organization's workspace.","Provides a secure and automated mechanism for new user activation, which is critical for tenant growth. Ensures only the intended recipient can register, reducing security risks and support overhead.","Must Have","5","[""US-004""]","[{""scenario"":""Successful email delivery with a valid link"",""given"":""an Admin has successfully submitted an invitation for a new user with the email 'new.user@example.com'"",""when"":""the backend system processes the invitation request"",""then"":""an email is sent to 'new.user@example.com' containing a unique registration link and explicitly mentions that the link will expire in 24 hours.""},{""scenario"":""Email content and branding"",""given"":""an invited user opens the invitation email"",""when"":""they view the email content"",""then"":""the email template is responsive, professionally branded, and contains a prominent call-to-action button to create their account.""},{""scenario"":""Email hard bounces"",""given"":""an invitation email is sent to a non-existent email address"",""when"":""the SendGrid service reports a hard bounce event"",""then"":""a webhook or monitoring process updates the invited user's profile in Firestore with a status indicating delivery failure (e.g., `invitationStatus: 'delivery_failed'`).""}]","[""[Functions] Implement Callable Function to Invite User"",""Create responsive HTML email template"",""Configure SendGrid integration and webhooks""]","[""All acceptance criteria validated and passing"",""Cloud Function for sending invitations is implemented with unit tests"",""Integration with SendGrid is complete and tested"",""HTML email template is created and tested for responsiveness"",""Error handling for email service failures are implemented"",""Story deployed and verified in the staging environment""]"
"US-006","Tenant & User Lifecycle Management","Invited user completes registration by setting a password","Invited User","As an Invited User, I want to securely complete my account registration by clicking a unique link from my invitation email and setting a strong password, so that I can activate my account, log in for the first time, and start using the attendance application.","Enables the final, critical step of user onboarding, converting an invited user into an active user. A seamless registration process improves user adoption and reduces administrative support load.","Must Have","5","[""US-004"",""US-005""]","[{""scenario"":""Successful account activation with a valid link and strong password"",""given"":""an invited user has a valid, non-expired registration link and is on the registration completion page"",""when"":""the user enters a password that meets the organization's policy, confirms it correctly, accepts the Terms of Service, and clicks 'Activate Account'"",""then"":""the system updates the user's status from 'invited' to 'active' in Firestore, the user is automatically logged in, and they are redirected to their role-specific dashboard.""},{""scenario"":""Attempting to use an expired registration link"",""given"":""an invited user has a registration link that is older than 24 hours"",""when"":""the user clicks the link"",""then"":""the user is redirected to a page that clearly states 'This invitation link has expired. Please contact your administrator to request a new invitation.'""}]","[""[Flutter Web] Build Registration Completion Page"",""[Functions] Implement Function to Activate Invited User""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for password validation logic and Cloud Function with >80% coverage"",""E2E test for the full registration flow is passing"",""Security requirements (token invalidation, HTTPS) validated"",""Story deployed and verified in the staging environment""]"
"US-007","Tenant & User Lifecycle Management","Invited user is notified when a registration link has expired","Invited User","As an invited user who has clicked on an old invitation link, I want to be shown a clear, dedicated page explaining that the link has expired, so that I understand why I cannot register and know that I need to contact my administrator for a new invitation.","Improves the user onboarding experience by providing clear feedback for a common error scenario. This reduces user frustration, minimizes support requests, and prevents potential users from abandoning the registration process.","Must Have","3","[""US-004"",""US-005""]","[{""scenario"":""User clicks on an invitation link that has expired"",""given"":""An Admin has sent a user an invitation link which has a 24-hour validity period"",""when"":""The user clicks the invitation link more than 24 hours after it was generated"",""then"":""The system must display a dedicated 'Invitation Link Expired' page.""},{""scenario"":""Expired link page provides actionable next steps"",""given"":""The user is on the 'Invitation Link Expired' page"",""when"":""The user reads the content"",""then"":""The page must include text explaining that links expire for security and instruct the user to contact their administrator to request a new invitation.""},{""scenario"":""An already active user clicks their old invitation link"",""given"":""A user has already completed their registration and their account status is 'active'"",""when"":""The user clicks on their original (now used) invitation link"",""then"":""The system should display a page informing them that their account is already active and provide a link to the main login page.""}]","[""Update Cloud Function for token validation to handle expired/used states"",""Build Flutter for Web pages for 'Expired', 'Invalid', and 'Already Active' states"",""Configure Firebase Hosting rewrites to direct URL to validation function""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for the Cloud Function validation logic are implemented with >80% coverage"",""Widget tests for the Flutter informational pages are implemented and passing"",""Story deployed and verified in the staging environment""]"
"US-008","Tenant & User Lifecycle Management","Admin deactivates a user's account","Admin","As an Admin, I want to deactivate a user's account and be guided through any necessary reassignments, so that I can securely revoke access for departing employees and maintain the integrity of the organizational hierarchy.","Enhances organizational security by preventing unauthorized access from former employees. Ensures management continuity by enforcing the reassignment of subordinates before a supervisor's departure.","Must Have","5","[""US-004"",""US-017"",""US-051""]","[{""scenario"":""Admin successfully deactivates a user who is not a supervisor"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I select a user with the 'Subordinate' role, click 'Deactivate', and confirm the action"",""then"":""The system updates the user's status to 'deactivated' in the Firestore database, and the user's status is visually updated in the user list.""},{""scenario"":""Deactivated user is prevented from logging in"",""given"":""A user's account has been successfully deactivated"",""when"":""That user attempts to log in with their correct credentials"",""then"":""The system denies access and displays a clear message, such as 'Your account has been deactivated. Please contact your administrator.'""},{""scenario"":""Admin is blocked from deactivating a Supervisor with active subordinates"",""given"":""I am logged in as an Admin and select a 'Supervisor' user who has one or more active subordinates assigned to them"",""when"":""I attempt to deactivate this Supervisor"",""then"":""The system prevents the deactivation and displays a modal or notification explaining that all subordinates must be reassigned to a new supervisor first.""},{""scenario"":""Admin cannot deactivate their own account"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I locate my own user account in the list"",""then"":""The 'Deactivate' action or button is disabled or hidden for my own account.""},{""scenario"":""Deactivated user's active session is invalidated"",""given"":""A user is currently logged in and has an active session"",""when"":""An Admin deactivates that user's account"",""then"":""The user's authentication token is revoked, and they are automatically logged out or their next API call fails with an authentication error.""}]","[""[Functions] Implement User Deactivation Logic with Session Invalidation"",""Update Admin Dashboard UI with deactivation controls"",""Create audit log entry for deactivation""]","[""All acceptance criteria validated and passing"",""Code for Cloud Function and frontend reviewed and approved"",""Integration testing for the full deactivation flow completed successfully"",""Security requirement for session invalidation is manually verified and confirmed working"",""Story deployed and verified in staging environment""]"
"US-009","Tenant & User Lifecycle Management","Admin is required to reassign subordinates before deactivating a Supervisor","Admin","As an Admin, I want to be prevented from deactivating a Supervisor who still has active subordinates and be prompted to reassign them first, so that I can ensure every employee remains managed and critical workflows like attendance approvals are not broken.","Ensures organizational hierarchy integrity by preventing 'orphaned' employees. This maintains the continuity of approval workflows and avoids administrative data correction tasks later.","Must Have","5","[""US-008"",""US-002""]","[{""scenario"":""Attempt to deactivate a Supervisor with active subordinates"",""given"":""An Admin is logged into the web dashboard and is viewing the user list."",""when"":""The Admin attempts to deactivate a user who has the 'Supervisor' role and has one or more active subordinates assigned to them."",""then"":""The deactivation action is blocked by the system and a modal is displayed explaining why, listing the subordinates, and providing a call-to-action to 'Reassign Subordinates'.""},{""scenario"":""Successful deactivation of a Supervisor after reassigning all subordinates"",""given"":""An Admin was blocked from deactivating a Supervisor and is now in the reassignment interface."",""when"":""The Admin reassigns all of the Supervisor's active subordinates to one or more new, valid Supervisors and saves the changes"",""then"":""The deactivation action is successful and the former Supervisor's user status is updated to 'deactivated' in the database.""},{""scenario"":""Successful deactivation of a Supervisor with no active subordinates"",""given"":""An Admin is logged into the web dashboard."",""when"":""The Admin attempts to deactivate a user with the 'Supervisor' role who has zero active subordinates"",""then"":""The deactivation proceeds successfully without showing the reassignment modal.""}]","[""[Flutter Web] Build Subordinate Reassignment UI"",""Update User Deactivation Cloud Function to include subordinate check"",""Implement batch update for reassignments""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing of the full Admin workflow completed successfully against the Emulator Suite"",""User interface for the reassignment modal reviewed and approved for usability and accessibility"",""Story deployed and verified in staging environment""]"
"US-010","Security & Compliance","Deactivated user is prevented from logging in","Deactivated user","As a deactivated user, I want to be prevented from logging into the system, even with correct credentials, so that my former employer's data is secure after my access has been revoked.","Enhances security by ensuring that offboarded users cannot access tenant data, thereby protecting company information and enforcing access control policies.","Must Have","2","[""US-008"",""US-017""]","[{""scenario"":""Deactivated user attempts login with correct credentials"",""given"":""a user exists with a status of 'deactivated' in the system"",""when"":""the user attempts to log in using their correct email and password"",""then"":""the system must reject the authentication attempt and display a message: 'Your account is no longer active. Please contact your administrator.'""},{""scenario"":""Deactivated user attempts login with incorrect credentials"",""given"":""a user exists with a status of 'deactivated' in the system"",""when"":""the user attempts to log in using their correct email but an incorrect password"",""then"":""the system must reject the authentication attempt and display the generic 'Invalid credentials' message to prevent account status enumeration.""}]","[""Implement Firebase Auth Blocking Function (`beforeSignIn`)"",""Update Firestore security rules to deny access to non-active users""]","[""All acceptance criteria validated and passing"",""Code for the Auth Blocking Function reviewed and approved"",""Integration testing confirms that login is blocked server-side for inactive users"",""Security review confirms no information leakage and that Firestore rules are updated"",""Story deployed and verified in the staging environment""]"
"US-011","Tenant & User Lifecycle Management","Admin creates a new team and assigns a Supervisor","Admin","As an Admin, I want to create a new team by providing a name and selecting an existing user as its Supervisor, so that I can accurately model my organization's structure, enabling proper approval workflows and team-based event assignments.","Enables the foundational hierarchical structure of the organization within the application. This is a prerequisite for managing user groups, assigning work, and implementing role-based approval workflows.","Must Have","5","[""US-001"",""US-004""]","[{""scenario"":""Successful creation of a new team"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Team Management' page"",""when"":""I click the 'Create Team' button, enter a unique team name, select a valid user with the 'Supervisor' role from the list, and click 'Save'"",""then"":""a new team document is created in the Firestore `/tenants/{tenantId}/teams/{teamId}` collection with the specified name and the selected user's ID as `supervisorId`.""},{""scenario"":""Attempt to create a team with a duplicate name"",""given"":""I am an Admin on the 'Create Team' form, and a team named 'Field Operations' already exists in my tenant"",""when"":""I enter 'Field Operations' as the team name and attempt to save"",""then"":""the system prevents the creation of the team and displays an inline error message 'This team name is already in use.'""},{""scenario"":""Supervisor selection list is correctly populated"",""given"":""I am an Admin on the 'Create Team' form"",""when"":""I click on the 'Select Supervisor' dropdown"",""then"":""the list only contains active users from my tenant who have the 'Supervisor' or 'Admin' role.""}]","[""[Flutter Web] Build Team Management CRUD UI for Admins"",""[Firestore] Implement Security Rules for Team Management""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by at least one other developer"",""Unit and widget tests implemented with >80% code coverage for new logic"",""Firestore Security Rules written and tested to cover all access scenarios"",""Story deployed and verified in the staging environment""]"
"US-012","Tenant & User Lifecycle Management","Admin edits an existing team's name or assigned Supervisor","Admin","As an Admin, I want to edit an existing team's name and reassign its supervisor so that the application accurately reflects my organization's current structure and ensures approval workflows are routed correctly.","Maintains data accuracy of the organizational hierarchy, ensuring correct routing of approval workflows and reliability of reports. Allows the system to adapt to organizational changes without data loss.","Must Have","5","[""US-011"",""US-004"",""US-051""]","[{""scenario"":""Admin successfully edits a team's name"",""given"":""I am an Admin logged into the web dashboard and viewing the list of teams"",""when"":""I select a team to edit, change only its name to a new, unique value, and click 'Save'"",""then"":""the system updates the team's name in the database, a success notification is displayed, and the team list shows the updated name.""},{""scenario"":""Admin successfully reassigns a team's supervisor"",""given"":""I am an Admin logged into the web dashboard and viewing the list of teams"",""when"":""I select a team to edit, select a different, eligible user as the new supervisor, and click 'Save'"",""then"":""the system updates the team's supervisor in the database, a success notification is displayed, and the team list shows the new supervisor.""},{""scenario"":""Team edit action is logged in the audit trail"",""given"":""I am an Admin editing a team's name from 'Old Name' to 'New Name'"",""when"":""I successfully save the change"",""then"":""a new, immutable document is created in the `/auditLog` collection containing the actor's ID, the action type ('team.update'), the target team's ID, and a details map with `{oldValue: {name: 'Old Name'}, newValue: {name: 'New Name'}}`.""}]","[""Update Team Management UI to include Edit functionality"",""Implement Cloud Function for secure validation and audit logging of team edits""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by at least one other developer"",""Unit tests for the Cloud Function, achieving >80% coverage"",""Integration tests covering the UI-to-database flow are passing in the emulator environment"",""Story deployed and verified in the staging environment by QA""]"
"US-013","Tenant & User Lifecycle Management","Admin deletes a team","Admin","As an Admin, I want to permanently delete a team from my organization, so that I can maintain an accurate and clean organizational structure by removing teams that are obsolete or no longer exist.","Improves data hygiene and administrative efficiency by allowing the removal of outdated organizational structures, ensuring reports and user assignments reflect the current state of the company.","Should Have","5","[""US-011"",""US-014"",""US-055"",""US-051""]","[{""scenario"":""Admin successfully deletes a team"",""given"":""I am an Admin logged into the web dashboard and am viewing the list of teams for my tenant"",""when"":""I click the 'Delete' action for a specific team and confirm the action in the confirmation dialog"",""then"":""The system permanently deletes the team document from the database, a success notification is displayed, and the team is removed from the team list in the UI.""},{""scenario"":""Deletion confirmation dialog prevents accidental deletion"",""given"":""I am an Admin on the team management page"",""when"":""I click the 'Delete' action for a team"",""then"":""A confirmation modal appears with the text 'Are you sure you want to delete the team \""[Team Name]\""? This action cannot be undone.' and provides 'Confirm' and 'Cancel' options.""},{""scenario"":""Team deletion is reflected in associated user profiles"",""given"":""A team with several members is being deleted"",""when"":""The Admin confirms the deletion of the team"",""then"":""The `teamId` of the deleted team is removed from the `teamIds` array field for all users who were members of that team.""}]","[""Add 'Delete' functionality to Team Management UI"",""Implement Cloud Function to orchestrate multi-collection updates (un-assign users, un-assign from events, create audit log, delete team)""]","[""All acceptance criteria validated and passing"",""Cloud Function code reviewed and approved by a backend developer"",""Unit tests for the Cloud Function achieve >80% code coverage"",""Integration tests covering the full data modification flow are implemented and passing in the Emulator Suite"",""Story deployed and verified in the staging environment by a QA engineer""]"
"US-014","Tenant & User Lifecycle Management","Admin adds or removes members from any team","Admin","As an Admin, I want to add and remove users from any team within my organization, so that I can maintain accurate team rosters that reflect our current organizational structure.","Ensures data integrity of the organizational structure, which is foundational for correct reporting, supervisor approval workflows, and event assignments. Accurate rosters prevent miscommunication and operational errors.","Must Have","5","[""US-004"",""US-011""]","[{""scenario"":""Admin successfully adds a user to a team"",""given"":""I am an Admin logged into the web dashboard and am viewing the 'Manage Members' page for a specific team"",""when"":""I initiate the 'Add Member' action, select a valid user who is not currently a member of this team, and confirm the addition"",""then"":""The system displays a success notification, the user's name immediately appears in the team's member list on the UI, and the backend data for both the team and the user is updated to reflect the new membership.""},{""scenario"":""Admin successfully removes a user from a team"",""given"":""I am an Admin viewing the member list for a team that has at least one member"",""when"":""I click the 'Remove' action next to a member's name and confirm the removal in the confirmation dialog"",""then"":""The system displays a success notification, the user's name is immediately removed from the team's member list on the UI, and the backend data for the team and user is updated.""},{""scenario"":""System prevents adding a user who is already a member of the team"",""given"":""I am an Admin on the 'Add Member' interface for a specific team"",""when"":""I search for users to add to the team"",""then"":""The list of available users must not include any users who are already members of that team.""}]","[""[Flutter Web] Build Team Membership Management UI"",""Implement backend logic (Cloud Function or Batched Write) for atomic updates to user and team documents""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Firestore Security Rules tests implemented and passing"",""End-to-end integration testing completed successfully"",""User interface reviewed for responsiveness and accessibility (WCAG 2.1 AA)"",""Story deployed and verified in the staging environment""]"
"US-015","Supervisor Features","Supervisor adds or removes members from their own teams","Supervisor","As a Supervisor, I want to add and remove members from the teams I directly manage, so that I can maintain accurate team rosters and ensure workflows like event assignment and attendance approvals are directed to the correct people.","Empowers team leaders to manage their own rosters, improving data accuracy and operational efficiency. Reduces administrative overhead on the Admin role and ensures system functions operate on correct team data.","Should Have","5","[""US-011"",""US-004""]","[{""scenario"":""Supervisor successfully adds an eligible user to a team they manage"",""given"":""I am a logged-in Supervisor and I am viewing the details of a team I am assigned to supervise"",""when"":""I select the 'Add Member' option, search for and select an active user with the 'Subordinate' role who is not already on the team"",""then"":""the user is added to the team's member list, their user profile is updated with the new team ID, and the team member list in my UI refreshes to show the new member.""},{""scenario"":""Supervisor is prevented from managing a team they do not supervise"",""given"":""I am a logged-in Supervisor"",""when"":""I attempt to modify the member list of a team for which I am not the designated supervisor"",""then"":""the system must reject the request with a 'permission-denied' error, and no changes are made to the database.""},{""scenario"":""The list of users to add excludes non-subordinate roles"",""given"":""I am a logged-in Supervisor and I am viewing the 'Add Member' interface"",""when"":""I view the list of available users to add"",""then"":""the list must only contain users with the 'Subordinate' role. Users with 'Admin' or 'Supervisor' roles must be excluded.""}]","[""Build Supervisor-scoped Team Management UI in mobile app"",""Update Firestore security rules to allow Supervisors to modify teams where `supervisorId` matches their UID""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing for both happy paths and security rule enforcement completed successfully in the emulator"",""Security requirements validated, especially Firestore rules"",""Story deployed and verified in the staging environment""]"
"US-016","Security & Compliance","Admin is prevented from creating a circular reporting structure","Admin","As an Admin, I want the system to validate and prevent me from assigning a supervisor to a user if that assignment would create a circular reporting loop, so that I can maintain a logical and functional organizational hierarchy and ensure approval workflows operate correctly.","Ensures data integrity of the organizational hierarchy, prevents infinite loops in approval/escalation workflows, reduces administrative errors, and improves overall system stability.","Must Have","5","[""US-004"",""US-014""]","[{""scenario"":""Admin attempts to create a direct circular dependency (A -> B, then B -> A)"",""given"":""An organizational structure exists where 'User B' reports directly to 'Supervisor A'"",""when"":""An Admin edits the profile of 'Supervisor A' and attempts to assign 'User B' as their new supervisor"",""then"":""The system must prevent the save operation and display a clear error message, such as ''User B' cannot be the supervisor as they are in the reporting line of 'Supervisor A'.'""},{""scenario"":""Admin attempts to create a multi-level, indirect circular dependency (A -> B -> C, then C -> A)"",""given"":""An organizational structure exists where 'User C' reports to 'Supervisor B', and 'Supervisor B' reports to 'Manager A'"",""when"":""An Admin edits the profile of 'Manager A' and attempts to assign 'User C' as their new supervisor"",""then"":""The system must traverse the hierarchy, detect the loop, prevent the save, and display a clear error message, such as ''User C' cannot be the supervisor as they are in the reporting line of 'Manager A'.'""},{""scenario"":""Admin attempts to assign a user as their own supervisor"",""given"":""An Admin is editing the profile of 'User A'"",""when"":""The Admin attempts to select 'User A' from the list of supervisors and save the change"",""then"":""The system must prevent the save operation and display a clear error message, such as 'A user cannot be their own supervisor.'""}]","[""[Functions] Implement Function to Prevent Circular Reporting Structures"",""Integrate validation function call into user profile update UI""]","[""All acceptance criteria validated and passing"",""Server-side validation logic is implemented in a Firebase Cloud Function"",""Unit tests for the Cloud Function achieve >90% coverage of the validation logic"",""E2E tests for happy path and all error conditions are passing"",""Story deployed and verified in staging environment""]"
"US-017","Tenant & User Lifecycle Management","User logs in with email and password","Registered user","As a registered user (Admin, Supervisor, or Subordinate), I want to securely log in to the application using my email and password, so that I can access my personalized dashboard and perform actions specific to my role.","Provides the fundamental security mechanism to authenticate users and grant them role-based access to tenant-specific data, enabling all subsequent application functionality.","Must Have","3","[""US-006"",""US-021""]","[{""scenario"":""Successful login with valid credentials"",""given"":""A registered user with an 'active' status is on the login screen"",""when"":""The user enters their correct email and password and taps the 'Log In' button"",""then"":""The system successfully authenticates the user, a session is created, and the user is redirected to their role-specific dashboard.""},{""scenario"":""Login attempt with an incorrect password"",""given"":""A registered user is on the login screen"",""when"":""The user enters their correct email but an incorrect password and taps 'Log In'"",""then"":""A clear, non-specific error message such as 'Invalid email or password. Please try again.' is displayed, and the user remains on the login screen.""},{""scenario"":""Login attempt by a deactivated user"",""given"":""A user whose account status is 'deactivated' is on the login screen"",""when"":""The user enters their correct email and password and taps 'Log In'"",""then"":""A specific error message is displayed, such as 'Your account has been deactivated. Please contact your administrator.', and access is denied.""}]","[""Build login screen UI for mobile and web"",""Integrate Firebase Authentication SDK for email/password sign-in"",""Implement post-login logic to fetch user role and status""]","[""All acceptance criteria are met and have been validated by QA."",""Code has been peer-reviewed and merged into the main branch."",""End-to-end integration tests for all major scenarios are passing in the CI/CD pipeline."",""UI conforms to the design specifications and accessibility standards."",""The feature is deployed and verified on the staging environment.""]"
"US-018","Tenant & User Lifecycle Management","User logs in with Phone OTP","Registered user","As a registered user (Admin, Supervisor, or Subordinate), I want to log in to the application using a one-time password (OTP) sent to my registered phone number, so that I can securely and conveniently access my account without needing to remember my password.","Improves account security by offering a form of multi-factor authentication. Enhances user experience by providing a convenient, passwordless login option, potentially reducing password-related support issues.","Should Have","5","[""US-006"",""US-017"",""US-021""]","[{""scenario"":""Successful login with a valid phone number and OTP"",""given"":""I am on the login screen and have an active account with a registered and verified phone number"",""when"":""I select the 'Login with Phone' option, enter my registered phone number, receive an OTP via SMS, and enter the correct OTP on the verification screen before it expires"",""then"":""the system validates the OTP, logs me in, and I am redirected to my role-specific dashboard.""},{""scenario"":""Entering an incorrect OTP"",""given"":""I have received an OTP for my registered phone number and am on the OTP verification screen"",""when"":""I enter an incorrect 6-digit OTP and tap 'Verify'"",""then"":""I see an error message stating 'Invalid code. Please try again.' and I remain on the OTP verification screen.""},{""scenario"":""Requesting to resend the OTP"",""given"":""I am on the OTP verification screen"",""when"":""I tap the 'Resend Code' button after the initial 30-second cooldown period"",""then"":""a new OTP is sent to my phone number, the expiry timer on the screen resets to 2 minutes, and the 'Resend Code' button is disabled for another 30 seconds.""}]","[""Configure Firebase project for Phone Number authentication (APNs, SHA fingerprints)"",""Build multi-step UI for phone number entry and OTP verification"",""Integrate Firebase Auth SDK for phone verification""]","[""All acceptance criteria validated and passing on both iOS and Android physical devices."",""Code reviewed and approved by at least one other developer."",""End-to-end manual testing of the full login flow completed successfully."",""Security requirements, especially rate limiting, are validated."",""Story deployed and verified in the staging environment.""]"
"US-019","Security & Compliance","User is temporarily locked out after multiple failed login attempts","Registered user","As a registered user, I want my account to be temporarily locked after a specific number of consecutive failed login attempts, so that my account is protected from unauthorized access via brute-force attacks.","Enhances platform security by mitigating brute-force and dictionary attacks, protecting user data, and building user trust in the system's security measures.","Must Have","3","[""US-017"",""US-020""]","[{""scenario"":""Account is locked after 5 consecutive failed login attempts"",""given"":""A user with a valid account exists"",""when"":""The user enters an incorrect password for the 5th consecutive time"",""then"":""The system locks the account for 15 minutes AND displays a clear error message stating: 'Your account has been temporarily locked due to too many failed login attempts. Please try again in 15 minutes.'""},{""scenario"":""Failed login attempt counter is reset after a successful login"",""given"":""A user has 4 consecutive failed login attempts"",""when"":""The user enters the correct password on the 5th attempt"",""then"":""The user is successfully logged in AND the failed login attempt counter for their account is reset to 0.""},{""scenario"":""Account is automatically unlocked after the lockout period expires"",""given"":""A user's account has been locked and the 15-minute lockout period has passed"",""when"":""The user attempts to log in with the correct password"",""then"":""The user is successfully logged in AND the failed login attempt counter is reset to 0.""}]","[""Enable Firebase Identity Platform for advanced auth features"",""Configure brute-force protection settings"",""Implement client-side UI to display the specific lockout message""]","[""All acceptance criteria validated and passing in a staging environment."",""Code for client-side messaging and server-side logic is peer-reviewed and merged."",""Integration tests covering the full login/lockout/unlock flow are implemented and passing."",""Security review confirms that the lockout logic cannot be bypassed from the client."",""Story is deployed and verified in the staging environment.""]"
"US-020","Tenant & User Lifecycle Management","User resets their forgotten password","Registered user","As a registered user, I want to request a password reset link via my registered email address so that I can securely set a new password and regain access to my account if I forget my current one.","Provides a critical self-service mechanism for account recovery, reducing administrative support load and improving user experience by preventing users from being permanently locked out.","Must Have","2","[""US-017"",""US-073""]","[{""scenario"":""User successfully requests a password reset link"",""given"":""I am on the application's login screen"",""when"":""I click the 'Forgot Password?' link, enter my valid and registered email address, and submit the form"",""then"":""I should see a confirmation message stating, 'If an account with that email exists, a password reset link has been sent.'""},{""scenario"":""User successfully resets their password using the link"",""given"":""I have received a password reset email and clicked the valid, unexpired link"",""when"":""I enter a new password that meets the organization's complexity policy, confirm it correctly, and submit the form"",""then"":""My password should be updated, and I should see a success message confirming the change, with a link to the login page.""},{""scenario"":""User enters an unregistered email address"",""given"":""I am on the password reset request screen"",""when"":""I enter an email address that is not associated with any user in the system and submit"",""then"":""I should see the exact same generic confirmation message as the happy path to prevent email enumeration.""}]","[""Build UI for 'Forgot Password' request and password reset pages"",""Integrate Firebase Auth SDK's `sendPasswordResetEmail` and `confirmPasswordReset` functions"",""Implement deep linking to handle the link from the email""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by at least one other developer"",""End-to-end integration test for the full flow is implemented and passing"",""Security check for email enumeration vulnerability has been performed and passed"",""Story deployed and verified in the staging environment""]"
"US-021","Tenant & User Lifecycle Management","User sees a role-specific dashboard after logging in","Authenticated user","As an authenticated user (Admin, Supervisor, or Subordinate), I want to be automatically routed to my role-specific dashboard immediately after a successful login, so that I can efficiently access the information and tools relevant to my responsibilities without unnecessary navigation.","Improves user efficiency and satisfaction by providing a personalized experience. Reinforces the Role-Based Access Control (RBAC) model by immediately presenting users with relevant tools and data.","Must Have","2","[""US-017"",""US-001"",""US-004""]","[{""scenario"":""Admin successfully logs into the web application"",""given"":""a registered user exists with the role 'Admin'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must redirect them to the main Admin Web Dashboard.""},{""scenario"":""Supervisor successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Supervisor'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Supervisor Mobile Dashboard.""},{""scenario"":""Subordinate successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Subordinate'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Subordinate Mobile Dashboard.""},{""scenario"":""Non-Admin user attempts to log into the web application"",""given"":""a registered user exists with the role 'Supervisor' or 'Subordinate'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must display a page informing them that the web dashboard is for administrative access only and they should use the mobile application.""}]","[""Implement a root-level authentication state listener"",""Read user's role from Firebase Auth custom claims"",""Implement conditional routing logic using GoRouter""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully for all roles and platforms"",""Security requirements for using custom claims are validated via code review"",""Story deployed and verified in the staging environment""]"
"US-022","Tenant & User Lifecycle Management","Admin initiates the permanent deletion of their organization's tenant","Admin","As an Admin, I want to initiate the permanent deletion of my organization's tenant through a secure, multi-step process, so that I can comply with my company's data removal policies and ensure all our data is erased from the service when we decide to stop using it.","Provides a self-service offboarding capability, ensures compliance with data privacy regulations (e.g., GDPR's 'right to erasure'), builds customer trust by giving them control over their data, and reduces manual administrative overhead.","Should Have","5","[""US-017"",""US-023"",""US-024"",""US-025""]","[{""scenario"":""Admin successfully initiates tenant deletion"",""given"":""an Admin is logged into the web dashboard and has navigated to the 'Tenant Settings' page"",""when"":""the Admin clicks the 'Delete Organization' button, confirms their intent in the warning modal, and successfully re-authenticates by entering their correct password"",""then"":""the system updates the tenant's document in Firestore to include a status of 'pending_deletion' and a 'scheduledDeletionTimestamp' set to 30 days in the future.""},{""scenario"":""Admin enters incorrect password during re-authentication"",""given"":""an Admin has initiated the tenant deletion process and is prompted to re-authenticate"",""when"":""the Admin enters an incorrect password and confirms"",""then"":""the system displays an 'Invalid password' error message, the deletion process is aborted, and the tenant's status remains unchanged.""},{""scenario"":""UI displays clear warnings about the irreversible action"",""given"":""an Admin has clicked the 'Delete Organization' button"",""when"":""the confirmation modal is displayed"",""then"":""the modal must explicitly state that the action is irreversible after the grace period, mention the 30-day grace period, and specify that all data will be permanently deleted.""}]","[""Build 'Delete Organization' UI in Admin dashboard"",""Implement Cloud Function for requesting tenant deletion""]","[""All acceptance criteria validated and passing"",""Integration testing of the full flow (UI -> Cloud Function -> Firestore) completed successfully in the emulator suite"",""Security requirements validated, including role-based access control on the Cloud Function"",""Story deployed and verified in the staging environment""]"
"US-023","Security & Compliance","Admin must re-authenticate to confirm tenant deletion","Admin","As an Admin with the authority to delete my organization's tenant, I want to be forced to re-enter my password to confirm the deletion request, so that I can prevent accidental or unauthorized deletion of all my organization's data, ensuring a critical safeguard is in place for this irreversible action.","Prevents catastrophic, accidental data loss for an entire organization, which protects against significant business disruption and potential legal liability. This enhances system security and builds user trust.","Must Have","5","[""US-022"",""US-017""]","[{""scenario"":""Admin successfully re-authenticates to confirm tenant deletion"",""given"":""an Admin has clicked the final 'Delete Tenant' button, triggering the confirmation step"",""when"":""the re-authentication modal appears, the Admin enters their correct password, and clicks the 'Confirm Deletion' button"",""then"":""the system successfully validates the password, and the tenant deletion process is initiated.""},{""scenario"":""Admin enters an incorrect password"",""given"":""the re-authentication modal for tenant deletion is displayed"",""when"":""the Admin enters an incorrect password and clicks 'Confirm Deletion'"",""then"":""an inline error message 'Incorrect password. Please try again.' is displayed, and the deletion process is not initiated.""},{""scenario"":""Admin makes multiple failed re-authentication attempts"",""given"":""the re-authentication modal for tenant deletion is displayed"",""when"":""the Admin enters an incorrect password 5 consecutive times"",""then"":""the 'Confirm Deletion' button becomes disabled, and a message like 'Too many failed attempts. Please try again in 1 minute.' is displayed.""}]","[""Build re-authentication modal UI"",""Implement secure Cloud Function to handle re-authentication and trigger deletion process""]","[""All acceptance criteria validated and passing"",""Unit tests for the modal UI and Cloud Function implemented with >80% coverage"",""Integration testing between the frontend and backend function completed successfully using the Emulator Suite"",""Security requirements validated, including role-based access control on the Cloud Function"",""Story deployed and verified in the staging environment""]"
"US-024","Tenant & User Lifecycle Management","Admin is informed of the 30-day grace period for tenant deletion","Admin","As an Admin who has just confirmed a request to delete my organization's tenant, I want to be immediately and clearly informed about the 30-day grace period and the final deletion date, so that I understand the consequences of my action, feel confident that there's a safety net to prevent accidental data loss, and know how to reverse the process if needed.","Provides a critical safety mechanism to prevent accidental, irreversible data loss. This builds user trust, reduces support incidents related to accidental deletion, and aligns with enterprise-grade data management best practices.","Must Have","2","[""US-022"",""US-023""]","[{""scenario"":""Display of grace period information after deletion confirmation"",""given"":""An Admin has just successfully re-authenticated to confirm the tenant deletion request"",""when"":""the system processes the deletion request successfully"",""then"":""the UI immediately transitions to a confirmation screen or displays a prominent, persistent banner on the dashboard.""},{""scenario"":""Content of the grace period notification"",""given"":""the grace period confirmation screen is displayed"",""when"":""the Admin views the content"",""then"":""the message must explicitly state that a 30-day grace period has begun, show the exact date and time the permanent deletion will occur, and state that the deletion can be cancelled anytime before this date.""},{""scenario"":""Email notification of pending deletion"",""given"":""an Admin has successfully confirmed the tenant deletion request"",""when"":""the backend processes the request"",""then"":""the system sends an email to the initiating Admin's registered email address with the 30-day grace period and the exact permanent deletion date.""}]","[""Build UI for grace period confirmation screen and persistent banner"",""Update tenant deletion Cloud Function to trigger a confirmation email via SendGrid""]","[""All acceptance criteria validated and passing"",""Integration testing between the frontend, Cloud Function, and Firestore completed successfully"",""User interface reviewed and approved by UX/Product Owner"",""Story deployed and verified in the staging environment""]"
"US-025","Tenant & User Lifecycle Management","Admin cancels a pending tenant deletion","Admin","As an Admin of an organization, I want to cancel a previously requested tenant deletion during the 30-day grace period, so that I can prevent the permanent loss of my organization's data and restore full access to the application if I change my mind or made a mistake.","Provides a critical safety net to prevent accidental or premature permanent data loss. Reduces customer support load by enabling self-service reversal of a destructive action. Increases user trust and confidence in the platform.","Must Have","5","[""US-022"",""US-024""]","[{""scenario"":""Admin successfully cancels a pending deletion within the grace period"",""given"":""I am an authenticated Admin for a tenant whose status is 'pending_deletion' and the current date is within the 30-day grace period"",""when"":""I navigate to the 'Tenant Settings' page in the web dashboard, click the 'Cancel Scheduled Deletion' button, and confirm the action in the subsequent modal"",""then"":""The system updates the tenant's status in Firestore from 'pending_deletion' to 'active' and creates an audit log for the cancellation.""},{""scenario"":""UI reflects the restored active state after cancellation"",""given"":""An Admin has successfully cancelled a pending tenant deletion"",""when"":""The 'Tenant Settings' page reloads or is refreshed"",""then"":""The warning banner about the pending deletion is no longer visible and the 'Request Deletion' functionality is available again.""},{""scenario"":""Attempt to cancel deletion outside the grace period"",""given"":""A tenant's 30-day grace period for deletion has expired"",""when"":""An Admin attempts to trigger the cancellation action"",""then"":""The system must reject the request with an error message like 'The grace period has expired. This action can no longer be performed.'""}]","[""Build 'Cancel Deletion' UI in Admin dashboard banner"",""Implement Cloud Function to handle cancellation logic, including status update and audit log""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function and UI components, with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security rules and server-side validation logic have been peer-reviewed"",""Story deployed and verified in the staging environment""]"
"US-026","Security & Compliance","User accepts Terms of Service and Privacy Policy","New user","As a new user completing my registration, I want to be presented with the Terms of Service and Privacy Policy and be required to accept them, so that I understand the rules of the service and how my data will be used, and my account can be fully activated for use.","Ensures legal and regulatory compliance (e.g., GDPR) by obtaining explicit user consent before account activation. Mitigates legal risk and builds user trust through transparency.","Must Have","2","[""US-006"",""US-021""]","[{""scenario"":""User reviews and accepts policies"",""given"":""A new user has successfully set their password and is presented with the 'Terms and Policy Acceptance' screen"",""when"":""The user checks the box to indicate acceptance of the policies AND clicks the 'Accept & Continue' button"",""then"":""The system updates the user's status from 'invited' to 'active' in Firestore, an immutable audit log of the acceptance is created, AND the user is redirected to their role-specific dashboard.""},{""scenario"":""User attempts to continue without accepting"",""given"":""A new user is on the 'Terms and Policy Acceptance' screen"",""when"":""The user attempts to click the 'Accept & Continue' button without checking the box"",""then"":""The button must be in a disabled state and no action is performed.""},{""scenario"":""User closes the app before accepting"",""given"":""A new user is on the 'Terms and Policy Acceptance' screen and closes the application"",""when"":""The user re-opens the app and logs in with their newly created credentials"",""then"":""The system must redirect them back to the 'Terms and Policy Acceptance' screen because their account status is still 'invited'.""}]","[""Build 'Terms and Policy Acceptance' screen UI"",""Implement backend logic to atomically update user status and create audit log entry"",""Update application routing to gate access for un-activated users""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing completed successfully, verifying Firestore updates"",""User interface reviewed and approved for UX and accessibility compliance"",""Story deployed and verified in the staging environment""]"
"US-027","Security & Compliance","User password must meet complexity requirements","System User","As a System User (Admin, Supervisor, or Subordinate), I want my new password to be validated against a set of complexity rules when I register or reset my password, so that I can be confident my account is protected against unauthorized access.","Enhances account and data security by preventing the use of weak or easily guessable passwords. Reduces the risk of unauthorized access and supports security compliance.","Must Have","5","[""US-006"",""US-020""]","[{""scenario"":""User enters a password that meets all complexity requirements"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password that satisfies all defined complexity rules (e.g., 'StrongP@ssw0rd')"",""then"":""Each requirement in the real-time validation checklist is marked as 'met' and the 'Submit' button becomes enabled.""},{""scenario"":""Password is too short"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password with fewer than the required minimum characters (e.g., 'Shrt1@')"",""then"":""The 'minimum characters' requirement in the validation checklist is marked as 'unmet' and the 'Submit' button remains disabled.""},{""scenario"":""Server-side validation rejects an invalid password"",""given"":""A user attempts to set a new password by bypassing client-side validation and sending a direct request to the server"",""when"":""The request contains a password that does not meet the tenant's complexity policy"",""then"":""The server-side logic (Cloud Function) must reject the request with an appropriate error code and message, and the user's password is not updated.""}]","[""Create reusable password validation UI component with real-time feedback"",""Implement Firebase Auth Blocking Function (`beforeCreate`) for server-side enforcement"",""Integrate component into registration and password reset flows""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented with >80% coverage for the validation logic"",""Server-side validation logic implemented in a Cloud Function and tested"",""Security requirements validated, including a test to bypass client-side checks"",""Story deployed and verified in staging environment""]"
"US-028","Core Attendance Workflow","Subordinate checks in for attendance","Subordinate","As a Subordinate, I want to tap a 'Check-In' button on my mobile app so that the system captures my current time and GPS location to create an official attendance record for the start of my workday.","Provides a verifiable, time-stamped, and geo-located record of when an employee starts their workday. This is the foundational data point for all attendance tracking, reporting, and approval workflows.","Must Have","5","[""US-017"",""US-021"",""US-076""]","[{""scenario"":""Successful check-in with an active internet connection"",""given"":""I am a logged-in Subordinate on the main dashboard, I have granted location permissions, and I have not checked in for the current calendar day"",""when"":""I tap the 'Check-In' button"",""then"":""The system captures my current client timestamp and GPS coordinates, a new attendance record is created in Firestore with status 'pending', and the UI updates to show a success message and my check-in time.""},{""scenario"":""Check-in attempt without location permissions"",""given"":""I am a logged-in Subordinate and I have previously denied or not yet granted location permissions"",""when"":""I tap the 'Check-In' button"",""then"":""The system prompts me to grant location permissions. If I deny them, the check-in fails and an error message is displayed stating that location is required.""},{""scenario"":""Attempting to check in more than once in a day"",""given"":""I am a logged-in Subordinate and I have already successfully checked in for the current calendar day"",""when"":""I view the main dashboard"",""then"":""The 'Check-In' button is disabled or hidden, preventing me from creating a duplicate check-in record for the same day.""}]","[""[Flutter] Implement Check-In/Check-Out UI and State Management"",""[Flutter] Implement GPS Capture for Attendance Actions"",""[Functions] Implement Clock Discrepancy Check""]","[""All acceptance criteria validated and passing"",""E2E tests for offline and permission flows are passing"",""Performance requirements for GPS lock and data sync are verified"",""Security rules for creating attendance records are deployed and tested"",""Story deployed and verified in the staging environment on both Android and iOS""]"
"US-029","Core Attendance Workflow","Subordinate checks out from attendance","Subordinate","As a Subordinate, I want to check out at the end of my shift by tapping a button, so that my attendance record for the day is completed with an accurate timestamp and GPS location, ensuring my work duration is correctly logged.","Completes the daily attendance data loop, enabling accurate calculation of work duration and providing complete records for reporting, compliance, and operational management.","Must Have","5","[""US-028"",""US-030"",""US-033"",""US-077""]","[{""scenario"":""Successful check-out on an active attendance record"",""given"":""a Subordinate user is logged in and has an active check-in record for the current calendar day"",""when"":""the user taps the 'Check-Out' button"",""then"":""the system must capture the current client timestamp and GPS coordinates, update the existing attendance record with a 'checkOutTime' and 'checkOutGps', and display a success message.""},{""scenario"":""Check-out action updates the correct daily record"",""given"":""a Subordinate user has an active check-in record for the current day"",""when"":""the user performs the check-out action"",""then"":""the system must update the *same* attendance document that was created during check-in for that day, and must not create a new document.""},{""scenario"":""System cannot acquire a GPS signal during check-out"",""given"":""a Subordinate user attempts to check out"",""when"":""the device is unable to get a GPS lock within the 10-second timeout"",""then"":""the system must prevent the check-out and display a clear error message.""}]","[""Update attendance UI state management for check-out"",""Implement logic to update existing Firestore record"",""Integrate GPS capture for check-out action""]","[""All acceptance criteria validated and passing"",""End-to-end test scenario for the check-out flow is implemented and passing"",""Manual testing confirms correct functionality on target iOS and Android physical devices"",""Security rules preventing unauthorized updates are tested and validated"",""Story deployed and verified in the staging environment""]"
"US-030","Core Attendance Workflow","Subordinate is prevented from checking out before checking in","Subordinate","As a Subordinate, I want the 'Check-Out' button to be disabled and visually distinct until I have successfully checked in for the day, so that I am prevented from making a logical error in my attendance record and can follow the correct workflow without confusion.","Ensures data integrity by preventing orphaned check-out records, reduces user error and subsequent correction requests, and provides a clear, guided user experience.","Must Have","2","[""US-028"",""US-033""]","[{""scenario"":""Initial state on a new day"",""given"":""a Subordinate user opens the attendance screen"",""when"":""they have no active (non-checked-out) attendance record for the current calendar day"",""then"":""the 'Check-In' button is enabled and interactive, and the 'Check-Out' button is disabled and not interactive.""},{""scenario"":""UI state updates immediately after a successful check-in"",""given"":""a Subordinate is on the attendance screen with the 'Check-In' button enabled"",""when"":""they successfully perform a check-in action"",""then"":""the 'Check-In' button immediately becomes disabled, and the 'Check-Out' button immediately becomes enabled.""},{""scenario"":""State reset on a new calendar day"",""given"":""a Subordinate had an active check-in on the previous calendar day"",""when"":""they open the app after midnight according to the tenant's timezone"",""then"":""the attendance screen state is reset for the new day, with the 'Check-In' button enabled and the 'Check-Out' button disabled.""}]","[""Implement state logic in Riverpod provider to control button states"",""Query Firestore for current day's active record on screen load"",""Handle timezone-correct date calculations""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented with >80% coverage for the new logic"",""Integration testing completed successfully against the Firebase Emulator"",""Accessibility requirements for button states validated with a screen reader"",""Story deployed and verified in staging environment""]"
"US-031","Admin Reporting & Integrations","Admin views and filters for attendance records flagged for clock discrepancy","Admin","As an Admin, I want to view and filter for attendance records that are flagged for a significant clock discrepancy between the device and the server, so that I can audit data integrity, investigate potential time manipulation, and identify users with persistent device or connectivity issues.","Enhances data integrity and trust in the attendance system by providing a mechanism to audit and investigate anomalies. Helps detect potential time fraud or recurring technical problems, supporting fair and accurate timekeeping.","Should Have","3","[""US-059"",""US-060""]","[{""scenario"":""Visual identification of a flagged record in the attendance report"",""given"":""an Admin is logged into the web dashboard and is viewing the main attendance report"",""when"":""the report displays an attendance record that has the 'clock_discrepancy' flag in its data"",""then"":""that record's row must display a clear and distinct visual indicator (e.g., a warning icon or colored label) signifying a clock discrepancy.""},{""scenario"":""Admin filters the report to show only records with clock discrepancies"",""given"":""the attendance report contains a mix of records, some with the 'clock_discrepancy' flag and some without"",""when"":""the Admin selects the 'Clock Discrepancy' option from the report's filter controls"",""then"":""the report view must update to show only the records that contain the 'clock_discrepancy' flag.""},{""scenario"":""Tooltip provides context for the discrepancy flag"",""given"":""an Admin is viewing an attendance record with the clock discrepancy indicator"",""when"":""the Admin hovers their mouse cursor over the visual indicator"",""then"":""a tooltip must appear with an explanatory text, such as 'Device time differs from server time by more than 5 minutes.'""}]","[""[Functions] Implement Clock Discrepancy Check"",""Update Admin report UI to include filter option and visual indicator""]","[""All acceptance criteria validated and passing"",""The required Firestore index is defined in `firestore.indexes.json` and deployed"",""Performance requirements for filtering verified"",""Accessibility checks passed for new UI elements"",""Story deployed and verified in the staging environment""]"
"US-032","Core Attendance Workflow","Subordinate's attendance is automatically checked out","Subordinate","As a Subordinate, I want the system to automatically check me out at a specific time set by my organization so that my attendance record is complete and accurate even if I forget to manually check out, which saves me from having to request a correction later.","Improves data integrity by ensuring all attendance records are closed daily. Reduces administrative overhead for Subordinates, Supervisors, and Admins by minimizing the need for manual corrections of missed check-outs.","Should Have","5","[""US-028"",""US-069"",""US-070""]","[{""scenario"":""Successful auto-checkout for a user who forgot to check out"",""given"":""An organization has enabled the auto-checkout feature for 17:30 in their configured timezone"",""when"":""The scheduled auto-checkout function runs at the configured time for that timezone for a user who checked in but not out"",""then"":""The Subordinate's attendance record is updated with a 'checkOutTime' equal to 17:30 and an 'auto-checked-out' flag is added.""},{""scenario"":""Auto-checkout process ignores users who have already checked out"",""given"":""An organization has enabled auto-checkout for 17:30 and a Subordinate has manually checked out at 17:15"",""when"":""The scheduled auto-checkout function runs at 17:30"",""then"":""The Subordinate's attendance record is NOT modified by the function.""},{""scenario"":""Auto-checked-out record is visually distinct in the Supervisor's dashboard"",""given"":""A Subordinate's attendance record has been successfully auto-checked-out"",""when"":""Their Supervisor views the list of pending attendance records"",""then"":""The corresponding record is displayed with a clear visual indicator (e.g., an icon or label) that identifies it as an 'Auto Check-Out'.""}]","[""Implement scheduled Cloud Function for auto-checkout"",""Update UI for Supervisor and Subordinate to display 'auto-checked-out' flag""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function implemented with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Required Firestore indexes are defined in 'firestore.indexes.json'"",""Story deployed and verified in the staging environment via a manually triggered function run""]"
"US-033","Core Attendance Workflow","Subordinate marks attendance while offline","Subordinate","As a Subordinate, I want to be able to check in and check out when my device is offline, so that my attendance is captured accurately at the correct time, regardless of my network connectivity.","Ensures data integrity and accuracy by capturing attendance at the moment it occurs. Increases system reliability and user trust, reducing manual corrections and support requests for missed punches due to network issues.","Must Have","5","[""US-028"",""US-029""]","[{""scenario"":""User performs a check-in while the device is offline"",""given"":""The user is logged into the application and their device has no internet connectivity"",""when"":""The user taps the 'Check-In' button"",""then"":""The application captures the current device timestamp and GPS coordinates, creates a new attendance record in the local Firestore cache with an 'isOfflineEntry' flag, and the UI updates to show a 'Checked In' status.""},{""scenario"":""Offline records are automatically synchronized when connectivity is restored"",""given"":""The user has one or more attendance records stored in the local cache from offline actions"",""when"":""The device regains a stable internet connection"",""then"":""The Firestore SDK automatically syncs the local records to the server, and the 'isOfflineEntry' flag is preserved on the server-side record.""},{""scenario"":""Application is closed before offline data can be synced"",""given"":""The user has performed an offline check-in/out and then terminates the application before regaining connectivity"",""when"":""The user later re-launches the application with an active internet connection"",""then"":""The application's startup process ensures the Firestore SDK initiates the synchronization of any pending offline data.""}]","[""[Flutter] Implement Offline Attendance Marking"",""Configure Firestore SDK for offline persistence""]","[""All acceptance criteria validated and passing"",""E2E integration tests for all offline scenarios are implemented and passing"",""User interface reviewed and approved by the product owner"",""Story deployed and verified in the staging environment on both Android and iOS physical devices""]"
"US-034","Core Attendance Workflow","Subordinate's offline attendance syncs automatically","Subordinate","As a Subordinate, I want my offline attendance records to be automatically sent to the server when my device reconnects to the internet, so that my attendance is accurately recorded without any extra effort from my side and I can trust the system to work reliably.","Ensures data integrity and accuracy by capturing all attendance records regardless of network status. Improves user experience by removing the need for manual synchronization, which builds trust and reduces administrative overhead.","Must Have","5","[""US-033""]","[{""scenario"":""Successful sync of a single offline check-in record"",""given"":""a user is logged in on the mobile app but the device is offline"",""when"":""the user performs a check-in, and the device later regains a stable internet connection"",""then"":""the Firestore SDK automatically detects the connection and syncs the pending write operation to the server, and the record's flags array includes `isOfflineEntry: true`.""},{""scenario"":""Syncing multiple offline records"",""given"":""a user has been offline for an extended period and has created multiple unsynced attendance records"",""when"":""the device regains a stable internet connection"",""then"":""all pending offline records are automatically sent to the server in the correct order.""},{""scenario"":""Sync is attempted while app is in the background"",""given"":""a user has created an offline record and then minimized the application"",""when"":""the device regains internet connectivity while the app is in the background"",""then"":""the sync process is initiated by the operating system and the Firestore SDK (within platform limitations).""}]","[""Verify Firestore offline persistence configuration"",""Implement UI indicators for 'pending sync' state"",""Test background sync behavior on iOS and Android""]","[""All acceptance criteria validated and passing"",""Manual E2E testing on physical Android and iOS devices confirms sync works as expected in various network conditions"",""Performance requirements verified (no UI blocking)"",""Story deployed and verified in staging environment""]"
"US-035","Core Attendance Workflow","Subordinate is notified of a persistent sync failure","Subordinate","As a Subordinate, I want to be clearly and persistently notified within the app if my offline attendance data has failed to sync for over 24 hours, so that I can take action to resolve the issue and prevent my records from being lost.","Ensures data integrity by preventing the silent loss of offline attendance records. This builds user trust, reduces administrative overhead for manual corrections, and guarantees accurate reporting.","Should Have","5","[""US-033""]","[{""scenario"":""Notification appears for a single stale offline record"",""given"":""a user has created an attendance record while offline, and it has remained unsynced for more than 24 hours"",""when"":""the user opens the application or brings it to the foreground"",""then"":""a persistent, non-dismissible notification UI element (e.g., a banner) is displayed at the top of the main screens, stating '1 record failed to sync' and including an actionable button like 'Retry Sync'.""},{""scenario"":""Successful manual sync dismisses the notification"",""given"":""the persistent sync failure notification is visible and the device now has a stable internet connection"",""when"":""the user taps the 'Retry Sync' button"",""then"":""the system attempts to sync the stale offline data with the server, the banner is removed, and a temporary success message is displayed.""},{""scenario"":""Notification correctly handles multiple stale records"",""given"":""a user has multiple offline records that have remained unsynced for more than 24 hours"",""when"":""the user opens the application"",""then"":""a single persistent notification is displayed and the notification text correctly reflects the number of failed records (e.g., '3 records failed to sync').""}]","[""[Flutter] Implement Persistent Sync Failure Notification"",""Implement client-side mechanism to track age of unsynced records"",""Build global UI banner managed by Riverpod""]","[""All acceptance criteria validated and passing"",""E2E integration test for the full offline-notify-retry cycle is implemented and passing"",""User interface reviewed and approved by the design team"",""Story deployed and verified in the staging environment""]"
"US-036","Core Attendance Workflow","Subordinate manually re-triggers a failed data sync","Subordinate","As a Subordinate, I want to be able to manually trigger a re-sync of my offline attendance records that have failed to upload automatically, so that I can ensure my attendance data is not lost and is accurately recorded on the server.","Prevents data loss for offline attendance entries, ensures data integrity for reporting, reduces administrative overhead for manual corrections, and builds user trust in the system's reliability.","Should Have","3","[""US-033"",""US-035""]","[{""scenario"":""Successful manual re-sync of a failed record"",""given"":""I am a Subordinate user with an attendance record that has a persistent 'Sync Failed' notification"",""when"":""I tap the 'Retry Sync' button associated with the failed record while my device has a stable internet connection"",""then"":""the system re-attempts to write the local record to Firestore, and upon successful synchronization, the 'Sync Failed' notification for that specific record is removed.""},{""scenario"":""Manual re-sync attempt fails due to no internet connectivity"",""given"":""I am a Subordinate user viewing a 'Sync Failed' notification for an offline record"",""when"":""I tap the 'Retry Sync' button while my device is still offline"",""then"":""the system immediately displays a clear error message (e.g., 'Sync failed. Please check your internet connection and try again.') and the 'Sync Failed' notification remains visible.""}]","[""Implement 'Retry Sync' button logic"",""Handle UI states for sync in progress, success, and failure"",""Integrate with remote logging for persistent server-side errors""]","[""All acceptance criteria validated and passing on both iOS and Android."",""E2E integration test for the manual sync happy path and failure path is implemented and passing."",""All error states are handled gracefully and logged appropriately."",""Story deployed and verified in the staging environment.""]"
"US-037","Supervisor Features","Supervisor views pending attendance records from subordinates","Supervisor","As a Supervisor, I want to see a clear and filterable list of all attendance records from my direct subordinates that are awaiting my review, so that I can efficiently manage my team's attendance, ensure accuracy, and take timely action on pending approvals.","Enables the core attendance approval workflow, ensuring that employee work hours are verified in a timely manner. This is a critical step for maintaining data integrity and accountability within the organization.","Must Have","5","[""US-017"",""US-011"",""US-015"",""US-028""]","[{""scenario"":""Supervisor views a list of pending records"",""given"":""a Supervisor is logged in and has at least one direct subordinate with an attendance record in 'pending' status"",""when"":""the Supervisor navigates to their main dashboard or attendance review screen"",""then"":""a list of all 'pending' attendance records from their direct subordinates is displayed.""},{""scenario"":""Data Scoping: List only shows records from direct subordinates"",""given"":""a Supervisor is logged in"",""when"":""the system fetches attendance records for their dashboard"",""then"":""the query must filter records where the `supervisorId` field matches the logged-in Supervisor's `userId`.""},{""scenario"":""Real-time Updates: List updates when a new record is submitted"",""given"":""a Supervisor is viewing their attendance review screen"",""when"":""one of their direct subordinates submits a new attendance record (checks in)"",""then"":""the new 'pending' record automatically appears at the top of the list without requiring a manual refresh.""}]","[""[Flutter] Build Supervisor's Pending Approvals Dashboard"",""Implement real-time Firestore query with composite index on `supervisorId` and `status`"",""Implement and test security rules for scoped data access""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this feature are written and tested"",""Required Firestore composite index is defined in `firestore.indexes.json`"",""Performance requirements (load time) verified"",""Story deployed and verified in the staging environment""]"
"US-038","Supervisor Features","Supervisor identifies flagged attendance records","Supervisor","As a Supervisor, I want to see clear visual indicators on attendance records that have been flagged for exceptions (like offline entry or clock discrepancy) in my approval dashboard, so that I can quickly identify records that require closer scrutiny and make more informed approval decisions.","Improves the efficiency and accuracy of the attendance approval process by focusing the Supervisor's attention on records that are anomalous or require special consideration, thereby enhancing data integrity.","Should Have","2","[""US-037"",""US-033"",""US-032""]","[{""scenario"":""Display indicator for offline entry"",""given"":""a Supervisor is logged in and viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'isOfflineEntry' flag"",""then"":""the record must display a distinct visual indicator (e.g., an icon or chip) representing an offline entry.""},{""scenario"":""Display indicator for clock discrepancy"",""given"":""a Supervisor is logged in and viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'clock_discrepancy' flag"",""then"":""the record must display a distinct visual indicator representing a clock discrepancy.""},{""scenario"":""Display indicators for a record with multiple flags"",""given"":""a Supervisor is logged in and viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record has multiple flags, such as 'isOfflineEntry' and 'clock_discrepancy'"",""then"":""the record must display a separate visual indicator for each flag, without cluttering the UI.""}]","[""[Flutter] Display Visual Indicators for Flagged Records"",""Create reusable `FlagIndicator` widget"",""Update attendance list item widget to parse `flags` array""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented for the flag display logic, achieving >80% code coverage"",""User interface reviewed and approved by the Product Owner/Designer"",""Accessibility requirements validated with screen readers and contrast checkers"",""Story deployed and verified in the staging environment""]"
"US-039","Supervisor Features","Supervisor approves a single attendance record","Supervisor","As a Supervisor, I want to approve a single pending attendance record for one of my subordinates so that I can validate their work hours and move the record to an 'approved' state for accurate reporting.","Enables the core attendance validation workflow, ensures data integrity for reporting, and provides accountability by formally confirming subordinate work hours.","Must Have","2","[""US-037"",""US-028"",""US-011""]","[{""scenario"":""Successful approval of a pending record"",""given"":""I am a Supervisor logged in and I am viewing the 'Pending Approvals' list which contains an attendance record with a 'pending' status from my direct subordinate."",""when"":""I tap the 'Approve' button for that specific attendance record."",""then"":""The system updates the record's status from 'pending' to 'approved' in the database, a success message is displayed, and the record is immediately removed from my 'Pending Approvals' list.""},{""scenario"":""Audit Trail: Approval action is logged"",""given"":""I am a Supervisor and I am about to approve a pending attendance record."",""when"":""The system successfully processes my approval action."",""then"":""A new, immutable document is created in the `auditLog` collection containing the actor, action type, target entity, and timestamp.""},{""scenario"":""Record was already processed by another user/process"",""given"":""I am a Supervisor viewing a 'pending' record on my screen, but an Admin has already approved it in the background."",""when"":""I tap the 'Approve' button."",""then"":""The system prevents the update and displays an informative message, such as 'This record has already been processed.'""}]","[""Implement 'Approve' button logic in Supervisor dashboard"",""Update Firestore security rules to allow status change by authorized supervisor"",""Implement Cloud Function trigger to create audit log entry""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this action are written and tested"",""Integration testing with the Firebase Emulator completed successfully"",""Security requirements validated via security rule tests"",""Story deployed and verified in the staging environment""]"
"US-040","Supervisor Features","Supervisor rejects a single attendance record with a reason","Supervisor","As a Supervisor, I want to reject a subordinate's attendance record and be required to provide a reason, so that I can maintain accurate team records, provide clear feedback to my subordinate for correction, and ensure the rejection is documented for auditing purposes.","Ensures data accuracy in attendance records, provides a transparent and auditable approval workflow, and facilitates clear communication between supervisors and subordinates regarding attendance issues.","Must Have","2","[""US-037""]","[{""scenario"":""Successful rejection of a record with a valid reason"",""given"":""A Supervisor is viewing a 'pending' attendance record for one of their direct subordinates"",""when"":""The Supervisor selects the 'Reject' action, enters a valid reason, and confirms the action"",""then"":""The attendance record's status in Firestore is updated to 'rejected' and the `rejectionReason` field contains the entered text.""},{""scenario"":""Attempting to reject without providing a reason"",""given"":""A Supervisor has initiated the rejection process for an attendance record"",""when"":""The Supervisor attempts to confirm the rejection without entering any text in the reason field"",""then"":""The system displays a validation error message and the rejection action is blocked.""},{""scenario"":""Audit log is created for the rejection action"",""given"":""A Supervisor successfully rejects an attendance record"",""when"":""The record's status is updated to 'rejected'"",""then"":""A new, immutable document is created in the `auditLog` collection detailing the action.""}]","[""Implement 'Reject' button and reason-entry modal UI"",""Update Firestore security rules for rejection action"",""Implement Cloud Function trigger for audit log""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented for the rejection dialog and its logic, achieving >80% coverage"",""Firestore Security Rules for this action are written and tested"",""An audit log entry is correctly generated upon rejection"",""Story deployed and verified in the staging environment""]"
"US-041","Supervisor Features","Supervisor bulk-approves multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records from my subordinates and approve them all with a single action, so that I can efficiently manage my team's attendance and save significant time compared to approving each record individually.","Reduces administrative overhead for managers by streamlining a repetitive task, leading to faster attendance data processing and increased operational efficiency.","Should Have","5","[""US-037"",""US-039""]","[{""scenario"":""Successful bulk approval of multiple records"",""given"":""A Supervisor is viewing the 'Pending Approvals' list which contains at least three pending records"",""when"":""The Supervisor selects three pending records using their respective checkboxes and clicks the 'Approve Selected' button"",""then"":""The system initiates an atomic batch update, updates all selected records' status to 'approved', and removes them from the pending list UI.""},{""scenario"":""'Select All' functionality"",""given"":""A Supervisor is viewing the 'Pending Approvals' list with multiple records visible"",""when"":""The Supervisor clicks the 'Select All' checkbox in the list header"",""then"":""All visible records in the list are selected.""},{""scenario"":""Bulk approval operation fails atomically"",""given"":""A Supervisor has selected multiple pending records for approval"",""when"":""The Supervisor clicks 'Approve Selected' and the backend operation fails for any reason"",""then"":""The entire batch operation is rolled back, and no records have their status changed.""}]","[""Implement multi-select UI in Supervisor dashboard"",""Create callable Cloud Function for secure, atomic batch approval""]","[""All acceptance criteria validated and passing"",""Integration testing between the client and the Cloud Function completed successfully using emulators"",""Performance requirements for the batch operation are verified"",""Security requirements, especially backend permission checks, are validated"",""Story deployed and verified in the staging environment""]"
"US-042","Supervisor Features","Supervisor bulk-rejects multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records and reject them all in a single action with a common reason, so that I can efficiently manage my team's attendance approvals and save time on repetitive administrative tasks.","Improves managerial efficiency by reducing the time and effort required to handle multiple similar attendance issues. Ensures consistent reasoning is applied to a batch of rejected records.","Should Have","5","[""US-037"",""US-040""]","[{""scenario"":""Supervisor selects multiple records, provides a reason, and successfully rejects them"",""given"":""a Supervisor is viewing their dashboard with a list of 'pending' attendance records"",""when"":""the Supervisor selects two or more records, clicks the 'Reject Selected' button, enters a valid reason into the confirmation modal, and confirms the action"",""then"":""the system atomically updates the status of all selected records to 'rejected', stores the reason in each record, and removes them from the pending list UI.""},{""scenario"":""Supervisor attempts to reject records without providing a reason"",""given"":""a Supervisor has selected multiple pending records and opened the rejection confirmation modal"",""when"":""the Supervisor attempts to confirm the rejection without entering any text in the mandatory reason field"",""then"":""the system prevents the action, and no records are updated in the database.""},{""scenario"":""One of the selected records is actioned by another process"",""given"":""a Supervisor has selected three pending records"",""when"":""before the Supervisor confirms the rejection, an Admin approves one of the three selected records, and the Supervisor then proceeds to confirm the bulk rejection"",""then"":""the system processes the rejection only for the remaining two 'pending' records and displays a notification to the Supervisor indicating a partial success.""}]","[""Implement multi-select UI with contextual 'Reject' action"",""Create callable Cloud Function for secure, atomic batch rejection""]","[""All acceptance criteria validated and passing"",""Integration testing with the Firebase Emulator completed successfully"",""User interface reviewed and approved by the Product Owner/UX designer"",""Security requirements validated, including Firestore rules and Cloud Function authorization"",""Story deployed and verified in the staging environment""]"
"US-043","Core Attendance Workflow","Subordinate views the reason for a rejected record","Subordinate","As a Subordinate, I want to see the specific reason my Supervisor provided when they rejected my attendance record, so that I can understand the issue and take appropriate action, such as submitting a correction request or being more careful in the future.","Increases transparency in the approval process, reduces confusion and follow-up questions to supervisors, and empowers employees to correct their own data, leading to improved data quality.","Must Have","1","[""US-040""]","[{""scenario"":""Display of rejection reason for a rejected record"",""given"":""I am a Subordinate logged into the mobile application and I have an attendance record that has been rejected by my Supervisor"",""when"":""I navigate to my attendance history and view the details of the rejected record"",""then"":""The record's status must be clearly displayed as 'Rejected' and a section must be visible showing the exact text my Supervisor entered as the reason for rejection.""},{""scenario"":""Visual distinction of rejected records in the list view"",""given"":""I am a Subordinate viewing my list of attendance records"",""when"":""The list contains records with 'Approved', 'Pending', and 'Rejected' statuses"",""then"":""The rejected records must be visually distinct from the others, for example, by using a red color indicator or an icon.""}]","[""Update attendance detail screen to display `rejectionReason` field"",""Update attendance list view to visually indicate 'rejected' status""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented with >= 80% coverage for new code"",""User interface reviewed and approved by the Product Owner/Designer"",""Accessibility requirements (screen reader, contrast) validated"",""Story deployed and verified in staging environment""]"
"US-044","Supervisor Features","Pending approval is escalated to the next-level supervisor","System","As an Admin, I want pending attendance approvals to automatically escalate to the next supervisor in the hierarchy after a configurable period, so that approval workflows are not blocked by unavailable or unresponsive managers and attendance records are processed in a timely manner.","Ensures business continuity by preventing bottlenecks in the approval workflow. Guarantees timely processing of attendance records, improving operational efficiency and reducing the need for manual intervention by Admins.","Could Have","5","[""US-071"",""US-037"",""US-051""]","[{""scenario"":""A pending record is escalated to the next available supervisor"",""given"":""a tenant has configured the 'approval escalation period' to 3 days, a Subordinate's record has been 'pending' for 4 days, and their Supervisor ('A') reports to 'Supervisor B'"",""when"":""the daily scheduled escalation Cloud Function is triggered"",""then"":""the record's `supervisorId` field is updated from 'Supervisor A's ID to 'Supervisor B's ID, an audit log is created, and the record appears in 'Supervisor B's' pending queue.""},{""scenario"":""The assigned supervisor is at the top of the hierarchy"",""given"":""a record is overdue and the assigned Supervisor has no supervisor of their own"",""when"":""the scheduled escalation function runs"",""then"":""the record's `supervisorId` remains unchanged, it is flagged with `escalation_failed_no_supervisor`, and a high-severity error is logged for administrative review.""},{""scenario"":""The next-level supervisor's account is deactivated"",""given"":""a record is overdue, Supervisor A reports to B, B reports to C, and B's account is deactivated"",""when"":""the scheduled escalation function runs"",""then"":""the system skips Supervisor B and successfully escalates the record directly to Supervisor C.""}]","[""Implement scheduled Cloud Function for escalation logic"",""Implement hierarchy traversal logic"",""Add UI indicator for escalated records in Supervisor dashboard""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function logic with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Performance requirements (indexed query) verified"",""Story deployed and verified in staging environment via a manual E2E test plan""]"
"US-045","Core Attendance Workflow","Subordinate requests a correction to an attendance record","Subordinate","As a Subordinate, I want to submit a request to correct the check-in or check-out time on my attendance record and provide a mandatory reason for the change, so that I can fix any mistakes I've made and ensure my work hours are accurately reflected for my supervisor's review.","Ensures data integrity by providing a formal, auditable workflow for correcting attendance errors. This enhances accountability and streamlines the process for both employees and supervisors.","Must Have","5","[""US-028"",""US-039"",""US-051""]","[{""scenario"":""Submitting a valid correction request"",""given"":""I am a logged-in Subordinate viewing my attendance history, and I have an 'approved' record"",""when"":""I enter a valid new time, provide a justification of at least 20 characters, and tap 'Submit Request'"",""then"":""The attendance record's status in Firestore is updated to 'correction_pending', the proposed changes are stored, and an audit log is created.""},{""scenario"":""Submitting a request with no justification"",""given"":""I am on the attendance correction form"",""when"":""I enter a new check-in time but leave the justification field blank and tap 'Submit Request'"",""then"":""The submission is blocked, and an error message 'Justification is required and must be at least 20 characters.' is displayed.""},{""scenario"":""Attempting to correct a record that is already pending correction"",""given"":""I am viewing my attendance history"",""when"":""I locate a record that already has a status of 'correction_pending'"",""then"":""The 'Request Correction' option for that specific record is disabled or hidden.""}]","[""Implement Correction Request Form for Subordinates"",""Update Firestore security rules to allow status change to 'correction_pending'"",""Implement logic to store proposed changes on the attendance record""]","[""All acceptance criteria validated and passing"",""Integration testing for Firestore writes and security rules completed successfully"",""Security requirements validated via emulator tests"",""Story deployed and verified in the staging environment""]"
"US-046","Supervisor Features","Supervisor reviews an attendance correction request","Supervisor","As a Supervisor, I want to view a clear, detailed summary of an attendance correction request, including the original times, the proposed new times, and the subordinate's justification, so that I can make an informed and fair decision to either approve or reject the change.","Enables informed and auditable decisions on attendance corrections, which maintains data integrity and supports accurate record-keeping.","Must Have","3","[""US-045"",""US-037""]","[{""scenario"":""Correction request detail view displays all required information"",""given"":""I am viewing the details of a correction request"",""when"":""the view loads"",""then"":""the following information must be clearly displayed: Subordinate's full name, date, original check-in/out times, requested new check-in/out times, and the full text of the justification.""},{""scenario"":""Proposed changes are visually highlighted in the detail view"",""given"":""I am viewing the details of a correction request where only the check-in time was changed"",""when"":""the view is displayed"",""then"":""the 'Requested New Check-In Time' field should be visually distinct (e.g., different color, bold font) from the original time.""},{""scenario"":""Detail view provides clear action buttons"",""given"":""I am viewing the details of a correction request"",""when"":""the view is displayed"",""then"":""there must be clearly labeled 'Approve' and 'Reject' buttons available.""}]","[""Implement Supervisor's Correction Review UI"",""Update Supervisor dashboard to list 'correction_pending' items"",""Implement robust Firestore security rules for data access""]","[""All acceptance criteria validated and passing"",""Integration testing against the Firebase Emulator completed successfully"",""Firestore Security Rules for this feature are written and tested"",""User interface reviewed and approved by the Product Owner/UX designer"",""Story deployed and verified in the staging environment""]"
"US-047","Supervisor Features","Supervisor approves an attendance correction request","Supervisor","As a Supervisor, I want to approve a subordinate's attendance correction request, so that I can ensure the accuracy of their attendance records and maintain a complete, auditable history of all changes.","Ensures data integrity and accuracy for attendance records. Provides a clear, auditable trail of all data modifications for compliance and dispute resolution.","Must Have","5","[""US-045"",""US-046"",""US-051""]","[{""scenario"":""Supervisor successfully approves a correction request"",""given"":""A Supervisor is viewing a pending attendance correction request from a direct subordinate"",""when"":""The Supervisor clicks the 'Approve' button for that specific request"",""then"":""The system executes an atomic transaction where the attendance record's status is updated to 'approved', the timestamps are updated with the corrected values, and a 'manually-corrected' flag is added.""},{""scenario"":""The approval action is logged correctly"",""given"":""A Supervisor is about to approve a correction request"",""when"":""The approval is successfully processed"",""then"":""A new document is created in the 'auditLog' collection with 'actionType': 'CorrectionApproved', actor, target, and a 'details' map containing 'oldValue', 'newValue', and 'justification'.""},{""scenario"":""Attempting to approve a stale or already processed request"",""given"":""A Supervisor is viewing a 'correction_pending' request that has already been actioned by an Admin"",""when"":""The Supervisor clicks the 'Approve' button"",""then"":""The backend function validates the record's current status, detects it is no longer 'correction_pending', and returns an informative error message.""}]","[""[Functions] Implement Atomic Correction Approval/Rejection"",""Integrate callable function with Supervisor's Review UI""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function, with >80% coverage"",""Integration testing completed successfully between the client and backend"",""Firestore Security Rules written, tested, and verified"",""Story deployed and verified in staging environment""]"
"US-048","Supervisor Features","Supervisor rejects an attendance correction request","Supervisor","As a Supervisor, I want to reject an invalid attendance correction request from my subordinate and provide a reason, so that I can maintain the accuracy of attendance records and ensure invalid changes are not applied.","Ensures the integrity and accuracy of attendance data by allowing supervisors to prevent incorrect or fraudulent modifications. It also provides a clear audit trail for managerial decisions.","Must Have","5","[""US-045"",""US-046"",""US-049"",""US-051""]","[{""scenario"":""Supervisor successfully rejects a correction request with a reason"",""given"":""I am a Supervisor viewing a record with a status of 'correction_pending'"",""when"":""I tap the 'Reject' button, enter a valid reason for rejection, and confirm the action"",""then"":""The attendance record's status reverts to its state before the correction was requested, an entry is created in the immutable audit log, and the subordinate is notified of the rejection.""},{""scenario"":""Supervisor attempts to reject a request without providing a reason"",""given"":""I am a Supervisor viewing the rejection confirmation dialog for a correction request"",""when"":""I attempt to confirm the rejection without entering any text in the mandatory reason field"",""then"":""The confirmation button is disabled or an error message is displayed, and the rejection action is not processed.""}]","[""[Functions] Implement Atomic Correction Approval/Rejection"",""Implement rejection reason modal in Supervisor's Review UI""]","[""All acceptance criteria validated and passing."",""Code for both the Flutter client and the Cloud Function has been peer-reviewed and merged."",""Integration tests confirming the end-to-end flow are passing in the emulator environment."",""The push notification content and delivery have been verified."",""Story deployed and successfully verified in the staging environment.""]"
"US-049","Core Attendance Workflow","Subordinate is notified of a correction request's outcome","Subordinate","As a Subordinate, I want to receive a push notification on my mobile device when my attendance correction request is either approved or rejected, so that I am immediately informed of the outcome without having to manually check the app.","Improves user experience by providing timely, proactive feedback. Closes the communication loop for the correction workflow, reducing user uncertainty and the need for manual follow-ups.","Should Have","5","[""US-045"",""US-047"",""US-048""]","[{""scenario"":""Notification for an approved correction request"",""given"":""a Subordinate has submitted an attendance correction request"",""when"":""their Supervisor approves the correction request"",""then"":""the Subordinate's device receives a push notification with the body 'Your attendance correction for [Date] has been approved.'""},{""scenario"":""Notification for a rejected correction request"",""given"":""a Subordinate has submitted an attendance correction request"",""when"":""their Supervisor rejects the correction request"",""then"":""the Subordinate's device receives a push notification with the body 'Your attendance correction for [Date] has been rejected.'""},{""scenario"":""Tapping notification deep-links into the app"",""given"":""the Subordinate has received a notification for a correction request outcome"",""when"":""the Subordinate taps on the notification"",""then"":""the mobile application opens and navigates directly to the details screen for the specific attendance record corresponding to the notification.""}]","[""Update Cloud Function for correction processing to send FCM notifications"",""Implement FCM SDK and deep linking logic in Flutter client""]","[""All acceptance criteria validated and passing on both iOS and Android."",""Cloud Function code is written in TypeScript, unit tested with Jest, and deployed."",""E2E tests confirming the entire flow from supervisor action to subordinate notification are passing."",""Story deployed and verified in the staging environment.""]"
"US-050","Admin Reporting & Integrations","Admin directly edits an attendance record with mandatory, auditable justification","Admin","As an Admin, I want to directly edit any employee's attendance record and provide a mandatory justification for the change, so that I can correct data inaccuracies or exceptions efficiently and maintain a fully auditable trail of all high-privilege modifications for compliance and accountability.","Ensures data accuracy for reporting and record-keeping. Provides a mechanism for authorized personnel to correct errors that fall outside the standard workflow, maintaining operational efficiency.","Must Have","5","[""US-059"",""US-051""]","[{""scenario"":""Admin successfully edits an attendance record"",""given"":""an Admin is logged into the web dashboard and is viewing an attendance report"",""when"":""the Admin clicks 'Edit' on a record, modifies the check-out time, provides a valid justification (20+ characters), and clicks 'Save'"",""then"":""the system updates the attendance record, adds a 'manually-corrected' flag, and creates an immutable audit log entry with the old value, new value, and justification.""},{""scenario"":""Admin attempts to save an edit without providing a justification"",""given"":""an Admin has opened the edit attendance modal and made a change"",""when"":""the Admin attempts to save the changes with the justification field empty"",""then"":""the save operation is prevented and a clear error message is displayed in the UI.""},{""scenario"":""Admin provides a justification that is too short"",""given"":""an Admin has opened the edit attendance modal and made a change"",""when"":""the Admin enters a justification shorter than the required 20 characters and attempts to save"",""then"":""the save operation is prevented and an error message is displayed indicating the minimum character requirement.""}]","[""Build edit attendance modal in Admin dashboard"",""Implement callable Cloud Function for secure, transactional, and audited record updates""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements validated, including Firestore rules and function authentication"",""Documentation for the Cloud Function's purpose and inputs is created"",""Story deployed and verified in the staging environment""]"
"US-051","Security & Compliance","Admin views the audit log of data changes","Admin","As an Admin, I want to view a filterable and immutable audit log of all critical system actions, so that I can ensure compliance, maintain accountability for data changes, and troubleshoot issues effectively.","Provides a trustworthy, unalterable record for internal/external audits, enhances accountability by tracking all critical data modifications, and aids in troubleshooting by showing a clear history of events.","Must Have","8","[""US-050"",""US-047"",""US-008"",""US-086""]","[{""scenario"":""Admin accesses the audit log report and views records"",""given"":""the Admin is logged in and is on the web dashboard"",""when"":""the Admin navigates to the 'Audit Log Report' section"",""then"":""the system displays a paginated list of audit log entries in reverse chronological order (newest first), showing Timestamp, Actor, and Action Type.""},{""scenario"":""Admin filters the audit log by date range"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin selects a start date and an end date and applies the filter"",""then"":""the list of entries updates to show only records with a timestamp within the selected date range.""},{""scenario"":""Admin views detailed information for a specific log entry"",""given"":""the Admin is viewing the list of audit log entries"",""when"":""the Admin clicks on a specific entry in the list"",""then"":""a modal or expanded view is displayed showing all details for that entry, including `targetEntityId`, `details` (with `oldValue` and `newValue`), and `justification` if present.""},{""scenario"":""Audit log is immutable from the UI"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin interacts with the list of entries or the detail view"",""then"":""there are no UI elements (e.g., 'Edit', 'Delete' buttons) that would allow modification or deletion of a log entry.""}]","[""Build Audit Log Report UI in Admin dashboard with filtering and pagination"",""Define and deploy Firestore composite indexes for audit log queries"",""Implement and test Firestore security rules to ensure immutability of the audit log""]","[""All acceptance criteria validated and passing"",""Integration testing of Firestore queries and security rules completed successfully"",""Firestore Security Rules for immutability and access control are implemented and tested"",""All necessary Firestore indexes are defined in IaC and deployed"",""Story deployed and verified in the staging environment""]"
"US-052","Event Management","Supervisor creates a new event","Supervisor","As a Supervisor, I want to create a new event with a title, description, start time, and end time, so that I can formally schedule and communicate activities like meetings, training sessions, or field visits to my team members.","Enables formal scheduling of team activities within the application, improving team coordination and providing context for attendance records.","Must Have","3","[""US-011"",""US-021""]","[{""scenario"":""Supervisor successfully creates a single, non-recurring event"",""given"":""I am a Supervisor logged into the application and have navigated to the 'Create Event' screen"",""when"":""I enter a valid title, description, and a valid start/end time range, and tap 'Save'"",""then"":""A new document is created in the `/tenants/{myTenantId}/events` collection in Firestore with the provided details.""},{""scenario"":""Attempting to save an event with a missing title"",""given"":""I am a Supervisor on the 'Create Event' screen"",""when"":""I leave the 'Title' field blank and tap the 'Save' button"",""then"":""A validation error message, such as 'Title is required', is displayed, and no data is sent to the server.""},{""scenario"":""A non-supervisor user cannot create an event"",""given"":""A user with the 'Subordinate' role is logged in"",""when"":""They attempt to access the event creation functionality"",""then"":""The UI for creating an event is not visible or accessible, and any direct API/database attempt must be rejected by Firestore Security Rules.""}]","[""Build 'Create Event' form UI in mobile app"",""Implement Firestore security rules to restrict event creation to Supervisors/Admins"",""Implement state management for the event form""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for event creation are written and tested"",""Integration testing against the Firebase Emulator completed successfully"",""Feature is manually verified on both iOS and Android physical devices or emulators"",""Story deployed and verified in the staging environment""]"
"US-053","Event Management","Supervisor creates a recurring event","Supervisor","As a Supervisor, I want to define recurrence rules (daily, weekly, monthly) when creating an event, so that I can efficiently schedule regular activities like team meetings or site visits without manual repetition.","Reduces administrative time spent on scheduling repetitive tasks, ensures consistency in team schedules, and minimizes the risk of human error in creating regular events.","Should Have","5","[""US-052""]","[{""scenario"":""Supervisor creates a daily recurring event"",""given"":""A Supervisor is on the 'Create Event' screen and has filled in all required event details"",""when"":""the Supervisor enables the 'Repeat' option, selects 'Daily', and sets an end date 10 days after the start date"",""then"":""the system creates 10 individual event instances, one for each day in the specified date range, all linked by a common recurrence ID.""},{""scenario"":""Supervisor creates a weekly recurring event for specific days"",""given"":""A Supervisor is on the 'Create Event' screen"",""when"":""the Supervisor enables 'Repeat', selects 'Weekly', checks 'Tuesday' and 'Thursday', and sets an end date four weeks away"",""then"":""the system creates exactly 8 event instances, one for each Tuesday and Thursday within the four-week period.""},{""scenario"":""Attempting to create a recurring event series longer than the allowed maximum"",""given"":""A Supervisor is creating a recurring event"",""when"":""they set an 'End Date' that is more than 1 year after the 'Start Date'"",""then"":""the system displays a validation error message 'Recurring events cannot span more than one year' and prevents saving.""}]","[""Extend 'Create Event' UI with recurrence rule controls"",""Implement a Cloud Function to process recurrence rules and generate event instances""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function's date logic implemented with >80% coverage"",""Integration testing of the end-to-end flow (UI -> Firestore -> Cloud Function -> Firestore) completed successfully"",""Story deployed and verified in the staging environment""]"
"US-054","Event Management","Supervisor assigns an event to specific individuals","Supervisor","As a Supervisor, I want to select one or more specific individuals from my team(s) when creating or editing an event, so that I can accurately assign tasks, training, or appointments to only the relevant team members.","Enables targeted task management and precise scheduling, improving operational efficiency and ensuring clear communication by reducing irrelevant notifications for team members.","Must Have","5","[""US-011"",""US-052""]","[{""scenario"":""Supervisor assigns a new event to multiple individuals"",""given"":""A Supervisor is on the 'Create Event' screen and has at least two direct subordinates"",""when"":""The Supervisor navigates to the user assignment section, selects two specific subordinates, and saves the event"",""then"":""A new event document is created in Firestore, and its 'assignedUserIds' array field contains the unique IDs of the two selected subordinates.""},{""scenario"":""Supervisor modifies assignments on an existing event"",""given"":""A Supervisor is editing an event that is already assigned to 'Subordinate A'"",""when"":""The Supervisor deselects 'Subordinate A', selects 'Subordinate B', and saves the changes"",""then"":""The event document in Firestore is updated, and the 'assignedUserIds' array now contains only the user ID of 'Subordinate B'.""},{""scenario"":""The list of assignable users is correctly scoped"",""given"":""A Supervisor is logged in and is on the user assignment screen for an event"",""when"":""The application fetches the list of users to display for assignment"",""then"":""The list must only contain users for whom the 'supervisorId' field matches the current Supervisor's user ID.""}]","[""Add multi-select user list to 'Create Event' UI"",""Update Firestore security rules to scope subordinate queries""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this feature are implemented and tested"",""E2E test: Supervisor assigns event, then the assigned Subordinate logs in and confirms the event is visible on their calendar"",""Story deployed and verified in the staging environment""]"
"US-055","Event Management","Supervisor assigns an event to an entire team","Supervisor","As a Supervisor, I want to assign an event to one or more of my teams in a single action, so that I can efficiently schedule activities for entire groups without having to select each team member individually.","Increases operational efficiency for managers by reducing manual data entry. Minimizes the risk of human error in event assignments.","Must Have","5","[""US-011"",""US-015"",""US-052"",""US-057"",""US-058""]","[{""scenario"":""Supervisor assigns a new event to a single team"",""given"":""a Supervisor is logged in and is on the 'Create Event' screen"",""when"":""the Supervisor selects one team they manage from the 'Assign to Teams' list and saves the event"",""then"":""a new event document is created in Firestore with the selected team's ID in the 'assignedTeamIds' array.""},{""scenario"":""Supervisor assigns an event to a team and an individual user"",""given"":""a Supervisor is creating an event and 'User Z' is not a member of 'Team A'"",""when"":""the Supervisor selects 'Team A' from the teams list and also selects 'User Z' from the individual user list"",""then"":""the event document contains the ID for 'Team A' in 'assignedTeamIds' and the ID for 'User Z' in 'assignedUserIds'.""},{""scenario"":""Supervisor only sees teams they manage"",""given"":""a Supervisor is logged in and another team ('Executive Team') exists which they do not manage"",""when"":""the Supervisor views the 'Assign to Teams' list on the event creation screen"",""then"":""the 'Executive Team' is not visible in the list of options.""}]","[""Add multi-select team list to 'Create Event' UI"",""Update Subordinate calendar view logic to resolve team assignments"",""Update push notification logic to fan-out to team members""]","[""All acceptance criteria validated and passing"",""Integration testing for Firestore rules and data flow completed successfully"",""End-to-end test scenario (Supervisor assigns, Subordinate views) is passing"",""Story deployed and verified in the staging environment""]"
"US-056","Event Management","Subordinate links attendance to an event","Subordinate","As a Subordinate, I want to select from a list of my assigned events for the day when I check in, so that my attendance record accurately reflects the specific activity I am starting to work on.","Enriches attendance data by adding context, enabling better reporting on time spent on specific tasks. This improves resource management and provides supervisors with greater visibility into team activities.","Should Have","5","[""US-028"",""US-052"",""US-054"",""US-057""]","[{""scenario"":""User with a single assigned event for the day links it during check-in"",""given"":""I am a logged-in Subordinate and I have exactly one event assigned to me for the current calendar day"",""when"":""I initiate the check-in process, select the assigned event, and confirm my check-in"",""then"":""a new attendance record is created in Firestore with the `eventId` of the selected event.""},{""scenario"":""User with assigned events chooses not to link any event"",""given"":""I am a logged-in Subordinate and I have one or more events assigned to me for the day"",""when"":""I initiate the check-in process and choose the option to proceed without selecting an event"",""then"":""a new attendance record is created with a null or absent `eventId` field.""},{""scenario"":""User with no assigned events for the day performs a check-in"",""given"":""I am a logged-in Subordinate and I have no events assigned to me for the current calendar day"",""when"":""I initiate the check-in process"",""then"":""the system bypasses the event selection step entirely and proceeds directly to the check-in confirmation.""}]","[""Modify Check-In workflow to include event selection step"",""Implement Firestore query to fetch user's events for the day"",""Update attendance data model to include `eventId`""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully for online and offline scenarios"",""Performance of the event query is verified to be within the defined limits"",""Firestore security rules updated and tested"",""Story deployed and verified in the staging environment""]"
"US-057","Event Management","Subordinate views their event calendar","Subordinate","As a Subordinate, I want to view a calendar that displays all events I am assigned to, either individually or as part of a team, so that I can clearly see my work schedule and plan my activities.","Improves operational efficiency by providing employees with clear, self-service access to their work schedules. Reduces administrative overhead for Supervisors and minimizes miscommunication.","Must Have","5","[""US-052"",""US-054"",""US-055"",""US-011""]","[{""scenario"":""Default calendar view shows events for the current month"",""given"":""the Subordinate is logged into the mobile application"",""when"":""they navigate to the 'Calendar' screen"",""then"":""a calendar is displayed in a month view by default, and days that contain one or more events are visually distinguished.""},{""scenario"":""Calendar displays both individually-assigned and team-assigned events"",""given"":""the Subordinate is assigned to an individual event and is a member of a team assigned to another event"",""when"":""they view their calendar"",""then"":""visual indicators for both events are present on their respective days.""},{""scenario"":""User views event details"",""given"":""the user is viewing the calendar and sees an event on a specific day"",""when"":""they tap on the event indicator or the day itself"",""then"":""a modal or list of events for that day is displayed, showing event details in a read-only format.""}]","[""Build calendar screen UI in Flutter"",""Implement complex Firestore query to fetch individual and team-based events"",""Integrate a third-party calendar UI library""]","[""All acceptance criteria validated and passing"",""Performance requirements (load times) verified on a physical test device"",""Firestore Security Rules for event data are written and tested"",""Story deployed and verified in the staging environment""]"
"US-058","Event Management","Subordinate receives a push notification for a new event","Subordinate","As a Subordinate, I want to receive a real-time push notification on my mobile device whenever a new event is assigned to me, so that I am immediately aware of changes to my schedule and can plan my work accordingly without having to manually check the app.","Improves timely communication of work assignments, reduces the likelihood of missed events, and increases user engagement by providing proactive updates.","Should Have","5","[""US-052"",""US-054"",""US-055"",""US-057""]","[{""scenario"":""Notification for direct event assignment"",""given"":""a Subordinate is logged into the mobile app and has granted notification permissions"",""when"":""a Supervisor creates a new event and assigns it directly to that Subordinate"",""then"":""the Subordinate's device receives a push notification containing the event title within 30 seconds.""},{""scenario"":""Notification for team-based event assignment"",""given"":""a Subordinate is an active member of a team and has granted notification permissions"",""when"":""a Supervisor creates a new event and assigns it to that team"",""then"":""the Subordinate's device receives a push notification containing the event title.""},{""scenario"":""Tapping notification opens the event calendar"",""given"":""the Subordinate has received a new event notification and the app is either in the background or closed"",""when"":""the Subordinate taps the notification"",""then"":""the application launches and navigates directly to the user's event calendar view.""}]","[""Implement Cloud Function with Firestore `onCreate` trigger for events"",""Implement FCM SDK and deep linking logic in Flutter client"",""Implement logic to store and manage user FCM tokens""]","[""All acceptance criteria validated and passing on both iOS and Android."",""Cloud Function code is peer-reviewed, merged, and deployed."",""Manual E2E tests confirm correct behavior for all scenarios."",""Story deployed and verified in the staging environment.""]"
"US-059","Admin Reporting & Integrations","Admin views summary attendance reports on the web dashboard","Admin","As an Admin, I want to view aggregated summary reports of attendance for daily, weekly, and monthly periods on my web dashboard, so that I can quickly assess workforce attendance trends, monitor overall presence, and make informed operational decisions without manually analyzing individual records.","Provides immediate, actionable insights into workforce attendance, enabling efficient monitoring, trend analysis, and proactive management. Reduces administrative overhead by eliminating the need for manual data compilation.","Must Have","8","[""US-021"",""US-028"",""US-069""]","[{""scenario"":""Viewing a specific daily summary report"",""given"":""I am viewing the reports page"",""when"":""I select the 'Daily Summary' view and choose a specific past date"",""then"":""the dashboard updates to show the total number of active users, the number of users who checked in, the number of absent users, and the attendance percentage for that selected date.""},{""scenario"":""Viewing a weekly summary report"",""given"":""I am viewing the reports page"",""when"":""I select the 'Weekly Summary' view and choose a specific week"",""then"":""the dashboard displays the average daily attendance percentage for that week and a trend chart visualizing the daily attendance percentage for each day of the selected week.""},{""scenario"":""Report for a period with no attendance data"",""given"":""I am viewing the reports page"",""when"":""I select a date range where no one checked in"",""then"":""the dashboard displays a clear message such as 'No attendance data available for the selected period' instead of showing zero values.""}]","[""Build reporting dashboard UI with tabs and data cards in Flutter Web"",""Implement server-side data aggregation strategy (e.g., scheduled Cloud Function)"",""Integrate a charting library for data visualization""]","[""All acceptance criteria validated and passing"",""Performance requirements verified against a large, seeded dataset"",""Security rules are in place and tested to ensure tenant data isolation"",""Story deployed and verified in the staging environment""]"
"US-060","Admin Reporting & Integrations","Admin filters attendance reports by multiple criteria","Admin","As an Admin, I want to apply filters for date range, user, team, and attendance status on the reporting dashboard, so that I can efficiently narrow down the data to find specific information, perform targeted analysis, and generate precise reports.","Enables efficient and targeted data analysis, saving time, improving decision-making, and supporting audit/compliance tasks by allowing Admins to isolate specific subsets of attendance data.","Must Have","5","[""US-059"",""US-011""]","[{""scenario"":""Filter by Date Range"",""given"":""the Admin is viewing an attendance report on the web dashboard"",""when"":""the Admin selects a start date and an end date using a date range picker"",""then"":""the report data refreshes to display only attendance records with a 'checkInTime' within the selected date range (inclusive).""},{""scenario"":""Filter by a single Team"",""given"":""the Admin is viewing an attendance report"",""when"":""the Admin selects a specific team from a multi-select dropdown"",""then"":""the report data refreshes to display attendance records for all users who are members of that selected team.""},{""scenario"":""Combine multiple filters (Date, Team, and Status)"",""given"":""the Admin is viewing an attendance report"",""when"":""the Admin selects a date range, a specific team, AND the 'rejected' status"",""then"":""the report data refreshes to display only records that match ALL applied criteria (logical AND).""}]","[""[Flutter Web] Build Comprehensive Report Filtering UI"",""[Firestore] Define and Deploy Composite Indexes for Reporting""]","[""All acceptance criteria validated and passing"",""All required Firestore composite indexes are defined in `firestore.indexes.json` and deployed"",""Performance requirements verified against a large, seeded dataset"",""UI reviewed for usability and adherence to design specifications"",""Story deployed and verified in the staging environment""]"
"US-061","Admin Reporting & Integrations","Admin views a late arrival / early departure report","Admin","As an Admin, I want to view a 'Late Arrival / Early Departure' report, so that I can efficiently monitor employee punctuality, identify attendance patterns, and enforce our organization's working hour policies.","Provides actionable insights into workforce punctuality, enabling data-driven management decisions, improving discipline, and supporting HR processes like performance reviews.","Should Have","5","[""US-072"",""US-069"",""US-060"",""US-064""]","[{""scenario"":""Correctly Identifying Late Arrivals"",""given"":""the tenant's working hours are set from 09:00 to 17:00 in the configured tenant timezone and a user has a check-in time of 09:15"",""when"":""I view the report for the corresponding date"",""then"":""the report must list this user's record as a late arrival with a deviation of '15 minutes late'.""},{""scenario"":""Correctly Identifying Early Departures"",""given"":""the tenant's working hours are set from 09:00 to 17:00 in the configured tenant timezone and a user has a check-out time of 16:30"",""when"":""I view the report for the corresponding date"",""then"":""the report must list this user's record as an early departure with a deviation of '30 minutes early'.""},{""scenario"":""No Working Hours Configured"",""given"":""I am an Admin and the default working hours have NOT been configured for my tenant"",""when"":""I navigate to the 'Late Arrival / Early Departure Report'"",""then"":""the system must display an informative message prompting me to configure working hours in the Tenant Settings, and the report table must not be rendered.""}]","[""Build Late/Early Report UI in Admin Dashboard"",""Implement backend logic (client-side or Cloud Function) for timezone-aware deviation calculations""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully in the emulator environment"",""Performance requirements verified against a representative test dataset"",""Story deployed and verified in the staging environment""]"
"US-062","Admin Reporting & Integrations","Admin views an exception report to identify and manage anomalous attendance records","Admin","As an Admin, I want to view a dedicated exception report so that I can efficiently identify, review, and address attendance records that deviate from the standard process, ensuring data accuracy and policy compliance.","Improves administrative efficiency by consolidating problematic records into a single view. Enhances data integrity by enabling proactive identification and correction of errors.","Should Have","5","[""US-031"",""US-032"",""US-033"",""US-050"",""US-059"",""US-060""]","[{""scenario"":""Viewing the exception report with all exception types"",""given"":""I am an Admin logged into the web dashboard"",""when"":""I navigate to the 'Reports' section and select the 'Exception Report'"",""then"":""the system displays a paginated list of all attendance records that have at least one of the following flags: 'isOfflineEntry', 'auto-checked-out', 'manually-corrected', or 'clock_discrepancy'.""},{""scenario"":""Each record in the report clearly indicates the exception type(s)"",""given"":""I am viewing the Exception Report"",""when"":""I look at a record with multiple flags"",""then"":""each row must display clear visual indicators (e.g., colored tags or icons) for every exception type associated with that record.""},{""scenario"":""Filtering the report by a single exception type"",""given"":""I am viewing the Exception Report"",""when"":""I use the filter control to select only 'Missed Check-out' (i.e., 'auto-checked-out' flag)"",""then"":""the report view updates to show only the attendance records that have the 'auto-checked-out' flag.""}]","[""Build Exception Report UI in Admin Dashboard"",""Implement Firestore query and composite index for filtering on the `flags` array field""]","[""All acceptance criteria validated and passing"",""E2E tests for filtering and viewing the report are passing"",""Required Firestore indexes are defined in `firestore.indexes.json` and deployed"",""Story deployed and verified in the staging environment""]"
"US-063","Admin Reporting & Integrations","Admin views and filters the audit log report","Admin","As an Admin, I want to access a detailed and filterable audit log report, so that I can review all critical system actions, ensure compliance, and investigate any changes made within my organization's tenant for security and accountability purposes.","Provides a tamper-proof record of critical activities for security audits, compliance verification (e.g., GDPR), accountability, and troubleshooting administrative actions.","Must Have","5","[""US-050"",""US-008""]","[{""scenario"":""Admin accesses the audit log report and views records"",""given"":""the Admin is logged in and is on the web dashboard"",""when"":""the Admin navigates to the 'Audit Log Report' section"",""then"":""the system displays a list of audit log entries in reverse chronological order (newest first) showing Timestamp, Actor, and Action Type.""},{""scenario"":""Admin filters the audit log by user (actor)"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin selects a user from a searchable dropdown list of tenant users and applies the filter"",""then"":""the list of entries updates to show only records where the selected user was the actor.""},{""scenario"":""Admin views detailed information for a specific log entry"",""given"":""the Admin is viewing the list of audit log entries"",""when"":""the Admin clicks on a specific entry in the list"",""then"":""a modal or expanded view is displayed showing all details for that entry, including `targetEntityId`, `details` (with `oldValue` and `newValue`), and `justification` if present.""}]","[""Build Audit Log Report UI with filtering and pagination"",""Define and deploy Firestore composite indexes for audit log queries"",""Implement Firestore security rules for immutability""]","[""All acceptance criteria validated and passing"",""Integration testing of Firestore queries and security rules completed successfully"",""Performance requirements (query speed) verified"",""Story deployed and verified in the staging environment""]"
"US-064","Admin Reporting & Integrations","Admin exports a report to CSV","Admin","As an Admin, I want to export the data from any report view on the web dashboard into a CSV file, so that I can perform offline analysis, share the data with stakeholders, or use it in other business tools.","Enables data portability for offline analysis, custom reporting, auditing, and integration with external business processes (e.g., payroll data preparation).","Should Have","5","[""US-059"",""US-060"",""US-061"",""US-062"",""US-063""]","[{""scenario"":""Exporting a filtered report"",""given"":""an Admin is logged in and viewing the 'Attendance Summary' report, filtered for 'Team Alpha' and the previous month"",""when"":""the Admin clicks the 'Export to CSV' button"",""then"":""a file download is initiated by the browser with a filename like 'attendance_summary_2025-01.csv', and the data rows in the CSV correspond exactly to the filtered data.""},{""scenario"":""Exporting a report with no data"",""given"":""an Admin is viewing a report with filters applied that result in zero records"",""when"":""the Admin clicks the 'Export to CSV' button"",""then"":""a CSV file is downloaded containing only the header row and no data rows.""},{""scenario"":""CSV file correctly handles special characters"",""given"":""a report contains data with commas, quotes, and other special characters"",""when"":""the Admin exports the report to CSV"",""then"":""the downloaded CSV file is correctly formatted, with fields containing special characters properly enclosed in quotes, and opens without data corruption.""}]","[""Create a reusable client-side CSV export component/service in Flutter Web"",""Integrate the export button into all report pages""]","[""All acceptance criteria validated and passing"",""Manual testing confirms correct functionality and file integrity on all target browsers"",""Performance requirements verified for moderately sized reports"",""Story deployed and verified in staging environment""]"
"US-065","Admin Reporting & Integrations","Admin configures automatic data export to Google Sheets","Admin","As an Admin, I want to configure a secure, automated, and scheduled export of approved attendance data to a Google Sheet, so that I can streamline our reporting process, perform custom analysis, and make the data easily accessible for other business functions.","Automates the data export process, reducing manual effort and potential for human error. Enables seamless integration with external business workflows (e.g., payroll, advanced analytics).","Should Have","13","[""US-021"",""US-039"",""US-066""]","[{""scenario"":""Admin successfully configures a new daily export"",""given"":""The Admin is on the 'Integrations' settings page."",""when"":""The Admin clicks 'Connect to Google Sheets', completes the Google OAuth flow, provides a name for a new Google Sheet, selects a 'Daily' export schedule, and saves the configuration."",""then"":""A new Google Sheet is created in the Admin's Drive, and the UI updates to show 'Active' status.""},{""scenario"":""Scheduled export function runs successfully"",""given"":""The Google Sheets export is configured and active, and there are new 'approved' attendance records."",""when"":""The scheduled Cloud Function for data export is triggered."",""then"":""The new 'approved' records are appended as new rows to the linked Google Sheet, and the 'Last Sync' timestamp is updated.""},{""scenario"":""Export fails because the target Google Sheet was deleted"",""given"":""The Google Sheets export is active, but the Admin has manually deleted the target Sheet."",""when"":""The next scheduled export function runs."",""then"":""The function fails, the integration's status is updated to 'Error', and the Admin dashboard displays a prominent alert.""}]","[""[Functions] Implement Google Sheets Automated Export"",""Implement logic to track `lastExportedTimestamp`"",""Build the setup UI in the Admin Dashboard""]","[""All acceptance criteria validated and passing in a staging environment."",""Successful end-to-end integration test has been performed."",""Security review of the OAuth token handling process is complete and approved."",""Story is deployed and verified in the staging environment.""]"
"US-066","Admin Reporting & Integrations","Admin authorizes Google Drive/Sheets access via OAuth 2.0","Admin","As an Admin, I want to initiate a secure OAuth 2.0 flow to authorize the application to access my Google Drive and Sheets, so that I can enable the automated export of attendance data to a designated Google Sheet without compromising my account credentials.","Enables the core functionality of automated data export (US-065) by establishing a secure, user-consented connection to Google services.","Should Have","5","[""US-065"",""US-059""]","[{""scenario"":""Successful Authorization Flow"",""given"":""The Admin is on the 'Data Export' configuration page where the Google Sheets integration is 'Not Connected'."",""when"":""The Admin clicks the 'Connect to Google Sheets' button, is redirected to Google, authenticates, and grants the requested permissions."",""then"":""The Admin is redirected back to the app, the UI updates to show 'Connected' status, and a refresh token is securely stored in the backend.""},{""scenario"":""User Denies Permission"",""given"":""The Admin is on the Google OAuth consent screen."",""when"":""The Admin clicks 'Deny' or closes the window without granting permission."",""then"":""The Admin is redirected back to the app, an informational message is displayed, and the connection status remains 'Not Connected'.""},{""scenario"":""Secure Token Exchange"",""given"":""The Admin has granted permission and been redirected back to the application with an authorization code."",""when"":""The client sends the authorization code to a secure backend Cloud Function."",""then"":""The Cloud Function successfully exchanges the code for a refresh token and securely stores it, never exposing the client secret to the frontend.""}]","[""Configure GCP OAuth 2.0 Client ID with correct redirect URIs"",""Implement Cloud Function to handle server-side token exchange"",""Build OAuth flow UI in Flutter Web""]","[""All acceptance criteria validated and passing"",""Integration testing of the full OAuth flow completed successfully"",""Security requirements validated, including secure storage of secrets and tokens"",""Story deployed and verified in the staging environment using a test Google account""]"
"US-067","Admin Reporting & Integrations","Admin is alerted to a Google Sheets sync failure","Admin","As an Admin who has configured the automatic data export to Google Sheets, I want to be proactively notified with a prominent, persistent alert on my web dashboard whenever the sync process fails, so that I can immediately investigate the cause and take corrective action.","Prevents silent data integration failures, ensuring the integrity and timeliness of external reports. This builds trust in the system's automation and allows for rapid resolution of issues.","Should Have","5","[""US-065"",""US-066"",""US-068""]","[{""scenario"":""Alert is displayed when sync fails due to revoked permissions"",""given"":""An Admin has successfully configured the Google Sheets export"",""when"":""The scheduled export fails because the app's OAuth permissions have been revoked by the user in their Google account"",""then"":""The Cloud Function updates the integration status to 'error' with reason 'permission_revoked', and the Admin dashboard displays a prominent alert banner.""},{""scenario"":""Alert is displayed when the target Google Sheet is not found"",""given"":""An Admin has successfully configured the Google Sheets export"",""when"":""The scheduled export fails because the target Google Sheet has been deleted"",""then"":""The Cloud Function updates the integration status to 'error' with reason 'sheet_not_found', and the Admin dashboard displays a prominent alert.""},{""scenario"":""Alert persists across sessions until the issue is resolved"",""given"":""A sync failure has occurred and the alert banner is visible"",""when"":""The Admin logs out and logs back in"",""then"":""The alert banner must be visible again, as the underlying error state has not been resolved.""}]","[""Update export Cloud Function with robust error handling to update Firestore status"",""Build a conditional, persistent alert banner component in the Admin dashboard""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Accessibility of the alert component verified using automated tools and manual checks"",""Story deployed and verified in the staging environment via a full E2E test case""]"
"US-068","Admin Reporting & Integrations","Admin re-authorizes Google Sheets sync after a failure","Admin","As an Admin, I want to be prompted with clear actions to re-authenticate or link a new Google Sheet when the data sync fails, so that I can quickly restore the automated reporting feature and ensure no data is permanently lost.","Ensures the reliability and continuity of the automated reporting feature. Prevents data gaps in external reports and reduces administrative overhead by providing a self-service recovery path.","Should Have","5","[""US-065"",""US-066"",""US-067""]","[{""scenario"":""Admin successfully re-authenticates after a token revocation failure"",""given"":""the Google Sheets sync status is 'error' with a reason of 'AUTH_ERROR'"",""when"":""the Admin clicks the 'Re-authenticate' button and successfully completes the Google OAuth 2.0 flow"",""then"":""the system securely updates the stored OAuth refresh token, the sync status is updated to 'active', and the error alert is removed.""},{""scenario"":""Admin successfully links a new sheet after the original was deleted"",""given"":""the Google Sheets sync status is 'error' with a reason of 'SHEET_NOT_FOUND'"",""when"":""the Admin clicks the 'Link New Sheet' button and provides a valid URL for a new Google Sheet"",""then"":""the system updates the stored target `sheetId`, validates write access, updates the sync status to 'active', and the error alert is removed.""},{""scenario"":""System triggers a catch-up sync after successful recovery"",""given"":""the Google Sheets sync has been restored and there are attendance records that previously failed to sync"",""when"":""the next scheduled sync job runs"",""then"":""the system exports all previously failed records to the Google Sheet without creating duplicates.""}]","[""Build UI for re-authentication and re-linking in Admin dashboard"",""Update Cloud Function to handle new token/sheet ID submissions"",""Implement catch-up sync logic in export function""]","[""All acceptance criteria validated and passing"",""Integration testing for the full recovery flow (failure -> prompt -> action -> success) completed successfully"",""Security requirements, especially OAuth token handling, validated"",""Story deployed and verified in the staging environment""]"
"US-069","System Configuration & Settings","Admin configures the organization's timezone","Admin","As an Admin, I want to select and save a default timezone for my entire organization so that all time-based calculations, business rules, and reports are consistent and accurate for all users, regardless of their individual locations.","Ensures data integrity and consistency for all time-related data and operations. This is critical for accurate reporting, correct application of business rules, and event scheduling.","Must Have","2","[""US-001"",""US-021""]","[{""scenario"":""Admin successfully sets the organization's timezone"",""given"":""I am an Admin on the 'Tenant Settings' page"",""when"":""I select a timezone (e.g., 'America/New_York') from the searchable dropdown list and click 'Save'"",""then"":""the tenant's configuration document in Firestore is updated with the value 'America/New_York', and a success notification is displayed.""},{""scenario"":""Non-Admin user attempts to access timezone settings"",""given"":""A user with a 'Supervisor' or 'Subordinate' role is logged in"",""when"":""They attempt to navigate to the 'Tenant Settings' page"",""then"":""They are either redirected away from the page or see a 'Permission Denied' error.""}]","[""Build timezone selection UI in Admin dashboard 'Tenant Settings' page"",""Update Firestore security rules to protect the configuration document""]","[""All acceptance criteria validated and passing"",""Firestore security rules written and tested to protect the configuration document"",""Integration testing completed to verify a dependent feature uses the timezone correctly"",""Story deployed and verified in the staging environment""]"
"US-070","System Configuration & Settings","Admin configures the auto-checkout time","Admin","As an Admin, I want to configure a specific time of day for automatic check-outs, so that I can ensure all employee attendance records are closed for the day, which improves data accuracy and reduces my manual correction workload.","Improves data integrity by preventing open-ended attendance records. Reduces administrative overhead by automating the correction of forgotten check-outs.","Should Have","2","[""US-069"",""US-021""]","[{""scenario"":""Admin enables and sets the auto-checkout time"",""given"":""I am an Admin on the 'Tenant Settings' page"",""when"":""I enable the 'Automatic Check-out' feature, select '17:30' in the time picker, and click 'Save'"",""then"":""I see a success message and the configuration is saved to the tenant's Firestore document.""},{""scenario"":""Admin disables the auto-checkout feature"",""given"":""I am an Admin on the 'Tenant Settings' page where 'Automatic Check-out' is enabled"",""when"":""I disable the feature using the toggle switch and click 'Save'"",""then"":""I see a success message and the time picker component becomes disabled or hidden.""}]","[""Build auto-checkout configuration UI in Admin dashboard"",""Update Firestore security rules for the configuration document""]","[""All acceptance criteria validated and passing"",""Integration testing with the Firebase Emulator completed successfully"",""Firestore security rules are implemented and tested to restrict access to Admins"",""Story deployed and verified in the staging environment""]"
"US-071","System Configuration & Settings","Admin configures the approval escalation period","Admin","As an Admin, I want to configure the approval escalation period in days, so that pending attendance records are automatically escalated to the next-level supervisor if they are not actioned in a timely manner, ensuring no approvals are missed.","Improves operational efficiency by preventing bottlenecks in the attendance approval workflow. Enforces managerial accountability and ensures timely processing of all attendance records.","Could Have","1","[""US-021""]","[{""scenario"":""Admin successfully sets a valid escalation period"",""given"":""The Admin is on the 'Tenant Settings' page"",""when"":""The Admin enters a positive integer (e.g., '3') into the 'Approval Escalation Period' input field and clicks 'Save'"",""then"":""The system displays a success notification and the value '3' is persisted in the tenant's configuration document in Firestore.""},{""scenario"":""Admin attempts to save a value less than one"",""given"":""The Admin is on the 'Tenant Settings' page"",""when"":""The Admin enters '0' or a negative number into the field and attempts to save"",""then"":""The system prevents the save and displays an inline validation error message, such as 'Value must be 1 or greater.'""}]","[""Add numeric input field for 'Approval Escalation Period' to 'Tenant Settings' UI"",""Update Firestore document and security rules""]","[""All acceptance criteria validated and passing"",""Integration testing for the save functionality and security rules completed successfully"",""User interface reviewed and approved for usability and accessibility"",""Story deployed and verified in the staging environment""]"
"US-072","System Configuration & Settings","Admin configures default working hours for reporting","Admin","As an Admin, I want to define default working hours and the applicable days of the week for my organization, so that the system can automatically generate reports on late arrivals and early departures.","Enables automated exception reporting (lateness, early departure), saving administrative time and providing key insights into workforce punctuality.","Should Have","2","[""US-069"",""US-021""]","[{""scenario"":""Admin successfully sets working hours"",""given"":""the Admin is on the 'Tenant Settings' page"",""when"":""the Admin enters '09:00' for start time, '17:30' for end time, selects Monday through Friday, and clicks 'Save'"",""then"":""a success notification is displayed, and the configuration is saved to the tenant's Firestore document.""},{""scenario"":""Admin attempts to save with end time before start time"",""given"":""the Admin is on the 'Tenant Settings' page"",""when"":""the Admin sets start time to '17:00' and end time to '09:00' and clicks 'Save'"",""then"":""a validation error message, 'End time must be after start time', is displayed, and the data is not saved.""}]","[""Build working hours configuration UI in Admin dashboard"",""Implement client-side validation for time logic""]","[""All acceptance criteria validated and passing"",""Integration testing against the Firebase Emulator completed successfully"",""User interface reviewed and approved for usability and accessibility"",""Story deployed and verified in the staging environment""]"
"US-073","System Configuration & Settings","Admin configures the tenant's password policy","Admin","As an Admin, I want to configure and enforce a custom password policy for my organization, including minimum length and character type requirements, so that I can enhance account security and ensure compliance with my company's IT policies.","Provides organizations with direct control over their security posture, enabling them to enforce internal IT policies and meet external compliance requirements.","Should Have","8","[""US-021"",""US-069""]","[{""scenario"":""Admin successfully saves a new password policy"",""given"":""the Admin is on the 'Password Policy' settings page"",""when"":""the Admin changes the minimum length to '12' and requires uppercase, lowercase, number, and special characters, and clicks 'Save'"",""then"":""a success notification is displayed, and the new policy is written to the tenant's configuration document in Firestore.""},{""scenario"":""New user registration enforces the custom password policy"",""given"":""the Admin has set a policy requiring a minimum of 10 characters and at least one number, and a new user is registering"",""when"":""the user enters a compliant password like 'Password123!'"",""then"":""the password is accepted, and the user's account is successfully created.""},{""scenario"":""New user registration is blocked by a non-compliant password"",""given"":""the Admin has set a policy requiring a minimum of 10 characters and at least one number, and a new user is registering"",""when"":""the user enters a non-compliant password like 'Password!'"",""then"":""a clear validation error message is displayed, and the account creation is blocked.""}]","[""Build password policy configuration UI in Admin dashboard"",""Implement Firebase Auth Blocking function for server-side policy enforcement"",""Update client-side validation to fetch and apply tenant policy""]","[""All acceptance criteria validated and passing"",""Integration testing completed for the Admin UI -> Firestore -> Auth Function flow"",""Security requirements validated, including server-side enforcement"",""Story deployed and verified in the staging environment""]"
"US-074","Security & Compliance","Admin configures data retention periods for attendance and audit logs","Admin","As an Admin, I want to configure specific retention periods for attendance records and audit logs, so that I can ensure my organization complies with internal data governance policies and external regulations like GDPR, while also managing long-term storage costs.","Enables compliance with data protection regulations, enforces internal data governance policies, reduces long-term data storage costs, and minimizes security risks associated with retaining old data.","Could Have","5","[""US-001"",""US-021""]","[{""scenario"":""Admin successfully updates and saves a retention period"",""given"":""the Admin is viewing the 'Data Retention' settings page"",""when"":""the Admin changes the retention period for 'Attendance Records' from '2' to '3' years and clicks 'Save Changes'"",""then"":""the system displays a success notification and updates the configuration in Firestore.""},{""scenario"":""Admin attempts to save an invalid (non-positive) retention period"",""given"":""the Admin is viewing the 'Data Retention' settings page"",""when"":""the Admin enters '-1' or '0' into a retention period input field and clicks 'Save Changes'"",""then"":""a validation error message is displayed and the save operation is prevented.""}]","[""Build data retention settings UI in Admin dashboard"",""Implement scheduled Cloud Function to process data based on retention settings""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements validated (Firestore rules tested)"",""Story deployed and verified in the staging environment""]"
"US-075","Usability & Accessibility","User views a map of their check-in/check-out location","User","As a User (Subordinate, Supervisor, or Admin), I want to view the captured GPS coordinates for a check-in and check-out action as pins on an interactive map so that I can visually confirm the accuracy of the location data and have confidence in my attendance records.","Increases user trust and data transparency by providing intuitive, visual confirmation of captured locations. Reduces potential disputes and the need for attendance corrections.","Should Have","5","[""US-028"",""US-029""]","[{""scenario"":""Display map with both check-in and check-out locations"",""given"":""a user is viewing the details of an attendance record that has valid GPS coordinates for both check-in and check-out"",""when"":""the attendance detail screen loads"",""then"":""a map component is displayed, showing two distinct, clearly labeled pins for the check-in and check-out locations.""},{""scenario"":""User interacts with a location pin"",""given"":""a map is displayed with one or more location pins"",""when"":""the user taps on a pin"",""then"":""an info window appears above the pin, displaying the action type ('Check-In' or 'Check-Out') and the corresponding timestamp.""},{""scenario"":""Device is offline when viewing the map"",""given"":""the user's device has no active internet connection"",""when"":""the user navigates to an attendance detail screen with valid GPS data"",""then"":""the map area displays a placeholder with a message like 'Map cannot be loaded. Please check your internet connection.'""}]","[""[Flutter] Integrate Google Maps for Location Visualization"",""Securely configure Google Maps API keys for Android and iOS""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully on both Android and iOS physical devices"",""Security review of API key handling completed"",""Story deployed and verified in the staging environment""]"
"US-076","Usability & Accessibility","User is prompted to grant location permissions before using location-based features","First-time user","As a first-time user of the mobile application, I want to be prompted to grant location permissions when I first attempt to use a location-based feature, so that I understand why my location is needed and can explicitly consent to its use.","Ensures compliance with platform policies and data privacy regulations. Builds user trust through transparency and enables the core GPS-based attendance functionality.","Must Have","3","[""US-021""]","[{""scenario"":""User grants 'While Using the App' permission on first attempt"",""given"":""A user has logged into the application for the first time"",""when"":""The user taps a UI element that requires location data (e.g., the 'Check-In' button)"",""then"":""The native OS location permission dialog is displayed, and upon granting permission, the action proceeds.""},{""scenario"":""User denies location permission"",""given"":""The native OS location permission dialog is displayed"",""when"":""The user selects the 'Deny' option"",""then"":""The dialog is dismissed, the location-dependent action is blocked, and an in-app message is displayed explaining why the feature cannot be used.""}]","[""Integrate `permission_handler` package"",""Configure native project files (Info.plist, AndroidManifest.xml) with usage descriptions"",""Implement contextual permission request logic""]","[""All acceptance criteria validated and passing on target iOS and Android versions."",""E2E integration tests for all major permission flows are implemented and passing."",""Story successfully tested and verified on physical devices for both platforms."",""Story deployed and verified in the staging environment.""]"
"US-077","Usability & Accessibility","Guide user to device settings when location permission is denied","Mobile app user","As a mobile app user, I want to be shown a helpful message with a direct link to my device's app settings if I have previously denied location permissions, so that I can easily enable them and use the core attendance features without frustration.","Improves usability and user retention by providing a clear, low-friction recovery path for a common error. Reduces user frustration and support requests.","Must Have","3","[""US-076"",""US-028""]","[{""scenario"":""User attempts a location-based action with permissions permanently denied"",""given"":""The user has previously denied location permissions for the app"",""when"":""The user taps a button that requires location services, such as 'Check-In'"",""then"":""A modal dialog is displayed, explaining why location is required and presenting a primary action 'Open Settings' and a secondary action 'Cancel'.""},{""scenario"":""User is successfully navigated to the OS app settings screen"",""given"":""The permission guidance dialog is displayed"",""when"":""The user taps the 'Open Settings' button"",""then"":""The application deep-links the user directly to the app's specific settings page within the device's operating system.""}]","[""Update permission handling logic to detect 'permanently denied' state"",""Build guidance dialog UI"",""Implement platform-specific deep-linking to OS settings""]","[""All acceptance criteria validated and passing on supported iOS and Android versions."",""Manual end-to-end testing completed successfully on physical devices."",""No regressions introduced to the initial permission request flow (US-076)."",""Story deployed and verified in the staging environment.""]"
"US-078","Usability & Accessibility","User interacts with an accessible application compliant with WCAG 2.1 AA standards","User with a disability","As a user with a disability (such as visual or motor impairment), I want the application to adhere to established accessibility standards, including screen reader compatibility, sufficient color contrast, and clear navigation, so that I can independently and effectively use all of its features.","Ensures the application is inclusive and usable by the widest possible audience, mitigates legal risk by complying with accessibility legislation (e.g., ADA), and improves overall application usability.","Must Have","13","[]","[{""scenario"":""Screen Reader Compatibility for Interactive Elements"",""given"":""A user has a screen reader (e.g., VoiceOver on iOS, TalkBack on Android) enabled"",""when"":""The user navigates to any interactive element (button, text field, toggle, link) on any screen"",""then"":""The screen reader clearly announces the element's name, role, and state (e.g., 'Check-In, button').""},{""scenario"":""Sufficient Color Contrast for Readability"",""given"":""A user is viewing any screen in the application"",""when"":""Text or a meaningful icon is displayed against a background"",""then"":""The contrast ratio meets or exceeds WCAG 2.1 AA standards: 4.5:1 for normal text and 3:1 for large text.""},{""scenario"":""Adequate Touch Target Size for All Controls"",""given"":""A user is interacting with any screen containing tappable elements"",""when"":""The user attempts to tap a button, icon, or other control"",""then"":""The interactive area for the control is at least 44x44 pixels (dp/pt).""}]","[""Audit all existing UI components for accessibility compliance"",""Add semantic labels to all interactive widgets"",""Adjust color palettes to meet contrast ratio requirements"",""Increase touch target sizes where necessary""]","[""All acceptance criteria are met and have been manually verified on both iOS and Android."",""An accessibility checklist based on WCAG 2.1 AA has been applied to all existing screens."",""The global 'Definition of Done' for all future UI stories is updated to include passing the accessibility checklist."",""The application is verified as accessible in the staging environment.""]"
"US-079","Usability & Accessibility","User adjusts the application's text size based on device settings","User","As a user, particularly one with visual impairments, I want the application's text to scale according to my device's system-wide font size settings so that I can adjust the text to a comfortable size for me, ensuring I can read and interact with the application effectively.","Improves application accessibility and usability, ensuring compliance with WCAG 2.1 standards (specifically 1.4.4 Resize text). This broadens the user base and enhances user satisfaction.","Should Have","5","[""US-021""]","[{""scenario"":""Text scales up when device font size is increased"",""given"":""The user has the application open"",""when"":""the user navigates to their device's system settings and increases the font size"",""then"":""all text within the application renders at the new, larger size, and the UI layout reflows gracefully without horizontal scrolling or truncation.""},{""scenario"":""Layout remains usable at maximum accessibility font size"",""given"":""The user has the application open"",""when"":""the user sets their device's font size to the maximum accessibility setting available"",""then"":""no text overlaps with other text or UI elements, and all interactive elements remain visible and tappable.""}]","[""Audit and refactor all UI layouts to use responsive widgets (Flexible, Expanded, Wrap)"",""Ensure all text widgets respect `MediaQuery.textScaleFactor`"",""Manually test all screens at various font size settings""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Manual end-to-end testing completed for all primary user flows at minimum, default, and maximum font sizes"",""Accessibility requirements (WCAG 1.4.4) verified"",""Story deployed and verified in the staging environment""]"
"US-080","Security & Compliance","User enables multi-factor authentication for enhanced account security","Security-conscious user","As a security-conscious user (Admin, Supervisor, or Subordinate), I want to enable multi-factor authentication (MFA) by verifying my phone number, so that I can add an extra layer of security to my account and prevent unauthorized access.","Increases the security of user accounts and protects sensitive organizational data from unauthorized access, thereby reducing the risk of data breaches and enhancing customer trust.","Could Have","8","[""US-017"",""US-021""]","[{""scenario"":""User successfully enables MFA with a valid phone number and OTP"",""given"":""I am on the security settings screen and MFA is currently disabled"",""when"":""I tap 'Enable MFA', enter a valid phone number, receive an OTP via SMS, and enter the correct OTP"",""then"":""I see a success message, and the security screen updates to show that MFA is 'Enabled', displaying a masked version of my phone number.""},{""scenario"":""MFA is enforced during a subsequent login attempt"",""given"":""I have successfully enabled MFA on my account and logged out"",""when"":""I enter my correct email and password on the login screen"",""then"":""I am redirected to a new screen prompting me to enter a verification code sent to my registered phone number.""},{""scenario"":""User successfully logs in using the second factor (OTP)"",""given"":""I have been prompted for an OTP after entering my password"",""when"":""I enter the correct OTP received via SMS"",""then"":""I am successfully authenticated and redirected to my role-specific dashboard.""}]","[""Configure Firebase Authentication for second-factor phone auth"",""Build multi-step MFA setup UI in user profile settings"",""Update login flow to handle MFA challenge""]","[""All acceptance criteria validated and passing"",""Integration testing against the Firebase Emulator completed successfully"",""Security requirements, including rate-limiting and anti-abuse, are validated"",""E2E test successfully completed on a physical device in the staging environment""]"
"US-081","System Configuration & Settings","Admin is notified of planned maintenance","Admin","As an Admin, I want to receive clear, timely notifications about planned system maintenance, so that I can proactively inform my users, manage expectations, and minimize disruption to my organization's operations.","Improves customer trust and satisfaction by providing proactive communication. Reduces operational disruption for tenants and minimizes support inquiries during maintenance periods.","Could Have","5","[""US-001"",""US-021""]","[{""scenario"":""Admin receives an email notification for upcoming maintenance"",""given"":""a maintenance window is scheduled by a system operator at least 48 hours in the future"",""when"":""The system's notification process runs"",""then"":""The Admin receives an email containing the maintenance start time, end time (including timezone), and a clear description of the expected service impact.""},{""scenario"":""Admin sees an in-app banner notification in the web dashboard"",""given"":""An Admin is logged into the web dashboard and a maintenance window is scheduled to occur within the next 7 days"",""when"":""The Admin loads or navigates within the dashboard"",""then"":""A persistent, non-dismissible banner is displayed at the top of the screen communicating the maintenance schedule.""},{""scenario"":""User attempts to access the system during an active maintenance window"",""given"":""A system-wide maintenance window is currently in effect"",""when"":""Any user attempts to log in or access the application"",""then"":""They are presented with a user-friendly maintenance page indicating the system is temporarily unavailable and displaying the expected completion time.""}]","[""Create data model and internal process for scheduling maintenance windows"",""Implement scheduled Cloud Function to send email notifications"",""Build persistent banner component in Admin dashboard"",""Implement middleware/interceptor to show maintenance page""]","[""All acceptance criteria validated and passing"",""Integration testing between Cloud Function, Firestore, and SendGrid completed successfully"",""E2E tests for the full notification and maintenance page flow are passing"",""Story deployed and verified in the staging environment""]"
"US-082","Tenant & User Lifecycle Management","Admin downloads a CSV template for data migration","Admin","As an Admin setting up my organization, I want to download a predefined CSV template for user and team data, so that I can correctly format my existing data for a successful bulk import, minimizing errors and setup time.","Streamlines the tenant onboarding process by providing a clear, error-reducing template for data migration. Enhances user experience for new customers and reduces support load.","Should Have","1","[""US-001"",""US-021""]","[{""scenario"":""Admin successfully downloads the CSV template"",""given"":""I am an Admin logged into the web dashboard and have navigated to the 'User Management > Data Import' section"",""when"":""I click the 'Download CSV Template' button"",""then"":""my browser initiates a download of a file named 'user_team_import_template.csv'.""},{""scenario"":""Downloaded template has the correct headers"",""given"":""I have successfully downloaded the 'user_team_import_template.csv' file"",""when"":""I open the file"",""then"":""the first row must contain the exact headers: 'email', 'firstName', 'lastName', 'role', 'supervisorEmail', 'teamName'.""}]","[""Host static CSV template file in Firebase Storage or as a web asset"",""Add a download button/link to the Admin web dashboard""]","[""All acceptance criteria validated and passing"",""User interface reviewed and approved by the Product Owner"",""Security requirement (Admin-only access) validated"",""Story deployed and verified in staging environment""]"
"US-083","Tenant & User Lifecycle Management","Admin uploads a CSV file to bulk-create users and teams","Admin","As an Admin, I want to upload a CSV file containing user and team information, so that I can efficiently bulk-create user accounts, define team structures, and automatically send out registration invitations, saving significant time during initial setup.","Reduces manual effort and potential for error when onboarding multiple users, improving administrative efficiency and making the platform scalable for larger organizations.","Should Have","8","[""US-082"",""US-004"",""US-011"",""US-016""]","[{""scenario"":""Successful bulk import of new users and new teams"",""given"":""The Admin uploads a correctly formatted CSV file containing new users and teams"",""when"":""The import process runs"",""then"":""The system initiates an asynchronous background job, new user and team documents are created correctly in Firestore, and invitation emails are sent to the new users.""},{""scenario"":""Processing a CSV with some invalid data rows"",""given"":""The Admin uploads a CSV file containing a mix of valid rows and rows with errors"",""when"":""The import process runs"",""then"":""The system successfully processes all valid rows, and the final summary report clearly lists which rows failed with specific reasons for each failure.""},{""scenario"":""Attempting to import a user whose email already exists"",""given"":""A user with the email 'existing.user@example.com' already exists in the tenant"",""when"":""The Admin uploads a CSV file containing a row to create a user with the same email"",""then"":""The system skips that row, and the summary report indicates the row failed with the reason 'User with this email already exists.'""}]","[""Build file upload UI in Admin dashboard"",""Implement Cloud Function triggered by file upload to parse CSV and process records"",""Implement robust validation and error handling logic in the Cloud Function""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function's parsing and validation logic are implemented with >= 80% coverage"",""E2E test case for the happy path upload scenario is created and passing"",""Story deployed and verified in the staging environment""]"
"US-084","Tenant & User Lifecycle Management","Admin reviews a data import summary report","Admin","As an Admin responsible for onboarding my organization, I want to see a detailed summary report immediately after uploading a user and team data file, so that I can quickly verify which records were successfully imported and diagnose the specific errors for any records that failed.","Improves the efficiency and accuracy of the tenant onboarding process. Reduces administrative errors and support requests by providing immediate, actionable feedback on bulk data imports.","Should Have","8","[""US-083"",""US-082""]","[{""scenario"":""Partial success with some failed records"",""given"":""an Admin has uploaded a CSV file containing a mix of valid and invalid records"",""when"":""the import process completes"",""then"":""the summary report accurately displays the total records processed, the count of successful imports, the count of failed imports, and a detailed list of failed records showing the original row number, problematic data, and a clear error message.""},{""scenario"":""Admin downloads the failed records report"",""given"":""an Admin is viewing an import summary report that contains at least one failed record"",""when"":""the Admin clicks the 'Download Failed Records' button"",""then"":""a CSV file is downloaded containing the full data from the original rows that failed, plus an additional column named 'Error' detailing the reason for the failure.""},{""scenario"":""Import of a file with invalid headers or format"",""given"":""an Admin attempts to upload a file that is not a valid CSV or has incorrect headers"",""when"":""the system attempts to process the file"",""then"":""the import process fails immediately, and the summary report shows a single, clear error message explaining that the file format or structure is incorrect.""}]","[""Build import summary report UI in Admin dashboard"",""Update import Cloud Function to store processing results in Firestore"",""Implement backend logic to generate and serve the failed records CSV""]","[""All acceptance criteria validated and passing"",""Unit tests for Cloud Function logic implemented with >80% coverage"",""E2E test scenario for a partial failure and report download is automated and passing"",""All displayed error messages are verified to be user-friendly"",""Story deployed and verified in staging environment""]"
"US-085","Usability & Accessibility","User accesses role-based training materials from a centralized help section","All user roles","As a user (Admin, Supervisor, or Subordinate), I want to access a 'Help & Training' section within the application so that I can easily find and view guides and videos relevant to my role, enabling me to learn how to use the system effectively and solve problems on my own.","Improves user onboarding and proficiency, reduces the load on customer support by enabling user self-service, and increases overall user satisfaction and product adoption.","Could Have","3","[""US-021""]","[{""scenario"":""Subordinate views their specific training materials"",""given"":""I am a user logged in with the 'Subordinate' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see a list of training materials tagged for the 'Subordinate' role, such as the 'Subordinate Quick Start Guide'.""},{""scenario"":""Supervisor views their own and their subordinates' training materials"",""given"":""I am a user logged in with the 'Supervisor' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see a list of materials for the 'Supervisor' role and a separate list for the 'Subordinate' role.""},{""scenario"":""Admin views all training materials"",""given"":""I am a user logged in with the 'Admin' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see distinct lists of training materials for all roles: 'Admin', 'Supervisor', and 'Subordinate'.""}]","[""Create Firestore collection to store training material metadata"",""Build 'Help & Training' screen UI in mobile app and web dashboard"",""Implement logic to fetch and filter materials based on user role""]","[""All acceptance criteria validated and passing on both mobile platforms and the web dashboard."",""Code reviewed and approved by team, adhering to style guides."",""User interface reviewed and approved by the product owner/designer."",""Story deployed and verified in the staging environment.""]"
"US-086","Security & Compliance","User's personal data is anonymized after deactivation and retention period","Deactivated User","As a deactivated user, I want my personally identifiable information (PII) to be automatically and permanently anonymized by the system after a defined data retention period has passed, so that my privacy is protected in accordance with data protection regulations, while the company can still maintain the integrity of its historical records.","Ensures compliance with data protection regulations (e.g., GDPR's Right to Erasure), mitigates data breach risks by minimizing stored PII, and builds user trust by respecting data privacy.","Could Have","13","[""US-008"",""US-074"",""US-051""]","[{""scenario"":""Successful anonymization of a deactivated user after the retention period expires"",""given"":""A user has a status of 'deactivated' and their 'deactivatedTimestamp' is older than the tenant's configured retention period (e.g., 91 days ago for a 90-day policy)."",""when"":""The scheduled data anonymization Cloud Function is triggered."",""then"":""The PII fields in the user's Firestore document are overwritten with non-personal, placeholder values and all historical records referencing the original `userId` are updated to use a non-reversible, anonymized identifier.""},{""scenario"":""User within the retention period is not anonymized"",""given"":""A user has a status of 'deactivated' and their 'deactivatedTimestamp' is more recent than the tenant's configured retention period."",""when"":""The scheduled data anonymization Cloud Function is triggered."",""then"":""The user's data remains completely unchanged.""},{""scenario"":""Admin views historical records of an anonymized user"",""given"":""A user's data has been successfully anonymized and an Admin is viewing a historical report that includes records from that user."",""when"":""The report is displayed in the web dashboard."",""then"":""The user's name associated with the historical records is displayed as 'Anonymized User' or a similar placeholder.""}]","[""Implement scheduled Cloud Function for user data anonymization"",""Implement logic to find and replace `userId` across all relevant collections"",""Update Admin report UI to handle display of anonymized records""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function logic with >80% coverage"",""Integration testing completed successfully against the Firebase Emulator Suite"",""The process is confirmed to be idempotent"",""Story deployed and verified in staging environment""]"
"US-087","Admin Reporting & Integrations","Admin is alerted when tenant usage approaches cost-incurring levels","Admin","As an Admin, I want to receive automated alerts when my organization's resource usage approaches the limits of our subscription tier, so that I can proactively manage our consumption, avoid unexpected overage charges, and make informed decisions about upgrading our plan.","Provides financial predictability for customers, builds trust through cost transparency, reduces churn from unexpected bills, and creates natural opportunities for upselling to higher tiers.","Could Have","13","[]","[{""scenario"":""Admin receives an alert when a usage metric reaches the first threshold (80%)"",""given"":""An organization is on a subscription tier with a defined limit of 100,000 Firestore reads for the current billing cycle, and an alert threshold is set at 80%."",""when"":""The organization's aggregated Firestore read count for the cycle reaches 80,000."",""then"":""An email notification is sent to all users with the 'Admin' role for that tenant and a persistent banner appears on the Admin web dashboard.""},{""scenario"":""Usage alerts are cleared at the start of a new billing cycle"",""given"":""An Admin's dashboard is displaying a 95% usage alert banner."",""when"":""The system date rolls over to the first day of the new billing cycle."",""then"":""The usage alert banner is automatically removed from the Admin's dashboard.""}]","[""Set up GCP Billing export to BigQuery"",""Implement scheduled Cloud Function to process usage data from BigQuery"",""Implement logic to compare usage against tier limits and trigger alerts"",""Build persistent notification banner in Admin dashboard""]","[""All acceptance criteria validated and passing"",""Integration testing of the data pipeline and alert mechanism completed successfully"",""User interface banner reviewed and approved by UX/Product"",""Story deployed and verified in the staging environment""]"