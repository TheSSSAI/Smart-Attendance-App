"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"Pull Request Merge Gate","Static Analysis & Unit Test","Pull Request creation/update","All unit tests pass; Code coverage >= 80% (REQ-1-072); Linter and static analysis tools report 0 critical issues.","Block PR merge; Post failure report as a PR comment.","Development Team","Fully Automated","GitHub Actions; Jest; `flutter_test`; SonarQube","On every commit to a PR","N/A","90","1.5","Prevents basic bugs and code quality issues from entering the main branch."
"Staging Deployment Gate","Integration & Smoke Test","Merge to `staging` branch","Successful deployment to Staging environment; All integration tests pass; Automated smoke test suite (critical path E2E) passes.","Rollback deployment; Create a P1 bug; Alert the on-call developer.","DevOps / QA Team","Fully Automated","GitHub Actions; Firebase CLI; Flutter `integration_test`","On every merge to staging","Alert sent to team chat channel.","85","4","Ensures the staging environment is always stable for UAT and further testing."
"Production Release Gate","Release Candidate Validation","Manual trigger for production deployment","All automated E2E tests pass on Staging; Manual UAT sign-off from Product Owner; No open P0/P1 bugs; Performance benchmarks met; Security scan clean.","Abort production deployment; Schedule a release post-mortem.","QA Lead / Tech Lead","Partially Automated","Jira; Manual Test Plans; Automated Test Reports","Per release","Go/No-Go decision from release manager.","99","24","Prevents critical defects from reaching end-users."