"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"US-001","Tenant & User Lifecycle Management","Admin registers a new organization tenant","Initial Admin User","As a new administrator, I want to register my organization by providing my details, a unique organization name, and selecting a data residency region, so that a new, isolated tenant is created for my company and I can begin configuring the system.","Enables new organizations to onboard themselves, creating the foundational tenant structure. This is the primary entry point for customer acquisition and is critical for the multi-tenant architecture.","Must Have","5","[]","[{""scenario"":""Successful registration with unique organization name"",""given"":""A potential administrator is on the registration page and has filled all required fields with valid data, including a globally unique organization name and a password meeting complexity requirements"",""when"":""The user clicks the 'Register' button"",""then"":""A new tenant document is created in Firestore, a new user is created in Firebase Authentication with the 'Admin' role, custom claims for tenantId and role are set on the user's auth token, the user is automatically logged in, and they are redirected to the Admin dashboard.""},{""scenario"":""Registration attempt with a duplicate organization name"",""given"":""An organization with the name 'Global Tech Inc.' already exists in the system"",""when"":""A new user enters 'Global Tech Inc.' as the organization name and submits the registration form"",""then"":""The system prevents form submission and displays an inline error message: 'Organization name is already taken. Please choose another.'""},{""scenario"":""Registration process creates all required data atomically"",""given"":""A user submits a valid registration form"",""when"":""An unexpected error occurs during the creation of the Firestore user document after the Firebase Auth user has been created"",""then"":""The entire transaction is rolled back, the Firebase Auth user is deleted, and no tenant or user documents are left in the database. The user is shown a generic error message like 'Registration failed. Please try again.'""}]","[""WI-002-02-001: Develop New Organization Registration Flow"",""Implement public-facing Flutter for Web registration page"",""Create callable Cloud Function for atomic tenant and user creation"",""Set custom claims (tenantId, role) on the new Admin user""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for form validation and Cloud Function logic implemented with >80% coverage"",""Integration testing of the full registration flow completed successfully in the emulator suite"",""Security requirements, especially regarding custom claims and data handling, are validated"",""Story deployed and verified in the staging environment""]"
"US-002","Tenant & User Lifecycle Management","Admin is notified of a non-unique organization name during registration","Initial Admin User","As a Prospective Admin registering my organization for the first time, I want to be immediately notified if the organization name I enter is already in use, so that I can choose a unique name and complete the registration process without errors or confusion.","Ensures data integrity by enforcing unique tenant names, prevents user frustration during onboarding, and reduces potential support requests related to registration failures.","Must Have","3","[""US-001""]","[{""scenario"":""Duplicate organization name provided (case-insensitive)"",""given"":""an organization with the name 'Vandelay Industries' already exists in the system"",""when"":""a user enters 'vandelay industries' in the 'Organization Name' field and the field loses focus"",""then"":""an inline error message 'This organization name is already taken. Please choose another.' is displayed below the input field and the registration submission button is disabled.""},{""scenario"":""Validation in progress feedback"",""given"":""a user is on the new organization registration page"",""when"":""the user enters text into the 'Organization Name' field and the field loses focus, triggering the asynchronous validation check"",""then"":""a loading indicator (e.g., spinner) is displayed next to the field until the validation check completes and is replaced by either a success or error indicator.""},{""scenario"":""User corrects a duplicate name"",""given"":""a user has entered a duplicate organization name and an error message is displayed"",""when"":""the user edits the field to provide a unique name and the field loses focus"",""then"":""the error message is cleared, a success indicator is displayed, and the registration submission button becomes enabled.""}]","[""WI-002-02-001: Develop New Organization Registration Flow (uniqueness check portion)"",""Create a public callable Cloud Function for asynchronous name validation"",""Implement frontend logic to call the validation function onBlur and display feedback""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for both frontend and backend logic with >80% coverage"",""Performance requirements for the validation endpoint are verified"",""Security requirements (rate limiting, App Check) are implemented and validated"",""Story deployed and verified in the staging environment""]"
"US-003","Tenant & User Lifecycle Management","Admin selects a data residency region during tenant creation","Initial Admin User","As an initial Admin registering my organization, I want to select a primary data residency region from a list of supported locations during the sign-up process so that I can ensure my organization's data is stored in a specific geographic area to comply with data sovereignty regulations like GDPR.","Enables the product to meet data sovereignty and regulatory compliance requirements (e.g., GDPR), expanding the addressable market to enterprise customers in regulated regions and building trust.","Must Have","8","[""US-001""]","[{""scenario"":""Successful selection of a data residency region during registration"",""given"":""A user is on the new organization registration page"",""when"":""The user fills in all required fields and selects a valid data residency region (e.g., 'Europe (Frankfurt)') from the dropdown list"",""then"":""The system successfully creates a new tenant upon form submission and all subsequent data created for this tenant is physically stored in the infrastructure provisioned for the selected region.""},{""scenario"":""Region selection is non-modifiable after tenant creation"",""given"":""An Admin has successfully created a tenant with a specific data residency region"",""when"":""The Admin navigates to the organization settings page in the web dashboard"",""then"":""The selected data residency region is displayed as a read-only value and there is no user interface option to change it.""}]","[""Architect and implement a multi-region infrastructure strategy for Firebase/GCP"",""Update tenant creation Cloud Function to provision resources in the selected region"",""Add region selection dropdown to the registration UI""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing completed successfully, confirming data is written to the correct regional database"",""Architectural decisions and implementation details are documented"",""Story deployed and manually verified by QA in the staging environment for at least two different regions""]"
"US-004","Tenant & User Lifecycle Management","Admin invites a new user to the organization via email","Admin","As an Admin, I want to invite new employees to the application by entering their email address and assigning them a role, so that they can receive a secure registration link, create their account, and become part of my organization's tenant.","Enables the onboarding of new employees into the system, facilitating organizational growth and the core attendance tracking function. Ensures that only authorized individuals can join a specific tenant, maintaining data security and isolation.","Must Have","5","[""US-001""]","[{""scenario"":""Successful invitation of a new user"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Manage Users' page"",""when"":""I enter a valid and unique email address 'new.user@example.com', select the role 'Subordinate', and click 'Send Invitation'"",""then"":""I see a success notification message: 'Invitation sent successfully to new.user@example.com', a user document is created with 'invited' status, and a transactional email is triggered to 'new.user@example.com' containing a unique, 24-hour time-limited registration link.""},{""scenario"":""Attempting to invite a user who already exists in the tenant"",""given"":""I am an Admin logged in, and a user with the email 'existing.user@example.com' already exists in my tenant"",""when"":""I attempt to invite a new user with the email 'existing.user@example.com'"",""then"":""The form submission is blocked and I see an inline error message: 'A user with this email already exists in your organization.'""}]","[""WI-002-02-002: Implement Admin User Invitation Flow"",""Build 'Invite User' UI in the Admin web dashboard"",""Create callable Cloud Function to generate an invitation token, create an 'invited' user document, and trigger a SendGrid email""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for form validation logic and Cloud Function logic, achieving >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements for role-based access and token generation are validated"",""Story deployed and verified in the staging environment""]"
"US-005","Tenant & User Lifecycle Management","Invited user receives an email with a time-limited registration link","Invited User","As an invited user, I want to receive an email containing a unique, time-limited registration link after an Admin invites me, so that I can securely and easily begin the process of creating my account and joining my organization's workspace.","Provides a secure and automated mechanism for new user activation, which is critical for tenant growth. Ensures only the intended recipient can register, reducing security risks and support overhead.","Must Have","5","[""US-004""]","[{""scenario"":""Successful email delivery with a valid link"",""given"":""an Admin has successfully submitted an invitation for a new user with the email 'new.user@example.com'"",""when"":""the backend system processes the invitation request"",""then"":""an email is sent to 'new.user@example.com' from the SendGrid service, containing a unique registration link and explicitly mentioning that the link will expire in 24 hours.""},{""scenario"":""Email hard bounces"",""given"":""an invitation email is sent to a non-existent email address"",""when"":""the SendGrid service reports a hard bounce event"",""then"":""a webhook or monitoring process updates the invited user's profile in Firestore with a status indicating delivery failure (e.g., `invitationStatus: 'delivery_failed'`).""}]","[""WI-002-02-002: Implement Admin User Invitation Flow (email part)"",""Design and implement a responsive HTML email template for invitations"",""Integrate the SendGrid API into the invitation Cloud Function"",""Configure SendGrid webhooks to handle bounce events (optional for MVP)""]","[""All acceptance criteria validated and passing"",""Cloud Function for sending invitations is implemented with unit tests"",""Integration with SendGrid is complete and tested"",""HTML email template is created, approved, and tested for responsiveness"",""Security review of token generation logic is complete"",""Story deployed and verified in the staging environment by sending a test invitation""]"
"US-006","Tenant & User Lifecycle Management","Invited user completes registration by setting a password","Invited User","As an Invited User, I want to securely complete my account registration by clicking a unique link from my invitation email and setting a strong password, so that I can activate my account, log in for the first time, and start using the attendance application.","Enables the final, critical step of user onboarding, converting an invited user into an active user. A seamless registration process improves user adoption and reduces administrative support load.","Must Have","5","[""US-004"",""US-005""]","[{""scenario"":""Successful account activation with a valid link and strong password"",""given"":""an invited user has a valid, non-expired registration link and is on the registration completion page"",""when"":""the user enters a password that meets the organization's policy, confirms it correctly, accepts the Terms of Service, and clicks 'Activate Account'"",""then"":""the system updates the user's status from 'invited' to 'active' in Firestore, the user is automatically logged in, and they are redirected to their role-specific dashboard. The registration link is also invalidated.""},{""scenario"":""Attempting to use an expired registration link"",""given"":""an invited user has a registration link that is older than 24 hours"",""when"":""the user clicks the link"",""then"":""the user is redirected to a page that clearly states 'This invitation link has expired. Please contact your administrator to request a new invitation.'""}]","[""WI-002-02-003: Implement Invited User Registration Completion"",""Build a public-facing Flutter for Web page for setting the password"",""Create a Cloud Function to validate the token, set the user's password in Firebase Auth, and update the user's status to 'active' in Firestore""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for password validation logic and Cloud Function"",""E2E test for the full registration flow is passing"",""Security requirements (token invalidation, HTTPS) validated"",""Story deployed and verified in the staging environment""]"
"US-007","Tenant & User Lifecycle Management","Invited user is notified when a registration link has expired","Invited User","As an invited user who has clicked on an old invitation link, I want to be shown a clear, dedicated page explaining that the link has expired, so that I understand why I cannot register and know that I need to contact my administrator for a new invitation.","Improves the user onboarding experience by providing clear feedback for a common error scenario. This reduces user frustration, minimizes support requests, and prevents potential users from abandoning the registration process.","Must Have","3","[""US-004"",""US-005""]","[{""scenario"":""User clicks on an invitation link that has expired"",""given"":""An Admin has sent a user an invitation link which has a 24-hour validity period"",""when"":""The user clicks the invitation link more than 24 hours after it was generated"",""then"":""The system must display a dedicated 'Invitation Link Expired' page with a clear heading and an instruction to contact their administrator for a new invitation.""},{""scenario"":""An already active user clicks their old invitation link"",""given"":""A user has already completed their registration and their account status is 'active'"",""when"":""The user clicks on their original (now used) invitation link"",""then"":""The system should display a page informing them that their account is already active and provide a link to the main login page.""}]","[""WI-002-02-003: Implement Invited User Registration Completion (error handling)"",""Configure Firebase Hosting rewrite rules to direct registration paths to a validation Cloud Function"",""Implement the validation Cloud Function to check token status (valid, expired, used) and redirect accordingly"",""Create the 'Link Expired' and 'Link Invalid/Used' UI pages in Flutter for Web""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for the Cloud Function validation logic are implemented"",""Integration testing between Hosting, Cloud Function, and Firestore is completed successfully"",""Story deployed and verified in the staging environment""]"
"US-008","Tenant & User Lifecycle Management","Admin deactivates a user's account","Admin","As an Admin, I want to deactivate a user's account and be guided through any necessary reassignments, so that I can securely revoke access for departing employees and maintain the integrity of the organizational hierarchy.","Enhances organizational security by preventing unauthorized access from former employees. Ensures management continuity by enforcing the reassignment of subordinates before a supervisor's departure.","Must Have","5","[""US-004"",""US-017"",""US-051""]","[{""scenario"":""Admin successfully deactivates a user who is not a supervisor"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I select a user with the 'Subordinate' role, click 'Deactivate', and confirm the action"",""then"":""The user's status is updated to 'deactivated' in the Firestore database, and their active session is invalidated.""},{""scenario"":""Deactivated user is prevented from logging in"",""given"":""A user's account has been successfully deactivated"",""when"":""That user attempts to log in with their correct credentials"",""then"":""The system denies access and displays a clear message, such as 'Your account has been deactivated. Please contact your administrator.'""},{""scenario"":""Admin is blocked from deactivating a Supervisor with active subordinates"",""given"":""I am logged in as an Admin and select a 'Supervisor' user who has one or more active subordinates assigned to them"",""when"":""I attempt to deactivate this Supervisor"",""then"":""The system prevents the deactivation and displays a modal explaining that all subordinates must be reassigned first.""}]","[""WI-002-02-004: Implement Admin-Led User Deactivation"",""Implement a Cloud Function to check for active subordinates before deactivation"",""Implement a Cloud Function to revoke user refresh tokens for immediate session invalidation"",""Update Admin dashboard UI to include deactivation action and confirmation modals""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for Cloud Function logic implemented with >80% coverage"",""Security requirement for session invalidation is manually verified and confirmed working"",""Audit log entry is correctly generated and formatted"",""Story deployed and verified in staging environment""]"
"US-009","Tenant & User Lifecycle Management","Admin is required to reassign subordinates before deactivating a Supervisor","Admin","As an Admin, I want to be prevented from deactivating a Supervisor who still has active subordinates and be prompted to reassign them first, so that I can ensure every employee remains managed and critical workflows like attendance approvals are not broken.","Ensures organizational hierarchy integrity by preventing 'orphaned' employees. This maintains the continuity of approval workflows and avoids administrative data correction tasks later.","Must Have","5","[""US-008""]","[{""scenario"":""Attempt to deactivate a Supervisor with active subordinates"",""given"":""An Admin attempts to deactivate a user who has the 'Supervisor' role and has one or more active subordinates"",""when"":""The deactivation action is initiated"",""then"":""The action is blocked, and a modal appears listing the affected subordinates and prompting the Admin to reassign them.""},{""scenario"":""Successful deactivation of a Supervisor after reassigning all subordinates"",""given"":""An Admin was blocked from deactivating a Supervisor and is now in the reassignment interface"",""when"":""The Admin reassigns all of the Supervisor's active subordinates to a new Supervisor and confirms"",""then"":""The deactivation action is successful, and the former Supervisor's user status is updated to 'deactivated'.""}]","[""WI-002-02-005: Implement 'Orphaned Subordinates' Business Rule"",""Build the subordinate reassignment UI within the Admin dashboard"",""Update the deactivation Cloud Function to handle the reassignment logic as part of an atomic transaction""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for the Cloud Function and frontend logic"",""Integration testing of the full Admin workflow completed successfully"",""User interface for the reassignment modal reviewed and approved"",""Story deployed and verified in staging environment""]"
"US-010","Tenant & User Lifecycle Management","Deactivated user is prevented from logging in","Deactivated User","As a deactivated user, I want to be prevented from logging into the system, even with correct credentials, so that my former employer's data is secure after my access has been revoked.","Enhances security by ensuring that offboarded users cannot access tenant data, thereby protecting company information and enforcing access control policies.","Must Have","2","[""US-008"",""US-017""]","[{""scenario"":""Deactivated user attempts login with correct credentials"",""given"":""a user exists with a status of 'deactivated' in the system"",""when"":""the user attempts to log in using their correct email and password"",""then"":""the system must reject the authentication attempt and display a specific error message: 'Your account has been deactivated. Please contact your administrator.'""},{""scenario"":""Deactivated user attempts login with incorrect credentials"",""given"":""a user exists with a status of 'deactivated' in the system"",""when"":""the user attempts to log in using their correct email but an incorrect password"",""then"":""the system must reject the authentication attempt and show a generic 'Invalid credentials' error to prevent account status enumeration.""}]","[""WI-002-02-004: Implement Admin-Led User Deactivation (login check part)"",""Implement a Firebase Auth Blocking Function (`beforeSignIn`) to check the user's status in Firestore before minting a token"",""Update Firestore Security Rules to deny data access to any user whose auth token does not have an 'active' status claim""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing confirms that login is blocked server-side for inactive users"",""Security review confirms no information leakage and that Firestore rules are updated"",""Story deployed and verified in the staging environment""]"
"US-011","Administration & Reporting Dashboard","Admin creates a new team and assigns a Supervisor","Admin","As an Admin, I want to create a new team by providing a name and selecting an existing user as its Supervisor, so that I can accurately model my organization's structure, enabling proper approval workflows and team-based event assignments.","Enables the foundational hierarchical structure of the organization within the application. This is a prerequisite for managing user groups, assigning work, and implementing role-based approval workflows.","Must Have","5","[""US-001"",""US-004""]","[{""scenario"":""Successful creation of a new team"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Team Management' page"",""when"":""I click the 'Create Team' button, enter a unique team name, select a valid user with the 'Supervisor' role, and click 'Save'"",""then"":""a new team document is created in Firestore with the specified name and the selected user's ID as `supervisorId`, and a success notification is displayed.""},{""scenario"":""Attempt to create a team with a duplicate name"",""given"":""I am an Admin on the 'Create Team' form, and a team named 'Field Operations' already exists"",""when"":""I enter 'Field Operations' as the team name and attempt to save"",""then"":""the system prevents creation and displays an inline error message: 'A team with this name already exists.'""},{""scenario"":""Supervisor selection list is correctly populated"",""given"":""I am an Admin on the 'Create Team' form"",""when"":""I click on the 'Select Supervisor' dropdown"",""then"":""the list only contains active users from my tenant who have the 'Supervisor' or 'Admin' role.""}]","[""WI-004-01-001: Develop Admin Team Management (CRUD) (Create part)"",""Build the 'Create Team' modal/form in the Admin web dashboard"",""Implement a callable Cloud Function to handle team creation with server-side validation for unique names"",""Write Firestore Security Rules to restrict team creation to Admins""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented with >80% coverage"",""Firestore Security Rules written and tested"",""Integration testing completed successfully against the Firebase Emulator Suite"",""Story deployed and verified in the staging environment""]"
"US-012","Administration & Reporting Dashboard","Admin edits an existing team's name or assigned Supervisor","Admin","As an Admin, I want to edit an existing team's name and reassign its supervisor so that the application accurately reflects my organization's current structure and ensures approval workflows are routed correctly.","Maintains data accuracy of the organizational hierarchy, ensuring correct routing of approval workflows and reliability of reports. Allows the system to adapt to organizational changes without data loss.","Should Have","5","[""US-011""]","[{""scenario"":""Admin successfully edits a team's name"",""given"":""I am an Admin logged in and viewing the list of teams"",""when"":""I select a team to edit, change its name to a new, unique value, and click 'Save'"",""then"":""the system updates the team's name in the database, a success notification is displayed, and the team list shows the updated name. An audit log entry is created.""},{""scenario"":""Admin successfully reassigns a team's supervisor"",""given"":""I am an Admin logged in and viewing the list of teams"",""when"":""I select a team to edit, select a different, eligible user as the new supervisor, and click 'Save'"",""then"":""the system updates the team's supervisor in the database, a success notification is displayed, and the team list shows the new supervisor. An audit log entry is created.""},{""scenario"":""Admin attempts to use a duplicate team name"",""given"":""I am an Admin editing an existing team, and another team named 'Field Ops' already exists"",""when"":""I change the current team's name to 'Field Ops' and attempt to save"",""then"":""the save operation is prevented and a validation error message 'Team name must be unique' is displayed.""}]","[""WI-004-01-001: Develop Admin Team Management (CRUD) (Update part)"",""Build the 'Edit Team' modal/form in the Admin dashboard"",""Implement a callable Cloud Function to handle team updates with server-side validation and audit logging""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for the Cloud Function and UI components"",""Integration tests covering the UI-to-database flow are passing"",""The corresponding audit log entry is created correctly upon successful update"",""Story deployed and verified in the staging environment""]"
"US-013","Administration & Reporting Dashboard","Admin deletes a team","Admin","As an Admin, I want to permanently delete a team from my organization, so that I can maintain an accurate and clean organizational structure by removing teams that are obsolete or no longer exist.","Improves data hygiene and administrative efficiency by allowing the removal of outdated organizational structures, ensuring reports and user assignments reflect the current state of the company.","Should Have","5","[""US-011"",""US-014""]","[{""scenario"":""Admin successfully deletes a team"",""given"":""I am an Admin logged into the web dashboard and am viewing the list of teams"",""when"":""I click the 'Delete' action for a specific team and confirm the action in the confirmation dialog"",""then"":""The team document is deleted, the team ID is removed from all member's user profiles, and an audit log entry is created.""},{""scenario"":""Deletion confirmation dialog prevents accidental deletion"",""given"":""I am an Admin on the team management page"",""when"":""I click the 'Delete' action for a team"",""then"":""A confirmation modal appears with the text 'Are you sure you want to delete the team \""[Team Name]\""? This action cannot be undone.' and provides 'Confirm' and 'Cancel' options.""}]","[""WI-004-01-001: Develop Admin Team Management (CRUD) (Delete part)"",""Implement a callable Cloud Function to handle the atomic deletion of a team and the update of all associated user/event documents in a transaction"",""Add a 'Delete' button and confirmation modal to the team management UI""]","[""All acceptance criteria validated and passing"",""Cloud Function code reviewed and approved"",""Unit tests for the Cloud Function achieve >80% code coverage"",""Integration tests covering the full data modification flow are passing"",""Security rules and function authentication logic are tested and verified"",""Story deployed and verified in the staging environment""]"
"US-014","Administration & Reporting Dashboard","Admin adds or removes members from any team","Admin","As an Admin, I want to add and remove users from any team within my organization, so that I can maintain accurate team rosters that reflect our current organizational structure.","Ensures data integrity of the organizational structure, which is foundational for correct reporting, supervisor approval workflows, and event assignments. Accurate rosters prevent miscommunication and operational errors.","Must Have","5","[""US-011""]","[{""scenario"":""Admin successfully adds a user to a team"",""given"":""I am an Admin viewing the 'Manage Members' page for a specific team"",""when"":""I initiate the 'Add Member' action, select a valid user who is not currently a member, and confirm"",""then"":""The user's name appears in the team's member list, and the backend data for both the team and the user is updated to reflect the new membership.""},{""scenario"":""Admin successfully removes a user from a team"",""given"":""I am an Admin viewing the member list for a team that has at least one member"",""when"":""I click the 'Remove' action next to a member's name and confirm the removal"",""then"":""The user's name is removed from the team's member list, and the backend data for the team and user is updated.""},{""scenario"":""System prevents adding a user who is already a member of the team"",""given"":""I am an Admin on the 'Add Member' interface for a specific team"",""when"":""I search for users to add to the team"",""then"":""The list of available users must not include any users who are already members of that team.""}]","[""WI-004-01-001: Develop Admin Team Management (CRUD) (Membership part)"",""Build the 'Manage Members' UI in the Admin dashboard"",""Implement a callable Cloud Function for adding/removing members using an atomic WriteBatch to update both user and team documents""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Firestore Security Rules tests implemented and passing"",""End-to-end integration testing completed successfully"",""User interface reviewed for responsiveness and accessibility"",""Story deployed and verified in the staging environment""]"
"US-015","Administration & Reporting Dashboard","Supervisor adds or removes members from their own teams","Supervisor","As a Supervisor, I want to add and remove members from the teams I directly manage, so that I can maintain accurate team rosters and ensure workflows like event assignment and attendance approvals are directed to the correct people.","Empowers team leaders to manage their own rosters, improving data accuracy and operational efficiency. Reduces administrative overhead on the Admin role and ensures system functions operate on correct team data.","Should Have","5","[""US-011"",""US-004""]","[{""scenario"":""Supervisor successfully adds an eligible user to a team they manage"",""given"":""I am a logged-in Supervisor and I am viewing the details of a team I supervise"",""when"":""I select the 'Add Member' option and select an active user with the 'Subordinate' role who is not already on the team"",""then"":""the user is added to the team's member list, their user profile is updated with the new team ID, and the UI refreshes.""},{""scenario"":""Supervisor is prevented from managing a team they do not supervise"",""given"":""I am a logged-in Supervisor"",""when"":""I attempt to modify the member list of a team for which I am not the designated supervisor"",""then"":""the system must reject the request with a 'permission-denied' error.""}]","[""WI-004-01-003: Implement Supervisor's Team Membership Management"",""Build the team management UI for the Supervisor role in the mobile app"",""Write Firestore Security Rules to enforce that a Supervisor can only modify teams where their UID matches the `supervisorId`""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing for both happy paths and security rule enforcement completed successfully in the emulator"",""Security requirements validated, especially Firestore rules"",""Story deployed and verified in the staging environment""]"
"US-016","Administration & Reporting Dashboard","Admin is prevented from creating a circular reporting structure","Admin","As an Admin, I want the system to validate and prevent me from assigning a supervisor to a user if that assignment would create a circular reporting loop, so that I can maintain a logical and functional organizational hierarchy and ensure approval workflows operate correctly.","Ensures data integrity of the organizational hierarchy, prevents infinite loops in approval/escalation workflows, reduces administrative errors, and improves overall system stability.","Must Have","5","[""US-014""]","[{""scenario"":""Admin attempts to create a direct circular dependency (A -> B, then B -> A)"",""given"":""An organizational structure exists where 'User B' reports directly to 'Supervisor A'"",""when"":""An Admin edits the profile of 'Supervisor A' and attempts to assign 'User B' as their new supervisor"",""then"":""The system must prevent the save operation and display a clear error message, such as ''User B' cannot be the supervisor as they are in the reporting line of 'Supervisor A'.'""},{""scenario"":""Admin attempts to create a multi-level, indirect circular dependency (A -> B -> C, then C -> A)"",""given"":""An organizational structure exists where 'User C' reports to 'Supervisor B', and 'Supervisor B' reports to 'Manager A'"",""when"":""An Admin edits the profile of 'Manager A' and attempts to assign 'User C' as their new supervisor"",""then"":""The system must traverse the hierarchy, detect the loop, prevent the save, and display a clear error message.""}]","[""WI-004-01-002: Develop 'Circular Hierarchy' Prevention Logic"",""Implement a callable Cloud Function that performs a graph traversal of the reporting hierarchy to detect loops before saving a supervisor change""]","[""All acceptance criteria validated and passing"",""Server-side validation logic is implemented in a Firebase Cloud Function"",""Unit tests for the Cloud Function achieve >90% coverage of the validation logic"",""Integration testing between the web client and Cloud Function completed successfully"",""Story deployed and verified in staging environment""]"
"US-017","Tenant & User Lifecycle Management","User logs in with email and password","Any registered user","As a registered user (Admin, Supervisor, or Subordinate), I want to securely log in to the application using my email and password, so that I can access my personalized dashboard and perform actions specific to my role.","Provides the fundamental security mechanism to authenticate users and grant them role-based access to tenant-specific data, enabling all subsequent application functionality.","Must Have","3","[""US-006""]","[{""scenario"":""Successful login with valid credentials"",""given"":""A registered user with an 'active' status is on the login screen"",""when"":""The user enters their correct email and password and taps the 'Log In' button"",""then"":""The system successfully authenticates the user, a session is created, and the user is redirected to their role-specific dashboard.""},{""scenario"":""Login attempt with an incorrect password"",""given"":""A registered user is on the login screen"",""when"":""The user enters their correct email but an incorrect password and taps 'Log In'"",""then"":""A clear, non-specific error message such as 'Invalid email or password. Please try again.' is displayed.""}]","[""WI-002-01-003: Implement Email/Password and OTP Login UI and Logic (Email/Password part)"",""Build the login screen UI in Flutter for both mobile and web"",""Integrate with Firebase Authentication SDK's `signInWithEmailAndPassword` method"",""Handle various error responses from the SDK""]","[""All acceptance criteria are met and have been validated"",""Code has been peer-reviewed and merged"",""End-to-end integration tests for all major scenarios are passing"",""UI conforms to the design specifications and accessibility standards"",""The feature is deployed and verified on the staging environment""]"
"US-018","Tenant & User Lifecycle Management","User logs in with Phone OTP","Any registered user","As a registered user (Admin, Supervisor, or Subordinate), I want to log in to the application using a one-time password (OTP) sent to my registered phone number, so that I can securely and conveniently access my account without needing to remember my password.","Improves account security and enhances user experience by providing a convenient, passwordless login option.","Should Have","5","[""US-006"",""US-017""]","[{""scenario"":""Successful login with a valid phone number and OTP"",""given"":""I am on the login screen and have an active account with a registered and verified phone number"",""when"":""I select the 'Login with Phone' option, enter my registered phone number, receive an SMS with a 6-digit OTP, and enter the correct OTP"",""then"":""the system validates the OTP, logs me in, and I am redirected to my role-specific dashboard.""},{""scenario"":""Entering an incorrect OTP"",""given"":""I have received an OTP for my registered phone number"",""when"":""I enter an incorrect 6-digit OTP and tap 'Verify'"",""then"":""I see an error message stating 'Invalid code. Please try again.' and I remain on the OTP verification screen.""}]","[""WI-002-01-003: Implement Email/Password and OTP Login UI and Logic (OTP part)"",""Configure Firebase project for Phone Number authentication (APNs, SHA hashes)"",""Build the multi-step phone login UI in Flutter"",""Integrate with Firebase Authentication SDK's phone auth methods""]","[""All acceptance criteria validated and passing on both iOS and Android physical devices"",""Code reviewed and approved"",""End-to-end manual testing of the full login flow completed successfully"",""Firebase project configuration for phone auth is documented"",""Security requirements, especially rate limiting, are validated"",""Story deployed and verified in the staging environment""]"
"US-019","Tenant & User Lifecycle Management","User is temporarily locked out after multiple failed login attempts","Any registered user","As a registered user, I want my account to be temporarily locked after a specific number of consecutive failed login attempts, so that my account is protected from unauthorized access via brute-force attacks.","Enhances platform security by mitigating brute-force and dictionary attacks, protecting user data, and building user trust in the system's security measures.","Must Have","3","[""US-017""]","[{""scenario"":""Account is locked after 5 consecutive failed login attempts"",""given"":""A user with a valid account exists"",""when"":""The user enters an incorrect password for the 5th consecutive time"",""then"":""The system locks the account for 15 minutes AND displays a clear error message stating: 'Your account has been temporarily locked due to too many failed login attempts. Please try again in 15 minutes.'""},{""scenario"":""Failed login attempt counter is reset after a successful login"",""given"":""A user has 4 consecutive failed login attempts"",""when"":""The user enters the correct password on the 5th attempt"",""then"":""The user is successfully logged in AND the failed login attempt counter for their account is reset to 0.""}]","[""Enable and configure Firebase Identity Platform's built-in brute-force protection"",""Update client-side error handling to recognize and display the 'too-many-requests' error from Firebase Auth""]","[""All acceptance criteria validated and passing in a staging environment"",""Code for client-side messaging is peer-reviewed and merged"",""Integration tests covering the full login/lockout/unlock flow are implemented and passing"",""UI review confirms the error message is displayed correctly"",""Story is deployed and verified in the staging environment""]"
"US-020","Tenant & User Lifecycle Management","User resets their forgotten password","Any registered user","As a registered user, I want to request a password reset link via my registered email address so that I can securely set a new password and regain access to my account if I forget my current one.","Provides a critical self-service mechanism for account recovery, reducing administrative support load and improving user experience by preventing users from being permanently locked out.","Must Have","2","[""US-017""]","[{""scenario"":""User successfully requests a password reset link"",""given"":""I am on the application's login screen"",""when"":""I click the 'Forgot Password?' link, enter my valid and registered email address, and submit the form"",""then"":""I should see a confirmation message stating, 'If an account with that email exists, a password reset link has been sent.'""},{""scenario"":""User successfully resets their password using the link"",""given"":""I have received a password reset email and clicked the valid, unexpired link"",""when"":""I enter a new password that meets the organization's complexity policy, confirm it correctly, and submit the form"",""then"":""My password should be updated, and I should see a success message confirming the change, with a link to the login page.""}]","[""WI-002-01-005: Implement 'Forgot Password' Flow"",""Build the 'Forgot Password' request screen in Flutter"",""Integrate with Firebase Authentication's `sendPasswordResetEmail` method"",""Handle the deep link from the email to the password reset page""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved"",""End-to-end integration test for the full flow is implemented and passing"",""User interface reviewed and approved"",""Security check for email enumeration vulnerability has been performed and passed"",""Story deployed and verified in the staging environment""]"
"US-021","Tenant & User Lifecycle Management","User sees a role-specific dashboard after logging in","Any authenticated user","As an authenticated user (Admin, Supervisor, or Subordinate), I want to be automatically routed to my role-specific dashboard immediately after a successful login, so that I can efficiently access the information and tools relevant to my responsibilities without unnecessary navigation.","Improves user efficiency and satisfaction by providing a personalized experience. Reinforces the Role-Based Access Control (RBAC) model by immediately presenting users with relevant tools and data.","Must Have","2","[""US-017""]","[{""scenario"":""Admin successfully logs into the web application"",""given"":""a registered user exists with the role 'Admin'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must redirect them to the main Admin Web Dashboard.""},{""scenario"":""Supervisor successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Supervisor'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Supervisor Mobile Dashboard.""},{""scenario"":""Subordinate successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Subordinate'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Subordinate Mobile Dashboard.""}]","[""WI-002-01-004: Implement Post-Login Role-Based Routing"",""Implement a global authentication state listener at the root of the Flutter app"",""Use custom claims from the ID token to determine the user's role"",""Implement routing logic to navigate to the correct screen based on role and platform (web/mobile)""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""E2E integration testing completed successfully for all roles and platforms"",""Security requirements for using custom claims are validated via code review"",""Story deployed and verified in the staging environment""]"
"US-022","Tenant & User Lifecycle Management","Admin initiates the permanent deletion of their organization's tenant","Admin","As an Admin, I want to initiate the permanent deletion of my organization's tenant through a secure, multi-step process, so that I can comply with my company's data removal policies and ensure all our data is erased from the service when we decide to stop using it.","Provides a self-service offboarding capability, ensures compliance with data privacy regulations (e.g., GDPR's 'right to erasure'), and builds customer trust by giving them control over their data.","Should Have","5","[""US-017"",""US-023""]","[{""scenario"":""Admin successfully initiates tenant deletion"",""given"":""an Admin is logged into the web dashboard and has navigated to the 'Tenant Settings' page"",""when"":""the Admin clicks the 'Delete Organization' button, confirms their intent, and successfully re-authenticates"",""then"":""the system updates the tenant's document in Firestore to a status of 'pending_deletion' and sets a 'scheduledDeletionTimestamp' for 30 days in the future. An audit log entry is created.""},{""scenario"":""UI displays clear warnings about the irreversible action"",""given"":""an Admin has clicked the 'Delete Organization' button"",""when"":""the confirmation modal is displayed"",""then"":""the modal must explicitly state that the action is irreversible after the grace period, mention the 30-day grace period, and specify that all data will be permanently deleted.""}]","[""WI-002-03-001: Implement Tenant Deletion Request Flow"",""WI-002-03-002: Implement 30-Day Deletion Grace Period (initiation part)"",""Build the 'Danger Zone' UI in the Admin dashboard"",""Implement a callable Cloud Function to handle the tenant status update and audit logging""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing of the full flow (UI -> Cloud Function -> Firestore) completed successfully"",""User interface reviewed for clarity and usability"",""Security requirements validated"",""Story deployed and verified in the staging environment""]"
"US-023","Tenant & User Lifecycle Management","Admin must re-authenticate to confirm tenant deletion","Admin","As an Admin with the authority to delete my organization's tenant, I want to be forced to re-enter my password to confirm the deletion request, so that I can prevent accidental or unauthorized deletion of all my organization's data.","Prevents catastrophic, accidental data loss for an entire organization, which protects against significant business disruption and potential legal liability. This enhances system security and builds user trust.","Must Have","5","[""US-022""]","[{""scenario"":""Admin successfully re-authenticates to confirm tenant deletion"",""given"":""an Admin has clicked the final 'Delete Tenant' button, triggering the confirmation step"",""when"":""the re-authentication modal appears, the Admin enters their correct password, and clicks 'Confirm Deletion'"",""then"":""the system successfully validates the password, and the tenant deletion process is initiated.""},{""scenario"":""Admin enters an incorrect password"",""given"":""the re-authentication modal for tenant deletion is displayed"",""when"":""the Admin enters an incorrect password and clicks 'Confirm Deletion'"",""then"":""an inline error message 'Incorrect password. Please try again.' is displayed, the modal remains open, and the deletion process is not initiated.""}]","[""WI-002-03-001: Implement Tenant Deletion Request Flow (re-auth part)"",""Build the re-authentication modal UI in Flutter for Web"",""Implement a callable Cloud Function to securely handle the re-authentication logic using Firebase Admin SDK""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for the modal UI and Cloud Function implemented"",""Integration testing between the frontend and backend function completed successfully"",""Security requirements validated"",""Story deployed and verified in the staging environment""]"
"US-024","Tenant & User Lifecycle Management","Admin is informed of the 30-day grace period for tenant deletion","Admin","As an Admin who has just confirmed a request to delete my organization's tenant, I want to be immediately and clearly informed about the 30-day grace period and the final deletion date, so that I understand the consequences of my action and know how to reverse the process if needed.","Provides a critical safety mechanism to prevent accidental, irreversible data loss. This builds user trust and reduces support incidents related to accidental deletion.","Must Have","2","[""US-022"",""US-023""]","[{""scenario"":""Display of grace period information after deletion confirmation"",""given"":""An Admin has just successfully re-authenticated to confirm the tenant deletion request"",""when"":""the system processes the deletion request successfully"",""then"":""the UI immediately displays a prominent, persistent banner on the dashboard stating that a 30-day grace period has begun and shows the final deletion date.""},{""scenario"":""Email notification of pending deletion"",""given"":""an Admin has successfully confirmed the tenant deletion request"",""when"":""the backend processes the request"",""then"":""the system sends an email to the initiating Admin's registered email address, containing the 30-day grace period information and the permanent deletion date.""}]","[""WI-002-03-002: Implement 30-Day Deletion Grace Period (notification part)"",""Build the persistent banner UI in the Admin dashboard"",""Update the tenant deletion Cloud Function to trigger a confirmation email via SendGrid""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""User interface reviewed and approved by UX/Product Owner"",""Story deployed and verified in the staging environment""]"
"US-025","Tenant & User Lifecycle Management","Admin cancels a pending tenant deletion","Admin","As an Admin of an organization, I want to cancel a previously requested tenant deletion during the 30-day grace period, so that I can prevent the permanent loss of my organization's data and restore full access to the application if I change my mind or made a mistake.","Provides a critical safety net to prevent accidental or premature permanent data loss. Reduces customer support load by enabling self-service reversal of a destructive action.","Must Have","5","[""US-022""]","[{""scenario"":""Admin successfully cancels a pending deletion within the grace period"",""given"":""I am an authenticated Admin for a tenant whose status is 'pending_deletion' and the current date is within the 30-day grace period"",""when"":""I navigate to the 'Tenant Settings' page, click the 'Cancel Scheduled Deletion' button, and confirm the action"",""then"":""The system updates the tenant's status in Firestore from 'pending_deletion' to 'active', and an audit log entry is created for the cancellation.""},{""scenario"":""Attempt to cancel deletion outside the grace period"",""given"":""A tenant's 30-day grace period for deletion has expired"",""when"":""An Admin attempts to trigger the cancellation action"",""then"":""The system must reject the request with an error message like 'The grace period has expired. This action can no longer be performed.'""}]","[""WI-002-03-002: Implement 30-Day Deletion Grace Period (cancellation part)"",""Build the 'Cancel Scheduled Deletion' button and confirmation modal in the Admin dashboard banner"",""Implement a callable Cloud Function to securely handle the cancellation logic, updating the tenant status and creating an audit log entry""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for the Cloud Function and UI components"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Story deployed and verified in the staging environment""]"
"US-026","Tenant & User Lifecycle Management","User accepts Terms of Service and Privacy Policy","New User","As a new user completing my registration, I want to be presented with the Terms of Service and Privacy Policy and be required to accept them, so that I understand the rules of the service and how my data will be used, and my account can be fully activated for use.","Ensures legal and regulatory compliance (e.g., GDPR) by obtaining explicit user consent before account activation. Mitigates legal risk and builds user trust through transparency.","Must Have","2","[""US-006""]","[{""scenario"":""User reviews and accepts policies"",""given"":""A new user has successfully set their password and is presented with the 'Terms and Policy Acceptance' screen"",""when"":""The user checks the box to indicate acceptance and clicks the 'Accept & Continue' button"",""then"":""The system updates the user's status from 'invited' to 'active', creates an audit log of the acceptance, and redirects the user to their dashboard.""},{""scenario"":""User closes the app before accepting"",""given"":""A new user is on the 'Terms and Policy Acceptance' screen and closes the application"",""when"":""The user re-opens the app and logs in with their newly created credentials"",""then"":""The system must redirect them back to the 'Terms and Policy Acceptance' screen.""}]","[""WI-002-01-007: Implement GDPR Consent Flow"",""Build the 'Terms and Policy Acceptance' screen in Flutter for Web"",""Implement logic in the application router to gate access for users who have not yet accepted the terms""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing completed successfully, verifying Firestore updates"",""User interface reviewed for UX and accessibility compliance"",""Security requirement for atomic, audited writes is validated"",""Story deployed and verified in the staging environment""]"
"US-027","Tenant & User Lifecycle Management","User password must meet complexity requirements","Any System User","As a System User (Admin, Supervisor, or Subordinate), I want my new password to be validated against a set of complexity rules when I register or reset my password, so that I can be confident my account is protected against unauthorized access.","Enhances account and data security by preventing the use of weak or easily guessable passwords. Reduces the risk of unauthorized access and supports security compliance.","Must Have","5","[""US-006"",""US-020""]","[{""scenario"":""User enters a password that meets all complexity requirements"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password that satisfies all defined complexity rules (e.g., 'StrongP@ssw0rd')"",""then"":""Each requirement in the real-time validation checklist is marked as 'met', and the 'Submit' button becomes enabled.""},{""scenario"":""Password is missing a required character type (e.g., number)"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password that meets the length requirement but is missing a number (e.g., 'MissingNumber@')"",""then"":""The 'at least one number' requirement in the validation checklist is marked as 'unmet', and the 'Submit' button remains disabled.""},{""scenario"":""Server-side validation rejects an invalid password"",""given"":""A user attempts to set a new password by bypassing client-side validation"",""when"":""The request contains a password that does not meet the tenant's complexity policy"",""then"":""The server-side logic (Cloud Function) must reject the request with an appropriate error code and message.""}]","[""WI-002-01-006: Implement Password Policy Validation"",""Create a reusable Flutter widget for real-time password policy display and validation"",""Implement a Firebase Auth Blocking Function (`beforeCreate`) to enforce the policy on the server-side""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented for the validation logic"",""Server-side validation logic implemented in a Cloud Function and tested"",""Security requirements validated, including a test to bypass client-side checks"",""Story deployed and verified in staging environment""]"
"US-028","Core Attendance & Approval Workflow","Subordinate checks in for attendance","Subordinate","As a Subordinate, I want to tap a 'Check-In' button on my mobile app so that the system captures my current time and GPS location to create an official attendance record for the start of my workday.","Provides a verifiable, time-stamped, and geo-located record of when an employee starts their workday. This is the foundational data point for all attendance tracking, reporting, and approval workflows.","Must Have","5","[""US-017"",""US-021"",""US-076""]","[{""scenario"":""Successful check-in with an active internet connection"",""given"":""I am a logged-in Subordinate on the main dashboard, I have granted location permissions, and I have not checked in for the current day"",""when"":""I tap the 'Check-In' button"",""then"":""The system captures my current client timestamp and GPS coordinates, a new attendance record is created in Firestore with status 'pending', and the UI updates to show a success message.""},{""scenario"":""Check-in attempt with no GPS signal"",""given"":""I am a logged-in Subordinate with location permissions granted, but my device cannot acquire a GPS signal"",""when"":""I tap the 'Check-In' button"",""then"":""The app displays a loading indicator for up to 10 seconds, then fails with an error message, such as 'Could not get location. Please move to an open area and try again.'""},{""scenario"":""Attempting to check in more than once in a day"",""given"":""I am a logged-in Subordinate and I have already successfully checked in for the current day"",""when"":""I view the main dashboard"",""then"":""The 'Check-In' button is disabled or hidden, preventing me from creating a duplicate check-in record.""}]","[""WI-003-01-001: Implement 'Check-In' Functionality"",""Build the Check-In UI and state management in the Flutter mobile app"",""Integrate the `geolocator` package to capture GPS coordinates"",""Implement logic to create a new attendance document in Firestore""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented with >80% coverage"",""E2E tests for offline and permission flows are passing"",""Performance requirements for GPS lock and data sync are verified"",""Security rules for creating attendance records are deployed and tested"",""Story deployed and verified in the staging environment on both Android and iOS""]"
"US-029","Core Attendance & Approval Workflow","Subordinate checks out from attendance","Subordinate","As a Subordinate, I want to check out at the end of my shift by tapping a button, so that my attendance record for the day is completed with an accurate timestamp and GPS location, ensuring my work duration is correctly logged.","Completes the daily attendance data loop, enabling accurate calculation of work duration and providing complete records for reporting, compliance, and operational management.","Must Have","5","[""US-028"",""US-030""]","[{""scenario"":""Successful check-out on an active attendance record"",""given"":""a Subordinate user is logged in and has an active check-in record for the current day"",""when"":""the user taps the 'Check-Out' button"",""then"":""the system captures the current client timestamp and GPS coordinates and updates the existing attendance record with a 'checkOutTime' and 'checkOutGps'.""},{""scenario"":""System cannot acquire a GPS signal during check-out"",""given"":""a Subordinate user attempts to check out"",""when"":""the device is unable to get a GPS lock within the 10-second timeout"",""then"":""the system must prevent the check-out and display a clear error message.""},{""scenario"":""UI state updates after successful check-out"",""given"":""a Subordinate user has successfully checked out for the day"",""when"":""they view the main attendance screen"",""then"":""the 'Check-Out' button must be disabled or hidden, and the UI must clearly indicate that they are checked out for the day.""}]","[""WI-003-01-002: Implement 'Check-Out' Functionality"",""Build the Check-Out UI and state management in the Flutter mobile app"",""Implement logic to find the active attendance record for the day and update it with check-out data""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented for the check-out logic and UI"",""End-to-end test scenario for the check-out flow is implemented and passing"",""Security rules preventing unauthorized updates are tested and validated"",""Story deployed and verified in the staging environment""]"
"US-030","Core Attendance & Approval Workflow","Subordinate is prevented from checking out before checking in","Subordinate","As a Subordinate, I want the 'Check-Out' button to be disabled and visually distinct until I have successfully checked in for the day, so that I am prevented from making a logical error in my attendance record and can follow the correct workflow without confusion.","Ensures data integrity by preventing orphaned check-out records, reduces user error and subsequent correction requests, and provides a clear, guided user experience.","Must Have","2","[""US-028""]","[{""scenario"":""Initial state on a new day"",""given"":""a Subordinate user opens the attendance screen"",""when"":""they have no active (non-checked-out) attendance record for the current day"",""then"":""the 'Check-In' button is enabled and the 'Check-Out' button is disabled.""},{""scenario"":""UI state updates immediately after a successful check-in"",""given"":""a Subordinate is on the attendance screen with the 'Check-In' button enabled"",""when"":""they successfully perform a check-in action"",""then"":""the 'Check-In' button immediately becomes disabled, and the 'Check-Out' button immediately becomes enabled.""},{""scenario"":""State reset on a new calendar day"",""given"":""a Subordinate had an active check-in on the previous day"",""when"":""they open the app after midnight according to the tenant's timezone"",""then"":""the attendance screen state is reset for the new day, with the 'Check-In' button enabled and 'Check-Out' button disabled.""}]","[""WI-003-01-002: Implement 'Check-Out' Functionality (UI state part)"",""Implement reactive state management (Riverpod) for the attendance screen to control button states based on the user's current attendance status from Firestore""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented for the new logic"",""Integration testing completed successfully against the Firebase Emulator"",""Story deployed and verified in staging environment""]"
"US-031","Administration & Reporting Dashboard","Admin views and filters for attendance records flagged for clock discrepancy","Admin","As an Admin, I want to view and filter for attendance records that are flagged for a significant clock discrepancy between the device and the server, so that I can audit data integrity, investigate potential time manipulation, and identify users with persistent device or connectivity issues.","Enhances data integrity and trust in the attendance system by providing a mechanism to audit and investigate anomalies. Helps detect potential time fraud or recurring technical problems.","Should Have","3","[""US-059"",""US-060""]","[{""scenario"":""Visual identification of a flagged record in the attendance report"",""given"":""an Admin is viewing the main attendance report"",""when"":""the report displays an attendance record that has the 'clock_discrepancy' flag"",""then"":""that record's row must display a clear and distinct visual indicator (e.g., a warning icon).""},{""scenario"":""Admin filters the report to show only records with clock discrepancies"",""given"":""the attendance report contains a mix of records"",""when"":""the Admin selects the 'Clock Discrepancy' option from the report's filter controls"",""then"":""the report view must update to show only the records that contain the 'clock_discrepancy' flag.""}]","[""WI-003-01-005: Implement Clock Discrepancy Flagging"",""Add a 'Clock Discrepancy' filter option to the Admin report UI"",""Update the attendance report list item widget to conditionally display an icon for the 'clock_discrepancy' flag"",""Ensure a composite index exists in Firestore to query for the flag efficiently""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""The required Firestore index is defined in `firestore.indexes.json` and deployed"",""Performance requirements for filtering verified"",""Story deployed and verified in the staging environment""]"
"US-032","Core Attendance & Approval Workflow","Subordinate's attendance is automatically checked out","Subordinate","As a Subordinate, I want the system to automatically check me out at a specific time set by my organization so that my attendance record is complete and accurate even if I forget to manually check out.","Improves data integrity by ensuring all attendance records are closed daily. Reduces administrative overhead by minimizing the need for manual corrections of missed check-outs.","Should Have","5","[""US-028"",""US-069"",""US-070""]","[{""scenario"":""Successful auto-checkout for a user who forgot to check out"",""given"":""An organization has enabled auto-checkout for 17:30 in their timezone"",""when"":""The scheduled auto-checkout function runs"",""then"":""A Subordinate's open attendance record is updated with a 'checkOutTime' of 17:30 and an 'auto-checked-out' flag is added.""},{""scenario"":""Auto-checkout process ignores users who have already checked out"",""given"":""An organization has enabled auto-checkout for 17:30 and a Subordinate manually checked out at 17:15"",""when"":""The scheduled auto-checkout function runs"",""then"":""The Subordinate's attendance record is NOT modified by the function.""}]","[""Implement a scheduled Cloud Function that runs daily"",""The function will query all tenants for their auto-checkout configuration"",""For each enabled tenant, the function will query for open attendance records and update them with the configured check-out time and a flag""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for the Cloud Function implemented with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Required Firestore indexes are defined"",""Story deployed and verified in the staging environment""]"
"US-033","Core Attendance & Approval Workflow","Subordinate marks attendance while offline","Subordinate","As a Subordinate, I want to be able to check in and check out when my device is offline, so that my attendance is captured accurately at the correct time, regardless of my network connectivity.","Ensures data integrity by capturing attendance at the moment it occurs. Increases system reliability and user trust, reducing manual corrections for missed punches due to network issues.","Must Have","5","[""US-028"",""US-029""]","[{""scenario"":""User performs a check-in while the device is offline"",""given"":""The user is logged in and their device has no internet connectivity"",""when"":""The user taps the 'Check-In' button"",""then"":""The app captures the timestamp and GPS, creates a record in the local Firestore cache with an 'isOfflineEntry' flag, and the UI updates to show a 'Checked In' status with a 'pending sync' indicator.""},{""scenario"":""Offline records are automatically synchronized when connectivity is restored"",""given"":""The user has one or more records stored in the local cache"",""when"":""The device regains a stable internet connection"",""then"":""The Firestore SDK automatically syncs the local records to the server, and the 'pending sync' indicator is removed from the UI.""}]","[""WI-003-01-003: Implement Offline Attendance Marking"",""Enable Firestore offline persistence in the Flutter application"",""Update attendance marking logic to add the `isOfflineEntry` flag"",""Update the UI to display a 'pending sync' status for locally cached records""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""E2E integration tests for all offline scenarios are implemented and passing"",""Manual testing confirms correct functionality on target iOS and Android physical devices"",""Story deployed and verified in the staging environment""]"
"US-034","Core Attendance & Approval Workflow","Subordinate's offline attendance syncs automatically","Subordinate","As a Subordinate, I want my offline attendance records to be automatically sent to the server when my device reconnects to the internet, so that my attendance is accurately recorded without any extra effort from my side.","Ensures data integrity and accuracy by capturing all attendance records regardless of network status. Improves user experience by removing the need for manual synchronization.","Must Have","5","[""US-033""]","[{""scenario"":""Successful sync of a single offline check-in record"",""given"":""a user is logged in on the mobile app but the device is offline"",""when"":""the user performs a check-in, and the device later regains a stable internet connection"",""then"":""the Firestore SDK automatically detects the connection and syncs the pending write operation to the server.""},{""scenario"":""Syncing multiple offline records"",""given"":""a user has been offline and has created multiple unsynced attendance records"",""when"":""the device regains a stable internet connection"",""then"":""all pending offline records are automatically sent to the server.""}]","[""WI-003-01-003: Implement Offline Attendance Marking (sync part)"",""Verify and test the default behavior of the Firestore SDK's offline persistence and automatic synchronization""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Manual E2E testing on physical Android and iOS devices confirms sync works as expected in various network conditions"",""Story deployed and verified in staging environment""]"
"US-035","Core Attendance & Approval Workflow","Subordinate is notified of a persistent sync failure","Subordinate","As a Subordinate, I want to be clearly and persistently notified within the app if my offline attendance data has failed to sync for over 24 hours, so that I can take action to resolve the issue and prevent my records from being lost.","Ensures data integrity by preventing the silent loss of offline attendance records. This builds user trust and reduces administrative overhead for manual corrections.","Should Have","5","[""US-033""]","[{""scenario"":""Notification appears for a single stale offline record"",""given"":""a user has created an attendance record while offline, and it has remained unsynced for more than 24 hours"",""when"":""the user opens the application"",""then"":""a persistent, non-dismissible notification banner is displayed at the top of the main screens, indicating a sync failure and providing a 'Retry Sync' button.""},{""scenario"":""Notification correctly handles multiple stale records"",""given"":""a user has multiple offline records that have remained unsynced for more than 24 hours"",""when"":""the user opens the application"",""then"":""a single persistent notification is displayed, and the text correctly reflects the number of failed records (e.g., '3 records failed to sync').""}]","[""WI-003-01-004: Implement Persistent Sync Failure Notification"",""Implement a client-side service to track the age of locally cached records"",""Build a persistent banner UI component managed by a global state provider (Riverpod)""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""E2E integration test for the full offline-notify-retry cycle is implemented and passing"",""User interface reviewed and approved by the design team"",""Story deployed and verified in the staging environment""]"
"US-036","Core Attendance & Approval Workflow","Subordinate manually re-triggers a failed data sync","Subordinate","As a Subordinate, I want to be able to manually trigger a re-sync of my offline attendance records that have failed to upload automatically, so that I can ensure my attendance data is not lost.","Prevents data loss for offline attendance entries, ensures data integrity for reporting, and builds user trust in the system's reliability.","Should Have","3","[""US-035""]","[{""scenario"":""Successful manual re-sync of a failed record"",""given"":""I am a Subordinate user with a record that has a 'Sync Failed' notification"",""when"":""I tap the 'Retry Sync' button while my device has a stable internet connection"",""then"":""The system re-attempts to write the local record to Firestore, and upon success, the 'Sync Failed' notification for that record is removed.""},{""scenario"":""Manual re-sync attempt fails due to no internet connectivity"",""given"":""I am a Subordinate user viewing a 'Sync Failed' notification"",""when"":""I tap the 'Retry Sync' button while my device is still offline"",""then"":""The system immediately displays a clear error message (e.g., 'Sync failed. Please check your internet connection and try again.') and the 'Sync Failed' notification remains.""}]","[""WI-003-01-004: Implement Persistent Sync Failure Notification (Retry part)"",""Implement the logic for the 'Retry Sync' button to re-trigger the data submission"",""Handle success and error states for the manual retry attempt""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Code reviewed and approved"",""E2E integration test for the manual sync happy path and failure path is passing"",""User interface reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-037","Core Attendance & Approval Workflow","Supervisor views pending attendance records from subordinates","Supervisor","As a Supervisor, I want to see a clear and filterable list of all attendance records from my direct subordinates that are awaiting my review, so that I can efficiently manage my team's attendance, ensure accuracy, and take timely action on pending approvals.","Enables the core attendance approval workflow, ensuring that employee work hours are verified in a timely manner. This is a critical step for maintaining data integrity and accountability.","Must Have","5","[""US-015"",""US-028""]","[{""scenario"":""Supervisor views a list of pending records"",""given"":""a Supervisor is logged in and has at least one direct subordinate with an attendance record in 'pending' status"",""when"":""the Supervisor navigates to their main dashboard"",""then"":""a list of all 'pending' attendance records from their direct subordinates is displayed.""},{""scenario"":""List only shows records from direct subordinates"",""given"":""a Supervisor is logged in"",""when"":""the system fetches attendance records for their dashboard"",""then"":""the query must filter records where the `supervisorId` field matches the logged-in Supervisor's `userId`.""},{""scenario"":""Supervisor has no pending records to review"",""given"":""a Supervisor is logged in and none of their subordinates have any 'pending' records"",""when"":""the Supervisor navigates to the attendance review screen"",""then"":""a user-friendly message is displayed, such as 'No pending records to review.'""}]","[""WI-003-02-001: Develop Supervisor Dashboard for Pending Approvals"",""Build the Supervisor dashboard UI in Flutter to display a list"",""Implement a real-time Firestore query to fetch pending records for the Supervisor's subordinates"",""Write and test Firestore Security Rules to enforce data access boundaries""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Firestore Security Rules for this feature are written and tested"",""Required Firestore composite index is defined in `firestore.indexes.json`"",""Performance requirements (load time) verified"",""Story deployed and verified in the staging environment""]"
"US-038","Core Attendance & Approval Workflow","Supervisor identifies flagged attendance records","Supervisor","As a Supervisor, I want to see clear visual indicators on attendance records that have been flagged for exceptions (like offline entry or clock discrepancy) in my approval dashboard, so that I can quickly identify records that require closer scrutiny.","Improves the efficiency and accuracy of the attendance approval process by focusing the Supervisor's attention on records that are anomalous or require special consideration.","Should Have","2","[""US-037"",""US-033""]","[{""scenario"":""Display indicator for offline entry"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'isOfflineEntry' flag"",""then"":""the record must display a distinct visual indicator (e.g., an icon or chip) representing an offline entry.""},{""scenario"":""Display indicator for clock discrepancy"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'clock_discrepancy' flag"",""then"":""the record must display a distinct visual indicator representing a clock discrepancy.""},{""scenario"":""Display indicators for a record with multiple flags"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record has both 'isOfflineEntry' and 'clock_discrepancy' flags"",""then"":""the record must display a separate visual indicator for each flag.""}]","[""WI-003-02-004: Implement Visual Indicators for Flagged Records"",""Update the attendance list item widget in the Supervisor's dashboard"",""Implement logic to conditionally render icons/tags based on the content of the `flags` array in the attendance record data""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved"",""Unit and widget tests implemented for the flag display logic"",""User interface reviewed and approved by the Product Owner/Designer"",""Accessibility requirements validated with screen readers and contrast checkers"",""Story deployed and verified in the staging environment""]"
"US-039","Core Attendance & Approval Workflow","Supervisor approves a single attendance record","Supervisor","As a Supervisor, I want to approve a single pending attendance record for one of my subordinates so that I can validate their work hours and move the record to an 'approved' state for accurate reporting.","Enables the core attendance validation workflow, ensures data integrity for reporting, and provides accountability by formally confirming subordinate work hours.","Must Have","2","[""US-037""]","[{""scenario"":""Successful approval of a pending record"",""given"":""I am a Supervisor viewing the 'Pending Approvals' list"",""when"":""I tap the 'Approve' button for a specific attendance record"",""then"":""The system updates the record's status from 'pending' to 'approved' in the database, a success message is displayed, and the record is removed from my 'Pending Approvals' list.""},{""scenario"":""Record was already processed by another user/process"",""given"":""I am a Supervisor viewing a 'pending' record on my screen, but an Admin has already approved it"",""when"":""I tap the 'Approve' button"",""then"":""The system prevents the update and displays an informative message, such as 'This record has already been processed.' The record is then removed from my list.""}]","[""WI-003-02-002: Implement Single Record Approve/Reject Actions (Approve part)"",""Add an 'Approve' button to each item in the pending list"",""Implement logic to update the Firestore document's status to 'approved'"",""Update Firestore Security Rules to enforce that only the assigned supervisor can approve""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Firestore Security Rules for this action are written and tested"",""Integration testing with the Firebase Emulator completed successfully"",""Story deployed and verified in the staging environment""]"
"US-040","Core Attendance & Approval Workflow","Supervisor rejects a single attendance record with a reason","Supervisor","As a Supervisor, I want to reject a subordinate's attendance record and be required to provide a reason, so that I can maintain accurate team records, provide clear feedback to my subordinate for correction, and ensure the rejection is documented for auditing purposes.","Ensures data accuracy in attendance records, provides a transparent and auditable approval workflow, and facilitates clear communication between supervisors and subordinates.","Must Have","2","[""US-037""]","[{""scenario"":""Supervisor successfully rejects a record with a valid reason"",""given"":""A Supervisor is viewing a 'pending' attendance record"",""when"":""The Supervisor selects 'Reject', enters a reason, and confirms"",""then"":""The attendance record's status in Firestore is updated to 'rejected', and the `rejectionReason` field contains the text entered by the supervisor.""},{""scenario"":""Attempting to reject without providing a reason"",""given"":""A Supervisor has initiated the rejection process"",""when"":""The Supervisor attempts to confirm the rejection without entering any text in the reason field"",""then"":""The system displays a validation error message 'A reason is required for rejection' and the action is blocked.""}]","[""WI-003-02-002: Implement Single Record Approve/Reject Actions (Reject part)"",""Add a 'Reject' button to each item in the pending list"",""Build a modal dialog to capture the mandatory rejection reason"",""Implement logic to update the Firestore document's status and reason"",""Update Firestore Security Rules for the reject action""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented for the rejection dialog and its logic"",""Firestore Security Rules for this action are written and tested"",""Story deployed and verified in the staging environment""]"
"US-041","Core Attendance & Approval Workflow","Supervisor bulk-approves multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records from my subordinates and approve them all with a single action, so that I can efficiently manage my team's attendance and save significant time.","Reduces administrative overhead for managers by streamlining a repetitive task, leading to faster attendance data processing and increased operational efficiency.","Should Have","5","[""US-037"",""US-039""]","[{""scenario"":""Successful bulk approval of multiple records"",""given"":""A Supervisor is viewing the 'Pending Approvals' list"",""when"":""The Supervisor selects three pending records and clicks the 'Approve Selected' button"",""then"":""The system initiates a batch update, all three records are updated to 'approved' status in the database, and they are removed from the UI list.""},{""scenario"":""UI state for selection controls"",""given"":""A Supervisor is viewing the 'Pending Approvals' list"",""when"":""No records are selected, the 'Approve Selected' button is disabled. When at least one record is selected, the button becomes enabled."",""then"":""The UI state correctly reflects the selection and enables/disables the action button.""}]","[""WI-003-02-003: Implement Bulk Approve/Reject Functionality (Approve part)"",""Enhance the Supervisor dashboard UI to support multi-selection"",""Implement a callable Cloud Function to perform the bulk update as an atomic transaction using a `WriteBatch`""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for both frontend logic and the Cloud Function"",""Integration testing between the client and the Cloud Function completed successfully"",""Story deployed and verified in the staging environment""]"
"US-042","Core Attendance & Approval Workflow","Supervisor bulk-rejects multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records and reject them all in a single action with a common reason, so that I can efficiently manage my team's attendance approvals.","Improves managerial efficiency by reducing the time required to handle multiple similar attendance issues. Ensures consistent reasoning is applied to a batch of rejected records.","Could Have","5","[""US-037"",""US-040""]","[{""scenario"":""Supervisor selects multiple records, provides a reason, and successfully rejects them"",""given"":""a Supervisor is viewing their dashboard with a list of 'pending' records"",""when"":""the Supervisor selects two or more records, clicks 'Reject Selected', enters a valid reason, and confirms"",""then"":""the system atomically updates the status of all selected records to 'rejected', the reason is stored in each record, and the records are removed from the pending UI list.""},{""scenario"":""Supervisor attempts to reject records without providing a reason"",""given"":""a Supervisor has selected multiple pending records and opened the rejection modal"",""when"":""the Supervisor attempts to confirm without entering a reason"",""then"":""the system prevents the action and shows a validation error 'A reason is required'.""}]","[""WI-003-02-003: Implement Bulk Approve/Reject Functionality (Reject part)"",""Add 'Reject Selected' button and logic to the multi-select UI"",""Update the callable Cloud Function to handle bulk rejection, applying the same reason to all records in the batch""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for the Cloud Function and UI components"",""Integration testing with the Firebase Emulator completed successfully"",""Story deployed and verified in the staging environment""]"
"US-043","Core Attendance & Approval Workflow","Subordinate views the reason for a rejected record","Subordinate","As a Subordinate, I want to see the specific reason my Supervisor provided when they rejected my attendance record, so that I can understand the issue and take appropriate action.","Increases transparency in the approval process, reduces confusion and follow-up questions to supervisors, and empowers employees to correct their own data.","Must Have","1","[""US-040""]","[{""scenario"":""Display of rejection reason for a rejected record"",""given"":""I am a Subordinate logged in and I have an attendance record that has been rejected"",""when"":""I navigate to my attendance history and view the details of the rejected record"",""then"":""The record's status is displayed as 'Rejected' and a section is visible containing the exact text my Supervisor entered as the reason.""},{""scenario"":""Visual distinction of rejected records in the list view"",""given"":""I am a Subordinate viewing my list of attendance records"",""when"":""The list contains records with various statuses"",""then"":""The rejected records must be visually distinct from the others, for example, by using a red color indicator or an icon.""}]","[""Update the Subordinate's attendance history list item widget to show a distinct style for 'rejected' status"",""Update the Subordinate's attendance detail screen to display the `rejectionReason` field from the Firestore document""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented with >= 80% coverage for new code"",""User interface reviewed and approved"",""Story deployed and verified in staging environment""]"
"US-044","Core Attendance & Approval Workflow","Pending approval is escalated to the next-level supervisor","System","As an Admin, I want pending attendance approvals to automatically escalate to the next supervisor in the hierarchy after a configurable period, so that approval workflows are not blocked by unavailable or unresponsive managers.","Ensures business continuity by preventing bottlenecks in the approval workflow. Guarantees timely processing of attendance records, improving operational efficiency.","Could Have","5","[""US-071"",""US-037"",""US-051""]","[{""scenario"":""A pending record is escalated to the next available supervisor"",""given"":""a tenant has configured the 'approval escalation period' to 3 days, and a Subordinate's record has been 'pending' for 4 days"",""when"":""the daily scheduled escalation Cloud Function is triggered"",""then"":""the record's `supervisorId` field is updated to the direct Supervisor's own supervisor, and an audit log entry is created.""},{""scenario"":""The assigned supervisor is at the top of the hierarchy"",""given"":""a record is overdue for approval, and the assigned Supervisor has no supervisor themselves"",""when"":""the scheduled escalation function runs"",""then"":""the record's `supervisorId` remains unchanged, a flag `escalation_failed_no_supervisor` is added, and a high-severity log is written to Cloud Logging.""},{""scenario"":""The next-level supervisor's account is deactivated"",""given"":""a record is overdue and the direct supervisor's manager is deactivated"",""when"":""the scheduled escalation function runs"",""then"":""the system skips the deactivated manager and escalates the record to the next active supervisor in the chain.""}]","[""Implement a daily scheduled Cloud Function"",""The function will query for overdue pending records based on tenant configuration"",""Implement logic to traverse the user hierarchy to find the next active supervisor"",""Update the attendance record and create an audit log entry in a transaction""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for the Cloud Function logic implemented with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Story deployed and verified in staging environment""]"
"US-045","Core Attendance & Approval Workflow","Subordinate requests a correction to an attendance record","Subordinate","As a Subordinate, I want to submit a request to correct the check-in or check-out time on my attendance record and provide a mandatory reason for the change, so that I can fix any mistakes I've made and ensure my work hours are accurately reflected for my supervisor's review.","Ensures data integrity by providing a formal, auditable workflow for correcting attendance errors. This enhances accountability and streamlines the process for both employees and supervisors.","Must Have","5","[""US-028"",""US-039""]","[{""scenario"":""Submitting a valid correction request"",""given"":""I am a logged-in Subordinate viewing my attendance history"",""when"":""I select a record, enter a valid new time, provide a justification of at least 20 characters, and tap 'Submit Request'"",""then"":""The attendance record's status in Firestore is updated to 'correction_pending', the proposed new times and justification are stored, and my supervisor is notified.""},{""scenario"":""Submitting a request with no justification"",""given"":""I am on the attendance correction form"",""when"":""I enter a new check-in time but leave the justification field blank and tap 'Submit Request'"",""then"":""The submission is blocked, and an error message 'Justification is required and must be at least 20 characters.' is displayed.""}]","[""WI-003-03-001: Implement Subordinate's Correction Request Form"",""Build the correction request UI in the Flutter mobile app"",""Implement logic to update the attendance record in Firestore with the proposed changes and a 'correction_pending' status"",""Update Firestore security rules to allow users to request corrections on their own records""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented with >80% coverage"",""Integration testing for Firestore writes and security rules completed successfully"",""Story deployed and verified in the staging environment""]"
"US-046","Core Attendance & Approval Workflow","Supervisor reviews an attendance correction request","Supervisor","As a Supervisor, I want to view a clear, detailed summary of an attendance correction request, including the original times, the proposed new times, and the subordinate's justification, so that I can make an informed decision.","Enables informed and auditable decisions on attendance corrections, which maintains data integrity and supports accurate record-keeping.","Must Have","3","[""US-045"",""US-037""]","[{""scenario"":""Correction request detail view displays all required information"",""given"":""I am viewing the details of a correction request"",""when"":""the view loads"",""then"":""the following information must be clearly displayed: Subordinate's name, date, original times, requested new times, and the full text of the justification.""},{""scenario"":""Proposed changes are visually highlighted"",""given"":""I am viewing the details of a correction request where only the check-in time was changed"",""when"":""the view is displayed"",""then"":""the 'Requested New Check-In Time' field should be visually distinct (e.g., different color, bold font).""}]","[""Update the Supervisor's dashboard to list items with 'correction_pending' status"",""Build a detail view (modal or screen) to display all information for a correction request"",""Implement UI logic to highlight the fields that have changed""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented for new code"",""Firestore Security Rules for this feature are written and tested"",""User interface reviewed and approved by the Product Owner/UX designer"",""Story deployed and verified in the staging environment""]"
"US-047","Core Attendance & Approval Workflow","Supervisor approves an attendance correction request","Supervisor","As a Supervisor, I want to approve a subordinate's attendance correction request, so that I can ensure the accuracy of their attendance records and maintain a complete, auditable history of all changes.","Ensures data integrity for attendance records. Provides a clear, auditable trail of all data modifications for compliance and dispute resolution.","Must Have","5","[""US-045"",""US-046""]","[{""scenario"":""Supervisor successfully approves a correction request"",""given"":""A Supervisor is viewing a pending attendance correction request"",""when"":""The Supervisor clicks the 'Approve' button"",""then"":""The system executes an atomic transaction where the record's status is updated to 'approved', the times are updated with the corrected values, and a 'manually-corrected' flag is added.""},{""scenario"":""The approval action is logged correctly"",""given"":""A Supervisor is about to approve a correction request"",""when"":""The approval is successfully processed"",""then"":""A new document is created in the 'auditLog' collection with details of the change, including 'oldValue', 'newValue', and 'justification'.""}]","[""WI-003-03-002: Implement Supervisor's Correction Approval/Rejection (Approve part)"",""Implement a callable Cloud Function to handle the approval"",""The function must use a Firestore Transaction to atomically update the attendance record and create the `auditLog` entry""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for the Cloud Function"",""Integration testing completed successfully between the client and backend"",""Firestore Security Rules written and tested"",""Story deployed and verified in staging environment""]"
"US-048","Core Attendance & Approval Workflow","Supervisor rejects an attendance correction request","Supervisor","As a Supervisor, I want to reject an invalid attendance correction request from my subordinate and provide a reason, so that I can maintain the accuracy of attendance records.","Ensures the integrity of attendance data by allowing supervisors to prevent incorrect modifications. It also provides a clear audit trail for managerial decisions.","Must Have","5","[""US-045"",""US-046""]","[{""scenario"":""Supervisor successfully rejects a correction request with a reason"",""given"":""I am a Supervisor viewing a 'correction_pending' record"",""when"":""I tap 'Reject', enter a valid reason, and confirm"",""then"":""The record's status reverts to its state before the correction was requested (e.g., 'approved'), and an audit log entry is created detailing the rejection and reason.""},{""scenario"":""Supervisor attempts to reject a request without providing a reason"",""given"":""I am a Supervisor viewing the rejection confirmation dialog"",""when"":""I attempt to confirm without entering any text in the mandatory reason field"",""then"":""The confirmation button is disabled or an error message is displayed, and the rejection is not processed.""}]","[""WI-003-03-002: Implement Supervisor's Correction Approval/Rejection (Reject part)"",""Build the rejection modal UI to capture a mandatory reason"",""Implement a callable Cloud Function to handle the rejection logic, including reverting status and creating an audit log entry""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for the Cloud Function logic achieve >80% coverage"",""Integration tests confirming the end-to-end flow are passing"",""Security rules have been written and tested to protect the action"",""Story deployed and successfully verified in the staging environment""]"
"US-049","Core Attendance & Approval Workflow","Subordinate is notified of a correction request's outcome","Subordinate","As a Subordinate, I want to receive a push notification on my mobile device when my attendance correction request is either approved or rejected, so that I am immediately informed of the outcome without having to manually check the app.","Improves user experience by providing timely, proactive feedback. Closes the communication loop for the correction workflow, reducing user uncertainty and the need for manual follow-ups.","Should Have","5","[""US-047"",""US-048""]","[{""scenario"":""Notification for an approved correction request"",""given"":""a Subordinate has submitted an attendance correction request"",""when"":""their Supervisor approves the correction request"",""then"":""the Subordinate's device receives a push notification with the body 'Your attendance correction for [Date] has been approved.'""},{""scenario"":""Tapping notification deep-links into the app"",""given"":""the Subordinate has received a notification for a correction request outcome"",""when"":""the Subordinate taps on the notification"",""then"":""the mobile application opens and navigates directly to the details screen for the specific attendance record.""}]","[""Implement a Firestore `onUpdate` trigger Cloud Function for the attendance collection"",""The function will detect a status change from 'correction_pending', identify the user, and send a push notification via FCM"",""Implement deep linking in the Flutter app to handle notification taps""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Cloud Function code is unit tested with Jest and deployed"",""Flutter client code for handling notifications and deep linking is implemented and reviewed"",""E2E tests confirming the entire flow from supervisor action to subordinate notification are passing"",""Story deployed and verified in the staging environment""]"
"US-050","Administration & Reporting Dashboard","Admin directly edits an attendance record with mandatory, auditable justification","Admin","As an Admin, I want to directly edit any employee's attendance record and provide a mandatory justification for the change, so that I can correct data inaccuracies or exceptions efficiently and maintain a fully auditable trail.","Ensures data accuracy for reporting and provides a mechanism for authorized personnel to correct errors. Creates a transparent and auditable trail for all high-privilege data modifications.","Should Have","5","[""US-059""]","[{""scenario"":""Admin successfully edits an attendance record"",""given"":""an Admin is viewing an attendance report"",""when"":""the Admin clicks 'Edit' on a record, modifies the check-out time, provides a justification (20+ characters), and clicks 'Save'"",""then"":""the system updates the attendance record in Firestore, adds a 'manually-corrected' flag, and creates a detailed, immutable entry in the `auditLog`.""},{""scenario"":""Admin attempts to save an edit without providing a justification"",""given"":""an Admin has opened the edit attendance modal and made a change"",""when"":""the Admin attempts to save with the justification field empty"",""then"":""the save operation is prevented and an error message is displayed indicating that justification is mandatory.""}]","[""WI-004-03-003: Implement Admin Direct Data Edit with Justification"",""Build the edit modal UI in the Admin dashboard's report view"",""Implement a callable Cloud Function to perform a Firestore Transaction that atomically updates the attendance record and creates the audit log entry""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for UI logic and Cloud Function"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements validated"",""Story deployed and verified in the staging environment""]"
"US-051","Administration & Reporting Dashboard","Admin views the audit log of data changes","Admin","As an Admin, I want to view a filterable and immutable audit log of all critical system actions, so that I can ensure compliance, maintain accountability for data changes, and troubleshoot issues effectively.","Provides a trustworthy, unalterable record for internal/external audits, enhances accountability by tracking all critical data modifications, and aids in troubleshooting.","Must Have","8","[""US-050"",""US-047""]","[{""scenario"":""Admin views the audit log with default settings"",""given"":""I am an Admin logged into the web dashboard"",""when"":""I navigate to the 'Audit Log' section"",""then"":""I see a paginated list of audit log entries displayed in reverse chronological order.""},{""scenario"":""Admin filters the audit log by date range"",""given"":""I am viewing the audit log report"",""when"":""I select a start date and an end date and apply the filter"",""then"":""the list of entries updates to show only records with a timestamp within the selected date range.""},{""scenario"":""Admin combines multiple filters"",""given"":""I am viewing the audit log report"",""when"":""I apply a filter for a specific Actor AND a specific date range"",""then"":""the list of entries updates to show only actions performed by that actor within that date range.""}]","[""WI-004-02-004: Implement Audit Log Report"",""Build the audit log report UI in the Admin dashboard with filtering and pagination controls"",""Implement efficient, indexed Firestore queries to fetch and filter audit log data"",""Write Firestore Security Rules to make the `auditLog` collection immutable (create-only)""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Firestore Security Rules for immutability and access control are implemented and tested"",""Required Firestore composite indexes are defined in `firestore.indexes.json` and deployed"",""Performance requirements for loading and filtering are verified"",""Story deployed and verified in the staging environment""]"
"US-052","Integrations & Event Management","Supervisor creates a new event","Supervisor","As a Supervisor, I want to create a new event with a title, description, start time, and end time, so that I can formally schedule and communicate activities like meetings, training sessions, or field visits to my team members.","Enables formal scheduling of team activities within the application, improving team coordination and providing context for attendance records. This centralizes communication and reduces reliance on external tools.","Should Have","3","[""US-021""]","[{""scenario"":""Supervisor successfully creates a single, non-recurring event"",""given"":""I am a Supervisor on the 'Create Event' screen"",""when"":""I enter a valid title, description, future start time, and an end time after the start time, and tap 'Save'"",""then"":""A success notification is displayed, and a new document is created in the `/events` collection in Firestore with the provided details.""},{""scenario"":""Attempting to save an event where the end time is before the start time"",""given"":""I am a Supervisor on the 'Create Event' screen"",""when"":""I select an 'End Time' that is chronologically earlier than the 'Start Time' and tap 'Save'"",""then"":""A validation error message, 'End time must be after start time', is displayed, and the event is not saved.""}]","[""WI-005-01-001: Develop Event Creation and Assignment UI (Create part)"",""Build the 'Create Event' form UI in the Flutter mobile app"",""Implement logic to write a new event document to Firestore"",""Write Firestore Security Rules to restrict event creation to Supervisors and Admins""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved"",""Unit and widget tests implemented with >= 80% code coverage"",""Firestore Security Rules for event creation are written and tested"",""Feature is manually verified on both iOS and Android"",""Story deployed and verified in the staging environment""]"
"US-053","Integrations & Event Management","Supervisor creates a recurring event","Supervisor","As a Supervisor, I want to define recurrence rules (daily, weekly, monthly) when creating an event, so that I can efficiently schedule regular activities like team meetings or site visits without manual repetition.","Reduces administrative time spent on scheduling repetitive tasks, ensures consistency in team schedules, and minimizes the risk of human error in creating regular events.","Could Have","5","[""US-052""]","[{""scenario"":""Supervisor creates a weekly recurring event for specific days"",""given"":""A Supervisor is on the 'Create Event' screen"",""when"":""the Supervisor enables 'Repeat', selects 'Weekly', checks 'Tuesday' and 'Thursday', and sets an end date four weeks away"",""then"":""the system creates 8 individual event instances, one for each Tuesday and Thursday within the four-week period.""},{""scenario"":""Attempting to create a recurring event series longer than the allowed maximum"",""given"":""A Supervisor is creating a recurring event"",""when"":""they set an 'End Date' that is more than 1 year after the 'Start Date'"",""then"":""the system displays a validation error message 'Recurring events cannot span more than one year' and prevents saving.""}]","[""Enhance the 'Create Event' UI with recurrence rule options"",""Implement a Firestore `onCreate` trigger Cloud Function to process the recurrence rule and generate the individual event instances asynchronously""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for the Cloud Function's date logic implemented with >80% coverage"",""Integration testing of the end-to-end flow completed successfully"",""Story deployed and verified in the staging environment""]"
"US-054","Integrations & Event Management","Supervisor assigns an event to specific individuals","Supervisor","As a Supervisor, I want to select one or more specific individuals from my team(s) when creating or editing an event, so that I can accurately assign tasks to only the relevant team members.","Enables targeted task management and precise scheduling, improving operational efficiency and ensuring clear communication.","Should Have","5","[""US-052""]","[{""scenario"":""Supervisor assigns a new event to multiple individuals"",""given"":""A Supervisor is on the 'Create Event' screen"",""when"":""The Supervisor selects two specific subordinates from the assignment list and saves the event"",""then"":""A new event document is created, and its 'assignedUserIds' array field contains the unique IDs of the two selected subordinates.""},{""scenario"":""The list of assignable users is correctly scoped"",""given"":""A Supervisor is on the user assignment screen for an event"",""when"":""The application fetches the list of users to display"",""then"":""The list must only contain users for whom the 'supervisorId' field matches the current Supervisor's user ID.""}]","[""WI-005-01-001: Develop Event Creation and Assignment UI (Assignment part)"",""Add a multi-select user list to the event creation form"",""Implement a performant and secure query to fetch the Supervisor's direct subordinates"",""Update the event creation logic to populate the `assignedUserIds` array""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing with Firestore Emulator completed successfully"",""Firestore Security Rules for this feature are implemented and tested"",""Story deployed and verified in the staging environment""]"
"US-055","Integrations & Event Management","Supervisor assigns an event to an entire team","Supervisor","As a Supervisor, I want to assign an event to one or more of my teams in a single action, so that I can efficiently schedule activities for entire groups without having to select each team member individually.","Increases operational efficiency for managers by reducing manual data entry and minimizing the risk of human error in event assignments.","Should Have","5","[""US-052"",""US-015""]","[{""scenario"":""Supervisor assigns a new event to a single team"",""given"":""a Supervisor is on the 'Create Event' screen"",""when"":""the Supervisor selects one team they manage from the 'Assign to Teams' list and saves the event"",""then"":""a new event document is created in Firestore with the selected team's ID in the 'assignedTeamIds' array.""},{""scenario"":""Supervisor only sees teams they manage"",""given"":""a Supervisor is logged in and another team exists which they do not manage"",""when"":""the Supervisor views the 'Assign to Teams' list on the event creation screen"",""then"":""the other team is not visible in the list of options.""}]","[""WI-005-01-001: Develop Event Creation and Assignment UI (Team Assignment part)"",""Add a multi-select team list to the event creation form"",""Implement a secure query to fetch only the teams managed by the current Supervisor"",""Update the event creation logic to populate the `assignedTeamIds` array""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Security requirements validated via manual and automated tests"",""Supervisor Guide documentation is updated to include this feature"",""Story deployed and verified in the staging environment""]"
"US-056","Integrations & Event Management","Subordinate receives a push notification for a new event","Subordinate","As a Subordinate, I want to receive a real-time push notification on my mobile device whenever a new event is assigned to me, so that I am immediately aware of changes to my schedule.","Improves timely communication of work assignments, reduces the likelihood of missed events, and increases user engagement by providing proactive updates.","Should Have","5","[""US-054"",""US-055""]","[{""scenario"":""Notification for direct event assignment"",""given"":""a Subordinate is logged in and has granted notification permissions"",""when"":""a Supervisor creates a new event and assigns it directly to that Subordinate"",""then"":""the Subordinate's device receives a push notification containing the event title within 30 seconds.""},{""scenario"":""Tapping notification opens the event calendar"",""given"":""the Subordinate has received a new event notification"",""when"":""the Subordinate taps the notification"",""then"":""the application launches and navigates directly to the user's event calendar view.""}]","[""WI-005-01-003: Implement Push Notifications for New Events"",""Implement a Firestore `onCreate` trigger Cloud Function for the `events` collection"",""The function will resolve all assigned users (direct and via teams) and send a push notification via FCM"",""Configure the Flutter client to receive FCM messages and handle deep linking""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Cloud Function code is peer-reviewed, merged, and deployed"",""Manual E2E tests confirm correct behavior for all scenarios"",""The user's FCM token is successfully stored/updated in their Firestore document upon login"",""Story deployed and verified in the staging environment""]"
"US-057","Integrations & Event Management","Subordinate views their event calendar","Subordinate","As a Subordinate, I want to view a calendar that displays all events I am assigned to, either individually or as part of a team, so that I can clearly see my work schedule and plan my activities.","Improves operational efficiency by providing employees with clear, self-service access to their work schedules. Reduces administrative overhead for Supervisors.","Should Have","5","[""US-054"",""US-055""]","[{""scenario"":""Default calendar view shows events for the current month"",""given"":""the Subordinate is logged into the mobile application"",""when"":""they navigate to the 'Calendar' screen"",""then"":""a calendar is displayed in a month view, and days that contain one or more events are visually distinguished.""},{""scenario"":""Calendar displays both individually-assigned and team-assigned events"",""given"":""the Subordinate is assigned to an individual event AND is a member of a team assigned to a team event"",""when"":""they view their calendar for the relevant month"",""then"":""visual indicators for both events are present on their respective days.""},{""scenario"":""User views event details"",""given"":""the user is viewing the calendar"",""when"":""they tap on an event indicator or the day itself"",""then"":""a read-only view of the event's details is displayed.""}]","[""WI-005-01-002: Implement Subordinate's Calendar View"",""Integrate a Flutter calendar UI library"",""Implement a complex Firestore query to fetch all events assigned to the user directly or via their team memberships"",""Build the UI to display events and their details""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved"",""Performance requirements (load times) verified on a physical test device"",""Firestore Security Rules for event data are written and tested"",""Story deployed and verified in the staging environment""]"
"US-058","Integrations & Event Management","Subordinate links attendance to an event","Subordinate","As a Subordinate, I want to select from a list of my assigned events for the day when I check in, so that my attendance record accurately reflects the specific activity I am starting to work on.","Enriches attendance data by adding context, enabling better reporting on time spent on specific tasks. This improves resource management and provides supervisors with greater visibility into team activities.","Could Have","5","[""US-028"",""US-057""]","[{""scenario"":""User with assigned events for the day links one during check-in"",""given"":""I am a logged-in Subordinate and have events assigned for the current day"",""when"":""I initiate the check-in process"",""then"":""I am presented with a list of my events for the day, I select one, and upon confirming my check-in, a new attendance record is created with the `eventId` of the selected event.""},{""scenario"":""User with no assigned events for the day performs a check-in"",""given"":""I am a logged-in Subordinate and have no events assigned for the current day"",""when"":""I initiate the check-in process"",""then"":""the system bypasses the event selection step and proceeds directly to check-in confirmation, creating an attendance record with a null `eventId`.""}]","[""Modify the check-in workflow in the Flutter app"",""Implement logic to query for the user's events for the current day before completing the check-in"",""Build a UI for event selection if events are found"",""Update the attendance creation logic to include the optional `eventId`""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved"",""E2E integration testing completed successfully for online and offline scenarios"",""Performance of the event query is verified"",""Story deployed and verified in the staging environment""]"
"US-059","Administration & Reporting Dashboard","Admin views summary attendance reports on the web dashboard","Admin","As an Admin, I want to view aggregated summary reports of attendance for daily, weekly, and monthly periods on my web dashboard, so that I can quickly assess workforce attendance trends and monitor overall presence.","Provides immediate, actionable insights into workforce attendance, enabling efficient monitoring, trend analysis, and proactive management.","Must Have","8","[""US-021"",""US-028"",""US-069""]","[{""scenario"":""Viewing a specific daily summary report"",""given"":""I am viewing the reports page"",""when"":""I select the 'Daily Summary' view and choose a specific past date"",""then"":""the dashboard updates to show the total number of active users, the number of users who checked in, the number of absent users, and the attendance percentage for that selected date.""},{""scenario"":""Viewing a weekly summary report"",""given"":""I am viewing the reports page"",""when"":""I select the 'Weekly Summary' view and choose a specific week"",""then"":""the dashboard displays the average daily attendance percentage for that week and a trend chart visualizing the daily attendance percentage for each day.""}]","[""WI-004-02-002: Implement Attendance Summary Report"",""Implement a server-side aggregation strategy (e.g., daily scheduled Cloud Function) to pre-calculate summary data for performance"",""Build the reporting UI in Flutter for Web with tabs for Daily/Weekly/Monthly views"",""Integrate a charting library to visualize trends""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Performance requirements verified against a large, seeded dataset"",""Security rules are in place and tested to ensure tenant data isolation"",""Story deployed and verified in the staging environment""]"
"US-060","Administration & Reporting Dashboard","Admin filters attendance reports by multiple criteria","Admin","As an Admin, I want to apply filters for date range, user, team, and attendance status on the reporting dashboard, so that I can efficiently narrow down the data to find specific information.","Enables efficient and targeted data analysis, saving time, improving decision-making, and supporting audit/compliance tasks.","Must Have","5","[""US-059""]","[{""scenario"":""Filter by Date Range"",""given"":""the Admin is viewing an attendance report"",""when"":""the Admin selects a start date and an end date"",""then"":""the report data refreshes to display only attendance records with a 'checkInTime' within the selected date range.""},{""scenario"":""Combine multiple filters (Date, Team, and Status)"",""given"":""the Admin is viewing an attendance report"",""when"":""the Admin selects a date range, a specific team, AND the 'rejected' status"",""then"":""the report data refreshes to display only records that match ALL applied criteria.""}]","[""WI-004-02-001: Develop Core Reporting UI with Filtering"",""Build reusable filter components in Flutter for Web for date range, user, team, and status"",""Implement state management (Riverpod) to hold filter state"",""Construct dynamic, multi-conditional Firestore queries based on the active filters""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""All required Firestore composite indexes are defined in `firestore.indexes.json` and deployed"",""Performance requirements verified against a large, seeded dataset"",""Story deployed and verified in the staging environment""]"
"US-061","Administration & Reporting Dashboard","Admin views a late arrival / early departure report","Admin","As an Admin, I want to view a 'Late Arrival / Early Departure' report, so that I can efficiently monitor employee punctuality and identify attendance patterns.","Provides actionable insights into workforce punctuality, enabling data-driven management decisions and supporting HR processes like performance reviews.","Should Have","5","[""US-072"",""US-069"",""US-060""]","[{""scenario"":""Correctly Identifying Late Arrivals"",""given"":""the tenant's working hours are set from 09:00 to 17:00 and a user checks in at 09:15"",""when"":""I view the report for the corresponding date"",""then"":""the report must list this user's record as a late arrival with a deviation of '15 minutes late'.""},{""scenario"":""No Working Hours Configured"",""given"":""the default working hours have NOT been configured for my tenant"",""when"":""I navigate to the 'Late Arrival / Early Departure Report'"",""then"":""the system must display an informative message prompting me to configure working hours, and the report is not rendered.""}]","[""Build the Late Arrival / Early Departure report UI in the Admin dashboard"",""Implement logic (client-side or callable Cloud Function) to query attendance records and compare them against the tenant's configured working hours"",""Handle timezone-aware calculations correctly""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""E2E integration testing completed successfully in the emulator environment"",""Security rules updated and tested to restrict access to Admins"",""Story deployed and verified in the staging environment""]"
"US-062","Administration & Reporting Dashboard","Admin views an exception report to identify and manage anomalous attendance records","Admin","As an Admin, I want to view a dedicated exception report so that I can efficiently identify, review, and address attendance records that deviate from the standard process.","Improves administrative efficiency by consolidating problematic records into a single view. Enhances data integrity by enabling proactive identification and correction of errors.","Should Have","5","[""US-031"",""US-032"",""US-033"",""US-050"",""US-060""]","[{""scenario"":""Viewing the exception report with all exception types"",""given"":""I am an Admin and there are attendance records with various exception flags"",""when"":""I navigate to the 'Exception Report'"",""then"":""the system displays a list of all attendance records that have at least one of the following flags: 'isOfflineEntry', 'auto-checked-out', 'manually-corrected', or 'clock_discrepancy'.""},{""scenario"":""Filtering the report by a single exception type"",""given"":""I am viewing the Exception Report"",""when"":""I use the filter control to select only 'Missed Check-out' ('auto-checked-out' flag)"",""then"":""the report view updates to show only the attendance records that have the 'auto-checked-out' flag.""}]","[""WI-004-02-003: Implement Exception Report"",""Build the Exception Report UI in the Admin dashboard"",""Implement a Firestore query using `array-contains-any` on the `flags` field, combined with other filters"",""Define and deploy the necessary composite index in `firestore.indexes.json`""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""E2E tests for filtering and viewing the report are passing"",""Required Firestore indexes are defined in `firestore.indexes.json` and deployed"",""Story deployed and verified in the staging environment""]"
"US-063","Administration & Reporting Dashboard","Admin views and filters the audit log report","Admin","As an Admin, I want to access a detailed and filterable audit log report, so that I can review all critical system actions, ensure compliance, and investigate any changes made within my organization's tenant.","Provides a tamper-proof record of critical activities for security audits, compliance verification, accountability, and troubleshooting administrative actions.","Must Have","5","[""US-050""]","[{""scenario"":""Admin filters the audit log by user (actor)"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin selects a user from a searchable dropdown and applies the filter"",""then"":""the list of entries updates to show only records where the selected user was the actor.""},{""scenario"":""Audit log is immutable from the UI"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin interacts with the list of entries or the detail view"",""then"":""there are no UI elements (e.g., 'Edit', 'Delete' buttons) that would allow modification or deletion of a log entry.""}]","[""WI-004-02-004: Implement Audit Log Report"",""Build the Audit Log Report UI in the Admin dashboard, including pagination"",""Implement indexed Firestore queries to filter the `auditLog` collection"",""Write and test Firestore Security Rules to enforce immutability""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Security requirements (role access, immutability) validated"",""All necessary Firestore indexes are defined in IaC and deployed"",""Story deployed and verified in the staging environment""]"
"US-064","Administration & Reporting Dashboard","Admin exports a report to CSV","Admin","As an Admin, I want to export the data from any report view on the web dashboard into a CSV file, so that I can perform offline analysis, share the data with stakeholders, or use it in other business tools.","Enables data portability for offline analysis, custom reporting, auditing, and integration with external business processes.","Should Have","5","[""US-059"",""US-060""]","[{""scenario"":""Exporting a filtered report"",""given"":""an Admin is viewing the 'Attendance Summary' report, filtered for 'Team Alpha' and the previous month"",""when"":""the Admin clicks the 'Export to CSV' button"",""then"":""a CSV file download is initiated, and the data rows in the file correspond exactly to the filtered data for 'Team Alpha'.""},{""scenario"":""Exporting a report with no data"",""given"":""an Admin is viewing a report with filters that result in zero records"",""when"":""the Admin clicks the 'Export to CSV' button"",""then"":""a CSV file is downloaded containing only the header row and no data rows.""}]","[""WI-004-02-005: Implement Report Export to CSV"",""Create a reusable CSV export component in Flutter for Web"",""Integrate a Dart CSV generation package"",""Implement logic to serialize the report's current state (data models) into a CSV string and trigger a browser download""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Manual testing confirms correct functionality and file integrity on all target browsers"",""Performance requirements verified for moderately sized reports"",""Story deployed and verified in staging environment""]"
"US-065","Integrations & Event Management","Admin configures automatic data export to Google Sheets","Admin","As an Admin, I want to configure a secure, automated, and scheduled export of approved attendance data to a Google Sheet, so that I can streamline our reporting process and perform custom analysis.","Automates data export, reducing manual effort and human error. Enables seamless integration with external business workflows (e.g., payroll, advanced analytics).","Could Have","13","[""US-021"",""US-039"",""US-066""]","[{""scenario"":""Admin successfully configures a new daily export"",""given"":""The Admin is on the 'Integrations' settings page"",""when"":""The Admin clicks 'Connect to Google Sheets', completes the OAuth flow, provides a name for a new Sheet, selects a 'Daily' schedule, and saves"",""then"":""A new Google Sheet with correct headers is created in the Admin's Google Drive, and the UI updates to show 'Active' status.""},{""scenario"":""Scheduled export function runs successfully"",""given"":""The Google Sheets export is configured and active, and there are new 'approved' attendance records"",""when"":""The scheduled Cloud Function for data export is triggered"",""then"":""The new 'approved' records are appended as new rows to the linked Google Sheet, and the 'Last Sync' timestamp is updated.""}]","[""WI-005-02-002: Implement Google Sheets Export Configuration (OAuth 2.0)"",""WI-005-02-003: Implement Scheduled Google Sheets Export Function""]","[""All acceptance criteria validated and passing in a staging environment"",""Code for both frontend and backend is peer-reviewed and merged"",""Unit tests for the Cloud Function achieve >80% coverage"",""Successful end-to-end integration test has been performed"",""Security review of the OAuth token handling process is complete and approved"",""The feature is deployed and verified in the staging environment""]"
"US-066","Integrations & Event Management","Admin authorizes Google Drive/Sheets access via OAuth 2.0","Admin","As an Admin, I want to initiate a secure OAuth 2.0 flow to authorize the application to access my Google Drive and Sheets, so that I can enable the automated export of attendance data without compromising my account credentials.","Enables the core functionality of automated data export (US-065) by establishing a secure, user-consented connection to Google services.","Could Have","5","[""US-065""]","[{""scenario"":""Successful Authorization Flow"",""given"":""The Admin is on the 'Data Export' page where the integration is 'Not Connected'"",""when"":""The Admin clicks 'Connect to Google Sheets', authenticates with Google, and grants permissions"",""then"":""The Admin is redirected back to the app, the UI updates to 'Connected', and a refresh token is securely stored on the server.""},{""scenario"":""User Denies Permission"",""given"":""The Admin is on the Google OAuth consent screen"",""when"":""The Admin clicks 'Deny' or closes the window"",""then"":""The Admin is redirected back to the 'Data Export' page, an 'Authorization was cancelled' message is shown, and the status remains 'Not Connected'.""}]","[""WI-005-02-002: Implement Google Sheets Export Configuration (OAuth 2.0)"",""Configure OAuth 2.0 Client ID in GCP project"",""Implement a callable Cloud Function to handle the server-side token exchange"",""Build the frontend UI to initiate the OAuth flow and handle the redirect""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved, with special attention to security practices"",""Integration testing of the full OAuth flow completed successfully"",""Security requirements validated, including secure storage of secrets and tokens"",""Story deployed and verified in the staging environment""]"
"US-067","Integrations & Event Management","Admin is alerted to a Google Sheets sync failure","Admin","As an Admin who has configured the automatic data export to Google Sheets, I want to be proactively notified with a persistent alert on my web dashboard whenever the sync process fails, so that I can take corrective action.","Prevents silent data integration failures, ensuring the integrity and timeliness of external reports. This builds trust in the system's automation and allows for rapid resolution of issues.","Could Have","5","[""US-065"",""US-068""]","[{""scenario"":""Alert is displayed when sync fails due to revoked permissions"",""given"":""The Google Sheets export is configured"",""when"":""The scheduled export function fails because OAuth permissions were revoked"",""then"":""The function updates the integration status in Firestore to 'error' with reason 'permission_revoked', and the Admin dashboard displays a prominent alert banner.""},{""scenario"":""Alert is displayed when the target Google Sheet is not found"",""given"":""The Google Sheets export is configured"",""when"":""The scheduled export function fails because the target Sheet has been deleted"",""then"":""The function updates the status to 'error' with reason 'sheet_not_found', and the dashboard displays a specific alert.""}]","[""WI-005-02-004: Implement Google Sheets Export Error Handling and Alerting"",""Enhance the export Cloud Function with robust error handling to detect different failure modes"",""Build a conditional, persistent alert banner in the Admin dashboard UI that is driven by a real-time Firestore stream""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Accessibility of the alert component verified"",""Story deployed and verified in the staging environment""]"
"US-068","Integrations & Event Management","Admin re-authorizes Google Sheets sync after a failure","Admin","As an Admin, I want to be prompted with clear actions to re-authenticate or link a new Google Sheet when the data sync fails, so that I can quickly restore the automated reporting feature.","Ensures the reliability of the automated reporting feature by providing a self-service recovery path, maintaining trust in the application.","Could Have","5","[""US-067""]","[{""scenario"":""Admin successfully re-authenticates after a token revocation failure"",""given"":""the Google Sheets sync status is 'error' with a reason of 'AUTH_ERROR'"",""when"":""the Admin clicks 'Re-authenticate' and successfully completes the Google OAuth flow"",""then"":""the system updates the stored OAuth refresh token, the sync status is updated to 'active', and the error alert on the dashboard is removed.""},{""scenario"":""System triggers a catch-up sync after successful recovery"",""given"":""the Google Sheets sync has been restored and there are records that previously failed to sync"",""when"":""the next scheduled sync job runs"",""then"":""the system exports all previously failed records to the Google Sheet without creating duplicates.""}]","[""WI-005-02-004: Implement Google Sheets Export Error Handling and Alerting (recovery part)"",""Build the UI in the Admin dashboard to show 'Re-authenticate' or 'Link New Sheet' buttons based on the error type"",""Reuse the OAuth flow logic from US-066 for re-authentication"",""Update the export Cloud Function to handle catch-up syncs""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing for the full recovery flow completed successfully"",""Security requirements, especially OAuth token handling, validated"",""Story deployed and verified in the staging environment""]"
"US-069","Administration & Reporting Dashboard","Admin configures the organization's timezone","Admin","As an Admin, I want to select and save a default timezone for my entire organization so that all time-based calculations, business rules, and reports are consistent and accurate for all users.","Ensures data integrity and consistency for all time-related data. This is critical for accurate reporting, correct application of business rules, and event scheduling.","Must Have","2","[""US-021""]","[{""scenario"":""Admin successfully sets the organization's timezone"",""given"":""I am an Admin on the 'Tenant Settings' page"",""when"":""I select a timezone (e.g., 'America/New_York') from the searchable dropdown and click 'Save'"",""then"":""The tenant's configuration document in Firestore is updated with the value 'America/New_York' and I see a success notification.""},{""scenario"":""Default state for a new tenant"",""given"":""An Admin for a brand new tenant logs in for the first time"",""when"":""They navigate to the 'Tenant Settings' page"",""then"":""The timezone field is either blank or set to 'UTC', and there is a clear visual indicator prompting the Admin to configure it.""}]","[""WI-004-03-002: Implement Timezone and Auto-Checkout Configuration (Timezone part)"",""Add a searchable timezone dropdown to the 'Tenant Settings' UI"",""Implement logic to save the selected IANA timezone identifier to the tenant's config document in Firestore""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Firestore security rules written and tested to protect the configuration document"",""Integration testing completed to verify a dependent feature uses the timezone correctly"",""Story deployed and verified in the staging environment""]"
"US-070","Administration & Reporting Dashboard","Admin configures the auto-checkout time","Admin","As an Admin, I want to configure a specific time of day for automatic check-outs, so that I can ensure all employee attendance records are closed for the day.","Improves data integrity by preventing open-ended attendance records. Reduces administrative overhead by automating the correction of forgotten check-outs.","Should Have","2","[""US-069""]","[{""scenario"":""Admin enables and sets the auto-checkout time"",""given"":""I am an Admin on the 'Tenant Settings' page"",""when"":""I enable the 'Automatic Check-out' feature, select '17:30', and click 'Save'"",""then"":""I see a success message and the settings are saved. When I refresh the page, the toggle remains enabled and the time is '17:30'.""},{""scenario"":""Admin disables the auto-checkout feature"",""given"":""I am an Admin on the 'Tenant Settings' page where 'Automatic Check-out' is enabled"",""when"":""I disable the feature using the toggle and click 'Save'"",""then"":""I see a success message, and the time picker component becomes disabled or hidden.""}]","[""WI-004-03-002: Implement Timezone and Auto-Checkout Configuration (Auto-checkout part)"",""Add a toggle and time picker to the 'Tenant Settings' UI"",""Implement logic to save the configuration to the tenant's config document in Firestore""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing with the Firebase Emulator completed successfully"",""Firestore security rules are implemented and tested"",""Story deployed and verified in the staging environment""]"
"US-071","Administration & Reporting Dashboard","Admin configures the approval escalation period","Admin","As an Admin, I want to configure the approval escalation period in days, so that pending attendance records are automatically escalated to the next-level supervisor if they are not actioned in a timely manner.","Improves operational efficiency by preventing bottlenecks in the attendance approval workflow. Enforces managerial accountability and ensures timely processing of all attendance records.","Could Have","1","[""US-021""]","[{""scenario"":""Admin successfully sets a valid escalation period"",""given"":""The Admin is on the 'Tenant Settings' page"",""when"":""The Admin enters a positive integer (e.g., '3') into the 'Approval Escalation Period' field and clicks 'Save'"",""then"":""The system displays a success notification and the value '3' is persisted in the tenant's configuration document.""},{""scenario"":""Admin attempts to save a value less than one"",""given"":""The Admin is on the 'Tenant Settings' page"",""when"":""The Admin enters '0' or '-1' and attempts to save"",""then"":""The system prevents the save and displays an inline validation error: 'Value must be 1 or greater.'""}]","[""Add a numeric input field for 'Approval Escalation Period (days)' to the Tenant Settings UI"",""Implement logic to save this value to the tenant's config document in Firestore""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented"",""Security requirements validated via Firestore rules tests"",""Story deployed and verified in the staging environment""]"
"US-072","Administration & Reporting Dashboard","Admin configures default working hours for reporting","Admin","As an Admin, I want to define default working hours and the applicable days of the week for my organization, so that the system can automatically generate reports on late arrivals and early departures.","Enables automated exception reporting (lateness, early departure), saving administrative time and providing key insights into workforce punctuality.","Should Have","2","[""US-069""]","[{""scenario"":""Admin successfully sets working hours"",""given"":""the Admin is on the 'Tenant Settings' page"",""when"":""the Admin enters '09:00' for start time, '17:30' for end time, selects Monday through Friday, and clicks 'Save'"",""then"":""a success notification is displayed, and the configuration is saved to the tenant's configuration document in Firestore.""},{""scenario"":""Admin attempts to save with end time before start time"",""given"":""the Admin is on the 'Tenant Settings' page"",""when"":""the Admin sets start time to '17:00' and end time to '09:00' and clicks 'Save'"",""then"":""a validation error 'End time must be after start time' is displayed, and the data is not saved.""}]","[""Add time pickers and day-of-week selectors to the 'Tenant Settings' UI"",""Implement logic to save this configuration to the tenant's config document in Firestore""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented with >80% coverage"",""Story deployed and verified in the staging environment""]"
"US-073","Administration & Reporting Dashboard","Admin configures the tenant's password policy","Admin","As an Admin, I want to configure and enforce a custom password policy for my organization, including minimum length and character type requirements, so that I can enhance account security.","Provides organizations with direct control over their security posture, enabling them to enforce internal IT policies and meet external compliance requirements.","Should Have","8","[""US-021"",""US-069""]","[{""scenario"":""Admin successfully saves a new password policy"",""given"":""the Admin is on the 'Password Policy' settings page"",""when"":""the Admin changes the minimum length to '12' and requires all character types, then clicks 'Save'"",""then"":""a success notification is displayed, and the new policy is written to the tenant's configuration document in Firestore.""},{""scenario"":""New user registration enforces the custom password policy"",""given"":""the Admin has set a policy requiring a minimum of 10 characters and at least one number"",""when"":""a new user enters a compliant password like 'Password123!' during registration"",""then"":""the password is accepted, and the user's account is successfully created.""},{""scenario"":""New user registration is blocked by a non-compliant password"",""given"":""the Admin has set a policy requiring at least one number"",""when"":""a new user enters a non-compliant password like 'Password!'"",""then"":""a clear validation error message is displayed, and the account creation is blocked.""}]","[""Build the password policy configuration UI in the Admin dashboard"",""Implement logic to save the policy to the tenant's config document"",""Implement a Firebase Auth `beforeCreate` blocking function to enforce the custom policy on the server-side""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for both UI logic and the password validation function"",""Integration testing completed for the Admin UI -> Firestore -> Auth Function flow"",""Story deployed and verified in the staging environment""]"
"US-074","Administration & Reporting Dashboard","Admin configures data retention periods for attendance and audit logs","Admin","As an Admin, I want to configure specific retention periods for attendance records and audit logs, so that I can ensure my organization complies with internal data governance policies and external regulations.","Enables compliance with data protection regulations, enforces internal data governance policies, and reduces long-term data storage costs.","Could Have","5","[""US-021""]","[{""scenario"":""Admin successfully updates and saves a retention period"",""given"":""the Admin is viewing the 'Data Retention' settings page"",""when"":""the Admin changes the retention period for 'Attendance Records' to '3' years and clicks 'Save'"",""then"":""the system displays a success notification and the new value is persisted to the tenant's configuration document in Firestore.""},{""scenario"":""Admin attempts to save an invalid (non-positive) retention period"",""given"":""the Admin is viewing the 'Data Retention' settings page"",""when"":""the Admin enters '-1' or '0' into a retention period field and clicks 'Save'"",""then"":""a validation error 'Value must be greater than 0' is displayed, and the save is prevented.""}]","[""Add a 'Data Retention' section to the Tenant Settings UI"",""Implement logic to save retention periods to the tenant's config document"",""Create a scheduled Cloud Function that reads these settings and performs data purging/anonymization (implementation of the purge itself may be a separate story)""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit and widget tests implemented for the UI"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Story deployed and verified in the staging environment""]"
"US-075","Integrations & Event Management","User views a map of their check-in/check-out location","Any authenticated user","As a User, I want to view the captured GPS coordinates for a check-in and check-out action as pins on an interactive map so that I can visually confirm the accuracy of the location data.","Increases user trust and data transparency by providing intuitive, visual confirmation of captured locations. Reduces potential disputes over attendance data.","Should Have","5","[""US-028"",""US-029""]","[{""scenario"":""Display map with both check-in and check-out locations"",""given"":""a user is viewing the details of an attendance record with valid GPS coordinates for both check-in and check-out"",""when"":""the attendance detail screen loads"",""then"":""a map component is displayed, showing two distinct, labeled pins for the check-in and check-out locations.""},{""scenario"":""User interacts with a location pin"",""given"":""a map is displayed with one or more location pins"",""when"":""the user taps on a pin"",""then"":""an info window appears above the pin, displaying the action type ('Check-In' or 'Check-Out') and the corresponding timestamp.""},{""scenario"":""Device is offline when viewing the map"",""given"":""the user's device has no active internet connection"",""when"":""the user navigates to an attendance detail screen with valid GPS data"",""then"":""the map area displays a placeholder with a message like 'Map cannot be loaded. Please check your internet connection.'""}]","[""WI-005-02-001: Integrate Google Maps for Location Visualization"",""Configure the `google_maps_flutter` package for both Android and iOS"",""Build the map widget and integrate it into the attendance detail screen"",""Securely manage and restrict Google Maps API keys""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved"",""E2E integration testing completed successfully on both Android and iOS physical devices"",""Security review of API key handling completed"",""Story deployed and verified in the staging environment""]"
"US-076","Core Attendance & Approval Workflow","User is prompted to grant location permissions","First-time user","As a first-time user of the mobile application, I want to be prompted to grant location permissions when I first attempt to use a location-based feature, so that I understand why my location is needed and can explicitly consent to its use.","Ensures compliance with platform policies and data privacy regulations. Builds user trust through transparency and enables the core GPS-based attendance functionality.","Must Have","3","[""US-021""]","[{""scenario"":""User grants 'While Using the App' permission on first attempt"",""given"":""A user has logged in for the first time and has not been asked for location permissions"",""when"":""The user taps a UI element that requires location data (e.g., 'Check-In')"",""then"":""The native OS location permission dialog is displayed. If the user grants permission, the dialog is dismissed, and the action proceeds.""},{""scenario"":""User denies location permission"",""given"":""The native OS location permission dialog is displayed"",""when"":""The user selects the 'Deny' option"",""then"":""The dialog is dismissed, the location-dependent action is blocked, and an in-app message is shown explaining why location is needed and how to enable it in settings.""}]","[""Integrate a Flutter permissions package like `permission_handler`"",""Configure native project files (Info.plist, AndroidManifest.xml) with appropriate permission declarations and usage descriptions"",""Implement logic to request permission contextually (on action) rather than on app launch""]","[""All acceptance criteria validated and passing on target iOS and Android versions"",""Code reviewed and approved by team"",""E2E integration tests for all major permission flows are implemented and passing"",""Native project files are correctly configured with usage descriptions"",""Story successfully tested and verified on physical devices for both platforms""]"
"US-077","Core Attendance & Approval Workflow","Guide user to device settings when location permission is denied","Any mobile app user","As a mobile app user, I want to be shown a helpful message with a direct link to my device's app settings if I have previously denied location permissions, so that I can easily enable them and use the core attendance features.","Improves usability and user retention by providing a clear, low-friction recovery path for a common error. Reduces user frustration and support requests.","Must Have","3","[""US-076"",""US-028""]","[{""scenario"":""User attempts a location-based action with permissions permanently denied"",""given"":""The user has previously denied location permissions for the app"",""when"":""The user taps a button that requires location services, such as 'Check-In'"",""then"":""A modal dialog is displayed, explaining why location is required and presenting 'Open Settings' and 'Cancel' buttons.""},{""scenario"":""User is successfully navigated to the OS app settings screen"",""given"":""The permission guidance dialog is displayed"",""when"":""The user taps the 'Open Settings' button"",""then"":""The application deep-links the user directly to the app's specific settings page within the device's operating system.""}]","[""Use a permissions package (`permission_handler`) to check for permanently denied status"",""Build the guidance dialog UI"",""Implement the platform-specific logic to deep-link to the app settings screen""]","[""All acceptance criteria validated and passing on supported iOS and Android versions"",""Code reviewed and approved by team"",""Manual end-to-end testing completed successfully on physical devices"",""User interface reviewed and approved for clarity and usability"",""Story deployed and verified in the staging environment""]"
"US-078","Platform Foundation & DevOps","Application is accessible and compliant with WCAG 2.1 AA standards","User with a disability","As a user with a disability (such as visual or motor impairment), I want the application to adhere to established accessibility standards, including screen reader compatibility and sufficient color contrast, so that I can independently and effectively use all of its features.","Ensures the application is inclusive and usable by the widest possible audience, mitigates legal risk by complying with accessibility legislation, and improves overall application usability.","Must Have","13","[]","[{""scenario"":""Screen Reader Compatibility for Interactive Elements"",""given"":""A user has a screen reader (e.g., VoiceOver, TalkBack) enabled"",""when"":""The user navigates to any interactive element (button, text field, toggle)"",""then"":""The screen reader clearly announces the element's name, role, and state.""},{""scenario"":""Sufficient Color Contrast for Readability"",""given"":""A user is viewing any screen in the application"",""when"":""Text or a meaningful icon is displayed against a background"",""then"":""The contrast ratio meets or exceeds WCAG 2.1 AA standards: 4.5:1 for normal text and 3:1 for large text.""},{""scenario"":""Adequate Touch Target Size for All Controls"",""given"":""A user is interacting with any screen containing tappable elements"",""when"":""The user attempts to tap a button, icon, or other control"",""then"":""The interactive area for the control is at least 44x44 pixels (dp/pt).""}]","[""Conduct a full accessibility audit of all existing and new UI components"",""Add semantic labels and properties to all Flutter widgets"",""Adjust color palettes to meet contrast ratio requirements"",""Ensure all touch targets meet minimum size guidelines""]","[""An accessibility checklist based on WCAG 2.1 AA has been created and applied to all screens"",""The global 'Definition of Done' for all future UI stories is updated to include passing the accessibility checklist"",""The application is verified as accessible in the staging environment through manual testing with VoiceOver and TalkBack""]"
"US-079","Platform Foundation & DevOps","User adjusts the application's text size based on device settings","User with visual impairments","As a user, particularly one with visual impairments, I want the application's text to scale according to my device's system-wide font size settings so that I can adjust the text to a comfortable size for me.","Improves application accessibility and usability, ensuring compliance with WCAG 2.1 standards (specifically 1.4.4 Resize text). This broadens the user base and enhances user satisfaction.","Should Have","5","[]","[{""scenario"":""Text scales up when device font size is increased"",""given"":""The user has the application open"",""when"":""the user navigates to their device's system settings and increases the font size"",""then"":""all text within the application renders at the new, larger size, and the UI layout reflows gracefully without horizontal scrolling or truncating content.""},{""scenario"":""Layout remains usable at maximum accessibility font size"",""given"":""The user has the application open"",""when"":""the user sets their device's font size to the maximum accessibility setting"",""then"":""no text overlaps with other text or UI elements, and all interactive elements remain visible and tappable.""}]","[""Audit and refactor all UI layouts to use responsive widgets (e.g., Flexible, Expanded, Wrap)"",""Ensure all text widgets correctly respond to `MediaQuery.textScaleFactor`"",""Conduct manual testing across all primary screens at various font size settings""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Code reviewed and approved, with a focus on the use of responsive layout widgets"",""Manual end-to-end testing completed for all primary user flows at minimum, default, and maximum font sizes"",""Documentation updated to include text scaling as a standard for all new UI development"",""Story deployed and verified in the staging environment""]"
"US-080","Tenant & User Lifecycle Management","User enables multi-factor authentication for enhanced account security","Any security-conscious user","As a security-conscious user, I want to enable multi-factor authentication (MFA) by verifying my phone number, so that I can add an extra layer of security to my account and prevent unauthorized access.","Increases the security of user accounts and protects sensitive organizational data from unauthorized access, thereby reducing the risk of data breaches and enhancing customer trust.","Should Have","8","[""US-017""]","[{""scenario"":""User successfully enables MFA with a valid phone number and OTP"",""given"":""I am on the security settings screen and MFA is disabled"",""when"":""I tap 'Enable MFA', enter a valid phone number, receive an OTP via SMS, and enter the correct OTP"",""then"":""I see a success message, and the security screen updates to show that MFA is 'Enabled'.""},{""scenario"":""MFA is enforced during a subsequent login attempt"",""given"":""I have successfully enabled MFA and logged out"",""when"":""I enter my correct email and password on the login screen"",""then"":""I am redirected to a new screen prompting me to enter a verification code sent to my registered phone number.""}]","[""Configure Firebase Authentication for multi-factor authentication with phone numbers"",""Build the UI flow in the user settings screen for enabling MFA"",""Modify the login flow to conditionally show the second-factor verification screen""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved"",""Integration testing against the Firebase Emulator completed successfully"",""E2E test successfully completed on a physical device in the staging environment"",""Story deployed and verified in the staging environment""]"
"US-081","Platform Foundation & DevOps","Admin is notified of planned maintenance","Admin","As an Admin, I want to receive clear, timely notifications about planned system maintenance, so that I can proactively inform my users, manage expectations, and minimize disruption.","Improves customer trust and satisfaction by providing proactive communication. Reduces operational disruption for tenants and minimizes support inquiries during maintenance periods.","Should Have","5","[""US-021""]","[{""scenario"":""Admin receives an email notification for upcoming maintenance"",""given"":""A maintenance window is scheduled by a system operator at least 48 hours in the future"",""when"":""The system's notification process runs"",""then"":""The Admin receives an email containing the maintenance start time, end time, and expected service impact.""},{""scenario"":""Admin sees an in-app banner notification in the web dashboard"",""given"":""An Admin is logged into the web dashboard and a maintenance window is scheduled within the next 7 days"",""when"":""The Admin loads or navigates within the dashboard"",""then"":""A persistent, non-dismissible banner is displayed at the top of the screen communicating the maintenance schedule.""}]","[""Create a Firestore collection to store maintenance window data"",""Implement a scheduled Cloud Function to send email notifications for upcoming maintenance"",""Build a persistent banner component in the Admin dashboard that reads from the maintenance data""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing between Cloud Function, Firestore, and SendGrid completed successfully"",""User interface for the banner and maintenance page reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-082","Tenant & User Lifecycle Management","Admin downloads a CSV template for data migration","Admin","As an Admin setting up my organization, I want to download a predefined CSV template for user and team data, so that I can correctly format my existing data for a successful bulk import.","Streamlines the tenant onboarding process by providing a clear, error-reducing template for data migration. This enhances user experience and reduces support load.","Should Have","1","[""US-021""]","[{""scenario"":""Admin successfully downloads the CSV template"",""given"":""I am an Admin on the 'User Management > Data Import' section"",""when"":""I click the 'Download CSV Template' button"",""then"":""my browser initiates a download of a file named 'user_team_import_template.csv'.""},{""scenario"":""Downloaded template has the correct headers"",""given"":""I have successfully downloaded the template file"",""when"":""I open the file"",""then"":""the first row must contain the exact headers: 'email', 'firstName', 'lastName', 'role', 'supervisorEmail', 'teamName'.""}]","[""Add a 'Download CSV Template' button to the Admin web dashboard"",""Host the static CSV template file within the application assets or in Firebase Storage""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""User interface reviewed and approved by the Product Owner"",""Security requirement (Admin-only access) validated"",""Story deployed and verified in staging environment""]"
"US-083","Tenant & User Lifecycle Management","Admin uploads a CSV file to bulk-create users and teams","Admin","As an Admin, I want to upload a CSV file containing user and team information, so that I can efficiently bulk-create user accounts, define team structures, and automatically send out registration invitations.","Reduces manual effort and potential for error when onboarding multiple users, improving administrative efficiency and making the platform scalable for larger organizations.","Should Have","8","[""US-082"",""US-004""]","[{""scenario"":""Successful bulk import of new users and new teams"",""given"":""The Admin uploads a correctly formatted CSV file"",""when"":""The import process runs"",""then"":""The system initiates an asynchronous background job, and upon completion, new user and team documents are created in Firestore and invitation emails are sent.""},{""scenario"":""Processing a CSV with some invalid data rows"",""given"":""The Admin uploads a CSV with a mix of valid rows and rows with errors"",""when"":""The import process runs"",""then"":""The system successfully processes all valid rows, and the final summary report clearly lists which rows failed with specific reasons.""}]","[""WI-002-02-006: Implement Data Migration Tool (CSV Upload)"",""Build the file upload UI in the Admin dashboard"",""Implement a Cloud Function triggered by file upload to Cloud Storage that parses the CSV, validates data, and performs batch writes to Firestore""]","[""All acceptance criteria validated and passing"",""Code for both the Flutter Web UI and the TypeScript Cloud Function is reviewed and approved"",""Integration testing using the Firebase Emulator Suite is completed successfully"",""Security requirements, including role-based access and data cleanup, are validated"",""Story deployed and verified in the staging environment""]"
"US-084","Tenant & User Lifecycle Management","Admin reviews a data import summary report","Admin","As an Admin, I want to see a detailed summary report immediately after uploading a user and team data file, so that I can quickly verify which records were successfully imported and diagnose the specific errors for any records that failed.","Improves the efficiency and accuracy of the tenant onboarding process by providing immediate, actionable feedback on bulk data imports.","Should Have","8","[""US-083""]","[{""scenario"":""Partial success with some failed records"",""given"":""an Admin has uploaded a CSV file containing a mix of valid and invalid records"",""when"":""the import process completes"",""then"":""the summary report accurately displays the total records processed, the count of successful imports, the count of failed imports, and a detailed list of failed records with specific error messages.""},{""scenario"":""Admin downloads the failed records report"",""given"":""an Admin is viewing an import summary report with at least one failed record"",""when"":""the Admin clicks the 'Download Failed Records' button"",""then"":""a CSV file is downloaded containing the full data from the original rows that failed, plus an additional 'Error' column.""}]","[""Update the import Cloud Function to store a detailed processing result in Firestore"",""Build the summary report UI in the Admin dashboard that reactively displays the result"",""Implement logic to generate and download the failed records CSV on the client-side or via a Cloud Function""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for Cloud Function logic implemented with >80% coverage"",""Integration testing of the full upload-process-report flow completed successfully"",""Story deployed and verified in staging environment""]"
"US-085","Platform Foundation & DevOps","User accesses role-based training materials from a centralized help section","All user roles","As a user (Admin, Supervisor, or Subordinate), I want to access a 'Help & Training' section within the application so that I can easily find and view guides and videos relevant to my role.","Improves user onboarding and proficiency, reduces the load on customer support by enabling user self-service, and increases overall user satisfaction.","Could Have","3","[""US-021""]","[{""scenario"":""Subordinate views their specific training materials"",""given"":""I am a user logged in with the 'Subordinate' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see a list of training materials tagged for the 'Subordinate' role.""},{""scenario"":""Admin views all training materials"",""given"":""I am a user logged in with the 'Admin' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see distinct lists of training materials for all roles: 'Admin', 'Supervisor', and 'Subordinate'.""}]","[""Create a Firestore collection to store metadata for training materials (title, URL, type, target roles)"",""Build a 'Help & Training' screen in the Flutter app"",""Implement a query to fetch and display materials based on the logged-in user's role""]","[""All acceptance criteria validated and passing on both mobile platforms and the web dashboard"",""Code reviewed and approved by team"",""Integration testing completed successfully for opening PDFs and videos"",""Accessibility requirements validated"",""Story deployed and verified in the staging environment""]"
"US-086","Tenant & User Lifecycle Management","User's personal data is anonymized after deactivation and retention period","Deactivated User","As a deactivated user, I want my personally identifiable information (PII) to be automatically and permanently anonymized by the system after a defined data retention period has passed, so that my privacy is protected in accordance with data protection regulations.","Ensures compliance with data protection regulations (e.g., GDPR's Right to Erasure), mitigates data breach risks by minimizing stored PII, and builds user trust.","Should Have","13","[""US-008"",""US-074""]","[{""scenario"":""Successful anonymization of a deactivated user after the retention period expires"",""given"":""A user has a status of 'deactivated' and their 'deactivatedTimestamp' is older than the tenant's configured retention period"",""when"":""The scheduled data anonymization Cloud Function is triggered"",""then"":""The PII fields in the user's Firestore document are overwritten with placeholder values, and all historical records referencing the `userId` are updated to use a non-reversible, anonymized identifier.""},{""scenario"":""User within the retention period is not anonymized"",""given"":""A user has a status of 'deactivated' and their 'deactivatedTimestamp' is more recent than the retention period"",""when"":""The scheduled data anonymization Cloud Function is triggered"",""then"":""The user's data remains completely unchanged.""}]","[""WI-002-03-004: Implement Scheduled Anonymization of Deactivated Users"",""Create a scheduled Cloud Function to run daily"",""Implement logic to query for eligible deactivated users"",""Implement complex logic to find and update all references to the user's ID across multiple collections in a performant, batched manner""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests implemented for the Cloud Function logic with >80% coverage"",""Integration testing completed successfully against the Firebase Emulator Suite"",""The scheduled function is deployed and configured to run on a daily schedule in the staging environment"",""Story deployed and verified in staging environment""]"
"US-087","Platform Foundation & DevOps","Admin is alerted when tenant usage approaches cost-incurring levels","Admin","As an Admin, I want to receive automated alerts when my organization's resource usage approaches the limits of our subscription tier, so that I can proactively manage our consumption and avoid unexpected overage charges.","Provides financial predictability for customers, builds trust through cost transparency, reduces churn from unexpected bills, and creates opportunities for upselling.","Could Have","13","[""US-001""]","[{""scenario"":""Admin receives an alert when a usage metric reaches the first threshold (80%)"",""given"":""An organization is on a subscription tier with a defined limit of 100,000 Firestore reads and an alert threshold is set at 80%"",""when"":""The organization's aggregated Firestore read count for the cycle reaches 80,000"",""then"":""An email notification is sent to all 'Admin' role users, and a persistent banner appears on the Admin web dashboard.""},{""scenario"":""Usage alerts are cleared at the start of a new billing cycle"",""given"":""An Admin's dashboard is displaying a 95% usage alert banner"",""when"":""The system date rolls over to the first day of the new billing cycle"",""then"":""The usage alert banner is automatically removed from the Admin's dashboard.""}]","[""Set up GCP Billing export to BigQuery"",""Create a scheduled Cloud Function to periodically process aggregated usage data from BigQuery"",""Implement logic to compare usage against subscription tier limits stored in Firestore"",""Integrate with SendGrid to send email alerts and update Firestore to show the in-app banner""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Integration testing of the data pipeline and alert mechanism completed successfully"",""User interface banner reviewed and approved by UX/Product"",""Story deployed and verified in the staging environment""]"