"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-BE-001","Design `registerOrganization` Function and Data Models","Define the API contract (request/response) for the callable function. Finalize the Firestore schema for `/tenants` and `/users` documents. Design the atomic transaction flow, including the compensation logic for rollback on failure.","Task","Sprint Backlog","Critical","be.dev1@company.com","product.owner@company.com","2024-10-29","4.17","2","backend,design,architecture,firestore","Sprint 1","Establish Foundational Platform, Security, and CI/CD.","Core Platform & Tenant Management","EPIC-001","Attendance Tracking System","US-001","","Firebase Architecture,Data Modeling","Medium","Medium","API contract is documented; Firestore transaction flow is diagrammed; Uniqueness check strategy is defined.","Design documents peer-reviewed and approved.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-10-28","2024-11-08","100%","Frontend team for API contract review","","Peer review of design documents.","","Foundational design for the registration feature."
"TASK-BE-002","Implement `registerOrganization` Callable Cloud Function","Write the TypeScript code for the `registerOrganization` callable function. Implement the Firestore transaction to atomically create the tenant document, the user document, and the Firebase Auth user. Implement the logic to set custom claims (`tenantId`, `role: 'Admin'`).","Task","Sprint Backlog","Critical","be.dev2@company.com","product.owner@company.com","2024-11-01","8.67","5","backend,typescript,cloud-function,auth","Sprint 1","Establish Foundational Platform, Security, and CI/CD.","Core Platform & Tenant Management","EPIC-001","Attendance Tracking System","US-001","TASK-BE-001","TypeScript,Firebase Cloud Functions,Firebase Admin SDK","High","High","Function creates Auth user, Firestore tenant, and Firestore user documents within a single transaction; Correctly sets custom claims; Rejects non-unique organization name.","Code reviewed; Unit tests passing; Deployed to dev environment.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-10-28","2024-11-08","100%","","","Unit tests and integration tests.","Requires deployment to dev for integration testing.","Core tenant creation logic."
"TASK-BE-075","Design and Structure `firestore.rules` File","Design the overall structure of the security rules file. Define reusable functions for common checks like `isTenantMember(tenantId)`, `isAdmin()`, `isSupervisorOf(userId)`, etc. Plan the rule cascade for all collections.","Task","Sprint Backlog","Critical","be.dev1@company.com","tech.lead@company.com","2024-11-04","8.33","5","backend,security,firestore,architecture","Sprint 1","Establish Foundational Platform, Security, and CI/CD.","Security, Infrastructure & Operations","EPIC-004","Attendance Tracking System","INFRA-001","","Firestore Security Rules,Security Architecture","High","Critical","A structured outline of the `firestore.rules` file is created; A list of all required helper functions is defined; Access matrix showing roles vs. collection permissions is documented.","Design documents peer-reviewed and approved by security lead.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-10-28","2024-11-08","100%","Backend Lead","","Security review of the design document.","","Defines the foundational security model for the entire application."
"TASK-BE-076","Implement `firestore.rules` for All Collections","Write the complete `firestore.rules` file based on the design. Implement strict tenant isolation on all paths using `request.auth.token.tenantId`. Implement RBAC logic for Admin, Supervisor, and Subordinate roles.","Task","Sprint Backlog","Critical","be.dev2@company.com","tech.lead@company.com","2024-11-06","14.33","8","backend,security,firestore,iac","Sprint 1","Establish Foundational Platform, Security, and CI/CD.","Security, Infrastructure & Operations","EPIC-004","Attendance Tracking System","INFRA-001","TASK-BE-075","Firestore Security Rules","High","Critical","Tenant isolation rule is applied to all collections; RBAC logic is implemented for all roles; Supervisor-to-Subordinate access rules are implemented; Audit log immutability is enforced.","Code reviewed; Automated tests passing; Deployed to dev.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-10-28","2024-11-08","100%","","","Comprehensive automated testing of the ruleset.","To be deployed via CI/CD pipeline.","Implements the core data access security for the platform."
"TASK-BE-087","Implement GitHub Actions Workflow for CI/CD","Write the `ci-cd.yml` workflow file. Implement jobs for `npm install`, `lint`, `test`, and `deploy`. Use conditions to trigger deployments based on the branch name. Configure authentication to GCP using Workload Identity Federation.","Task","Sprint Backlog","Critical","be.dev3@company.com","devops.lead@company.com","2024-11-08","12.33","8","devops,ci-cd,github-actions,iac","Sprint 1","Establish Foundational Platform, Security, and CI/CD.","Security, Infrastructure & Operations","EPIC-004","Attendance Tracking System","INFRA-004","TASK-BE-086","GitHub Actions,YAML,Firebase CLI","High","Medium","Pipeline runs on every push; Linting and testing jobs execute correctly; Code coverage is checked and enforced; Deployment jobs correctly target staging and production based on branch.","Pipeline is active and successfully deploying code to the dev environment.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-10-28","2024-11-08","100%","","","Triggering the pipeline with test commits to verify all jobs.","Handles automated deployment for all backend resources.","Enables automated, reliable, and repeatable deployments."
"TASK-BE-012","Implement `inviteUser` Callable Cloud Function","Write the TypeScript code for the `inviteUser` function. It must validate the caller is an Admin, check for existing users, create a user document with 'invited' status, generate a secure 24-hour token, and call the SendGrid service to dispatch the invitation email.","Task","Sprint Backlog","Critical","be.dev1@company.com","product.owner@company.com","2024-11-15","8.67","5","backend,typescript,cloud-function,user-management","Sprint 2","Implement Complete User Lifecycle & Onboarding Workflow.","Core Platform & Tenant Management","EPIC-001","Attendance Tracking System","US-004","TASK-BE-011,TASK-BE-053","TypeScript,Firebase Cloud Functions,SendGrid API","Medium","Medium","Function is secured for Admin role only; Rejects invitations for existing users; Creates user document with `status: 'invited'`; Sends email via configured service.","Code reviewed; Unit tests passing; Integration tests passing; Deployed to dev.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-11-11","2024-11-22","100%","","SendGrid API","Unit and integration testing, mocking the email service.","","Core logic for adding new users to an organization."
"TASK-BE-015","Implement `completeRegistration` Callable Cloud Function","Write the TypeScript code for the `completeRegistration` function. It validates the token, creates the Firebase Auth user, sets custom claims, updates the Firestore user's status to 'active', and invalidates the token, all within a single transaction.","Task","Sprint Backlog","Critical","be.dev2@company.com","product.owner@company.com","2024-11-18","9.5","5","backend,typescript,cloud-function,auth,security","Sprint 2","Implement Complete User Lifecycle & Onboarding Workflow.","Core Platform & Tenant Management","EPIC-001","Attendance Tracking System","US-006","TASK-BE-014","TypeScript,Firebase Cloud Functions,Firebase Admin SDK","High","High","Rejects invalid/expired/used tokens; Creates Auth user and sets password; Sets custom claims; Updates Firestore user status to 'active'; All operations are atomic.","Code reviewed; Unit tests passing; Integration tests verifying atomicity passing.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-11-11","2024-11-22","100%","","","Rigorous integration testing of the transactional flow.","","Final step of user activation, converting an invitation to an active user."
"TASK-BE-018","Implement `deactivateUser` Callable Cloud Function","Write the TypeScript code for the `deactivateUser` function. It must validate the caller is an Admin, update the user's Firestore status to 'deactivated', disable the user's Auth account, revoke their refresh tokens, and create an audit log entry.","Task","Sprint Backlog","Critical","be.dev3@company.com","product.owner@company.com","2024-11-20","7.33","5","backend,typescript,cloud-function,security","Sprint 2","Implement Complete User Lifecycle & Onboarding Workflow.","Core Platform & Tenant Management","EPIC-001","Attendance Tracking System","US-008","TASK-BE-017,TASK-BE-039","TypeScript,Firebase Cloud Functions,Firebase Admin SDK","Medium","High","Function is secured for Admin role only; Firestore user status is updated; Firebase Auth user account is disabled; User's refresh tokens are revoked; An audit log entry is created.","Code reviewed; Unit tests passing; Integration test verifies session invalidation.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-11-11","2024-11-22","100%","","","Integration test to confirm an old token is invalid after deactivation.","","Core logic for securely offboarding users."
"TASK-BE-031","Implement `approveCorrectionRequest` Callable Function","Write the TypeScript code for the `approveCorrectionRequest` function. It must validate the caller is the authorized Supervisor. It uses a Firestore transaction to update the attendance record (status, timestamps, flags) and create the detailed audit log entry.","Task","Sprint Backlog","Critical","be.dev1@company.com","product.owner@company.com","2024-12-04","8.17","5","backend,typescript,cloud-function,workflow","Sprint 3","Automate Core Business Workflows and Approval Logic.","Backend Business Logic & Workflows","EPIC-002","Attendance Tracking System","US-047","TASK-BE-030","TypeScript,Firebase Cloud Functions,Firestore Transactions","Medium","Medium","Function is secured for authorized Supervisors only; Attendance record is updated correctly; Audit log entry is created atomically with old and new values.","Code reviewed; Integration test verifies atomicity of the transaction.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-11-25","2024-12-06","100%","","","Integration test to verify transaction rollback on failure.","","Implements the core logic for the attendance correction approval workflow."
"TASK-BE-045","Implement Scheduled Function for Approval Escalation","Write the TypeScript code for the scheduled escalation function. Implement the query for overdue records. For each record, traverse the user hierarchy to find the next valid supervisor. Atomically update the record's `supervisorId` and create an audit log entry for the escalation.","Task","Sprint Backlog","Should Have","be.dev2@company.com","product.owner@company.com","2024-12-06","9.5","5","backend,typescript,scheduled-function,workflow","Sprint 3","Automate Core Business Workflows and Approval Logic.","Backend Business Logic & Workflows","EPIC-002","Attendance Tracking System","US-044","TASK-BE-044,TASK-BE-091","TypeScript,Firebase Cloud Functions","High","Medium","Function correctly identifies overdue records; Correctly finds the next active supervisor, skipping deactivated ones; Updates record and creates audit log atomically; Handles top-level manager case.","Code reviewed; Integration test with multi-level hierarchy passes.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-11-25","2024-12-06","100%","","","Integration test with a deactivated supervisor in the hierarchy chain.","Requires Cloud Scheduler to be configured in production.","Prevents approval workflows from getting stuck."
"TASK-BE-026","Implement Scheduled Function for Permanent Tenant Deletion","Write the TypeScript code for the daily scheduled purge function. It queries for expired tenants. For each, it recursively deletes all Firestore sub-collections and documents, then deletes all associated Firebase Auth users. The function must be idempotent and support a 'dry-run' mode.","Task","Sprint Backlog","Critical","be.dev1@company.com","devops.lead@company.com","2024-12-18","14","13","backend,typescript,scheduled-function,destructive,security","Sprint 4","Implement Data Lifecycle Operations and External Integrations.","Core Platform & Tenant Management","EPIC-001","Attendance Tracking System","US-024","TASK-BE-025,TASK-BE-091","TypeScript,Firebase Admin SDK","Critical","Critical","Function correctly identifies expired tenants; Recursively deletes all Firestore data; Deletes all Auth users; Logs actions in 'dry-run' mode without deleting.","Code reviewed by multiple senior engineers; Extensive integration testing passed; Manual verification of dry-run logs.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-12-09","2024-12-20","100%","DevOps Lead","","Rigorous integration testing in an isolated environment to prevent any accidental data loss.","Deployment must be carefully managed with a manual approval gate.","Automates the Right to Erasure, a critical compliance feature."
"TASK-BE-051","Implement Scheduled Function for Google Sheets Export","Write the TypeScript code for the scheduled export function. Implement logic to get an access token, query for new approved attendance records, format the data, and use the Google Sheets API to add the data. Atomically update a 'lastExportedTimestamp' to prevent duplicates.","Task","Sprint Backlog","Should Have","be.dev2@company.com","product.owner@company.com","2024-12-20","12.33","8","backend,typescript,scheduled-function,integration,google-api","Sprint 4","Implement Data Lifecycle Operations and External Integrations.","External Service Integrations","EPIC-003","Attendance Tracking System","US-065","TASK-BE-050,TASK-BE-091","TypeScript,Google Sheets API","High","High","Function correctly exports new records; Handles token refresh; Tracks last export time to prevent duplicates; Detects and logs API errors, updating integration status in Firestore.","Code reviewed; Integration test verifies data is correctly appended to a live test sheet.","2024-10-14T09:00:00Z","2024-10-14T09:00:00Z","2024-12-09","2024-12-20","100%","","Google Sheets API","End-to-end integration test with a real Google Sheet is mandatory.","Requires Cloud Scheduler configuration.","Automates reporting for customers, a key feature for paid tiers."