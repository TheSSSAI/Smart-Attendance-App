# 1 Overview

## 1.1 Diagram Id

SEQ-EV-021

## 1.2 Name

Push Notification on New Event Assignment

## 1.3 Description

When a Supervisor creates or updates an event and assigns a user, a backend process is triggered to send a push notification via Firebase Cloud Messaging (FCM) to that user's device.

## 1.4 Type

🔹 EventProcessing

## 1.5 Purpose

To provide timely, proactive communication to users about their schedules and assignments.

## 1.6 Complexity

Medium

## 1.7 Priority

🔴 High

## 1.8 Frequency

OnDemand

## 1.9 Participants

- data-persistence-layer
- application-services-layer

## 1.10 Key Interactions

- A write occurs to an `events` document in Firestore, adding a userId to the `assignedUserIds` array.
- A Cloud Function is triggered by this `onWrite` event.
- The function identifies the newly added userId(s).
- It retrieves the FCM registration token(s) for the targeted user(s) from their user document.
- The function constructs a notification payload (title, body).
- It calls the FCM API to send the push notification to the user's device.

## 1.11 Triggers

- A write to the `assignedUserIds` or `assignedTeamIds` field of an event document.

## 1.12 Outcomes

- The assigned user receives a push notification on their mobile device, alerting them to the new event.

## 1.13 Business Rules

- Notifications should only be sent for new assignments, not for other event edits.

## 1.14 Error Scenarios

- The user has disabled push notifications for the app.
- The user's FCM token is stale or invalid.
- The FCM service is temporarily unavailable.

## 1.15 Integration Points

- Firebase Cloud Messaging (FCM)

# 2.0 Details

## 2.1 Diagram Id

SEQ-BATCH-087

## 2.2 Name

Scheduled Tenant Usage Alerting Process

## 2.3 Description

A scheduled, backend batch process that analyzes tenant resource consumption against subscription tier limits. It identifies tenants exceeding predefined usage thresholds (e.g., 80%, 95%) and sends email notifications to their administrators, ensuring cost transparency and proactive account management. The process is idempotent, preventing duplicate alerts within the same billing cycle.

## 2.4 Participants

### 2.4.1 Scheduler

#### 2.4.1.1 Repository Id

ops-google-cloud-scheduler-001

#### 2.4.1.2 Display Name

Google Cloud Scheduler

#### 2.4.1.3 Type

🔹 Scheduler

#### 2.4.1.4 Technology

Google Cloud Scheduler

#### 2.4.1.5 Order

1

#### 2.4.1.6 Style

| Property | Value |
|----------|-------|
| Shape | Actor |
| Color | #90CAF9 |
| Stereotype | System |

### 2.4.2.0 Serverless Function

#### 2.4.2.1 Repository Id

REPO-SERVER-FUNCTIONS-002

#### 2.4.2.2 Display Name

Usage Check Function

#### 2.4.2.3 Type

🔹 Serverless Function

#### 2.4.2.4 Technology

Firebase Cloud Functions (TypeScript/Node.js)

#### 2.4.2.5 Order

2

#### 2.4.2.6 Style

| Property | Value |
|----------|-------|
| Shape | Component |
| Color | #FFC107 |
| Stereotype | Cloud Function |

### 2.4.3.0 Data Warehouse

#### 2.4.3.1 Repository Id

db-google-bigquery-001

#### 2.4.3.2 Display Name

Google BigQuery

#### 2.4.3.3 Type

🔹 Data Warehouse

#### 2.4.3.4 Technology

Google BigQuery

#### 2.4.3.5 Order

3

#### 2.4.3.6 Style

| Property | Value |
|----------|-------|
| Shape | Database |
| Color | #4CAF50 |
| Stereotype | DWH |

### 2.4.4.0 Database

#### 2.4.4.1 Repository Id

data-persistence-layer

#### 2.4.4.2 Display Name

Firestore

#### 2.4.4.3 Type

🔹 Database

#### 2.4.4.4 Technology

Firestore

#### 2.4.4.5 Order

4

#### 2.4.4.6 Style

| Property | Value |
|----------|-------|
| Shape | Database |
| Color | #FF7043 |
| Stereotype | NoSQL |

### 2.4.5.0 External API

#### 2.4.5.1 Repository Id

api-sendgrid-001

#### 2.4.5.2 Display Name

SendGrid API

#### 2.4.5.3 Type

🔹 External API

#### 2.4.5.4 Technology

SendGrid REST API

#### 2.4.5.5 Order

5

#### 2.4.5.6 Style

| Property | Value |
|----------|-------|
| Shape | Interface |
| Color | #2196F3 |
| Stereotype | API |

## 2.5.0.0 Interactions

### 2.5.1.0 Scheduled Trigger

#### 2.5.1.1 Source Id

ops-google-cloud-scheduler-001

#### 2.5.1.2 Target Id

REPO-SERVER-FUNCTIONS-002

#### 2.5.1.3 Message

1. [Scheduler] Trigger function execution via Pub/Sub message

#### 2.5.1.4 Sequence Number

1

#### 2.5.1.5 Type

🔹 Scheduled Trigger

#### 2.5.1.6 Is Synchronous

❌ No

#### 2.5.1.7 Return Message



#### 2.5.1.8 Has Return

❌ No

#### 2.5.1.9 Is Activation

✅ Yes

#### 2.5.1.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | Pub/Sub |
| Method | onMessagePublished('tenant-usage-check-topic') |
| Parameters | Payload contains `{ cycle: 'YYYY-MM' }` |
| Authentication | Push subscription with authorized service account |
| Error Handling | Cloud Scheduler will retry on failure based on its... |
| Performance | N/A |

#### 2.5.1.11 Nested Interactions

*No items available*

### 2.5.2.0 Data Request

#### 2.5.2.1 Source Id

REPO-SERVER-FUNCTIONS-002

#### 2.5.2.2 Target Id

db-google-bigquery-001

#### 2.5.2.3 Message

2. Query aggregated project-wide usage for current billing cycle

#### 2.5.2.4 Sequence Number

2

#### 2.5.2.5 Type

🔹 Data Request

#### 2.5.2.6 Is Synchronous

✅ Yes

#### 2.5.2.7 Return Message

3. Return aggregated usage data

#### 2.5.2.8 Has Return

✅ Yes

#### 2.5.2.9 Is Activation

❌ No

#### 2.5.2.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | BigQuery API |
| Method | bigquery.createQueryJob() |
| Parameters | SQL query to sum usage metrics (e.g., Firestore re... |
| Authentication | Cloud Function service account with `roles/bigquer... |
| Error Handling | If query fails, log critical error and terminate f... |
| Performance | Query must be optimized to minimize cost, using da... |

#### 2.5.2.11 Nested Interactions

*No items available*

### 2.5.3.0 Data Request

#### 2.5.3.1 Source Id

REPO-SERVER-FUNCTIONS-002

#### 2.5.3.2 Target Id

data-persistence-layer

#### 2.5.3.3 Message

4. [Loop: For each tenant in usage data] Fetch subscription tier, limits, and sent alert status

#### 2.5.3.4 Sequence Number

4

#### 2.5.3.5 Type

🔹 Data Request

#### 2.5.3.6 Is Synchronous

✅ Yes

#### 2.5.3.7 Return Message

5. Return tenant configuration and alert status for current cycle

#### 2.5.3.8 Has Return

✅ Yes

#### 2.5.3.9 Is Activation

❌ No

#### 2.5.3.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | Firestore SDK |
| Method | db.collection('tenants').doc(tenantId).get() |
| Parameters | tenantId |
| Authentication | Authenticated via Firebase Admin SDK. |
| Error Handling | Log error and skip tenant if its configuration can... |
| Performance | Consider batching `getAll` requests if the number ... |

#### 2.5.3.11 Nested Interactions

- {'sourceId': 'REPO-SERVER-FUNCTIONS-002', 'targetId': 'data-persistence-layer', 'message': '6. [If threshold met & alert not sent] Start transaction to query Admins and update alert state', 'sequenceNumber': 6, 'type': 'Transaction', 'isSynchronous': True, 'returnMessage': '11. Transaction result (commit/rollback)', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'Firestore SDK', 'method': 'db.runTransaction(async (t) => { ... })', 'parameters': 'N/A', 'authentication': 'Authenticated via Firebase Admin SDK.', 'errorHandling': 'Transaction will automatically retry on contention. A hard failure will rollback all changes and the function will log the error.', 'performance': 'Ensures atomic read-modify-write operation.'}, 'nestedInteractions': [{'sourceId': 'REPO-SERVER-FUNCTIONS-002', 'targetId': 'data-persistence-layer', 'message': "7. Query for all users with 'Admin' role for the tenant", 'sequenceNumber': 7, 'type': 'Data Request', 'isSynchronous': True, 'returnMessage': '8. Return list of Admin user documents', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'Firestore SDK', 'method': "t.get(db.collection('users').where('tenantId', '==', tenantId).where('role', '==', 'Admin'))", 'parameters': "tenantId, role='Admin'", 'authentication': 'N/A (within transaction)', 'errorHandling': 'Failure will cause transaction to fail and retry.', 'performance': 'Requires a composite index on `tenantId` and `role`.'}, 'nestedInteractions': []}, {'sourceId': 'REPO-SERVER-FUNCTIONS-002', 'targetId': 'api-sendgrid-001', 'message': '9. [Loop: For each Admin] Send usage alert email', 'sequenceNumber': 9, 'type': 'API Call', 'isSynchronous': True, 'returnMessage': '10. Return email send status (e.g., 202 Accepted)', 'hasReturn': True, 'isActivation': False, 'technicalDetails': {'protocol': 'HTTPS/REST', 'method': 'POST /v3/mail/send', 'parameters': 'Payload with `to`, `from`, `subject`, `htmlContent` for the alert.', 'authentication': 'Bearer token with SendGrid API key fetched from Google Secret Manager.', 'errorHandling': 'If API call fails for a user, log the error but continue to next user. The overall alert status will not be updated, allowing a retry on the next run.', 'performance': 'N/A'}, 'nestedInteractions': []}, {'sourceId': 'REPO-SERVER-FUNCTIONS-002', 'targetId': 'data-persistence-layer', 'message': "11. Set alert status to 'sent' for this threshold and billing cycle", 'sequenceNumber': 11, 'type': 'Data Write', 'isSynchronous': False, 'returnMessage': '', 'hasReturn': False, 'isActivation': False, 'technicalDetails': {'protocol': 'Firestore SDK', 'method': "t.set(alertDocRef, { status: 'sent', sentAt: serverTimestamp() })", 'parameters': "Document path: `/tenants/{tenantId}/alerts/{billingCycle}_{metric}_{threshold}`. Data: `{ status: 'sent' }`.", 'authentication': 'N/A (within transaction)', 'errorHandling': 'This write is conditional on the success of the email sends. If all emails fail, this step is skipped, and the transaction commits only the reads.', 'performance': 'Part of an atomic operation.'}, 'nestedInteractions': []}]}

### 2.5.4.0 Deactivation

#### 2.5.4.1 Source Id

REPO-SERVER-FUNCTIONS-002

#### 2.5.4.2 Target Id

REPO-SERVER-FUNCTIONS-002

#### 2.5.4.3 Message

12. Deactivate

#### 2.5.4.4 Sequence Number

12

#### 2.5.4.5 Type

🔹 Deactivation

#### 2.5.4.6 Is Synchronous

❌ No

#### 2.5.4.7 Return Message



#### 2.5.4.8 Has Return

❌ No

#### 2.5.4.9 Is Activation

✅ Yes

#### 2.5.4.10 Technical Details

| Property | Value |
|----------|-------|
| Protocol | N/A |
| Method | N/A |
| Parameters | N/A |
| Authentication | N/A |
| Error Handling | N/A |
| Performance | N/A |

#### 2.5.4.11 Nested Interactions

*No items available*

## 2.6.0.0 Notes

### 2.6.1.0 Content

#### 2.6.1.1 Content

Business Logic: The function internally calculates the usage percentage for each metric (e.g., Firestore reads, invocations) by comparing BigQuery data against the limits defined in Firestore for the tenant's subscription tier. It proceeds to the notification steps only if a threshold is crossed AND a corresponding alert document for the current billing cycle does not already exist or is not marked as 'sent'.

#### 2.6.1.2 Position

Top

#### 2.6.1.3 Participant Id

REPO-SERVER-FUNCTIONS-002

#### 2.6.1.4 Sequence Number

5

### 2.6.2.0 Content

#### 2.6.2.1 Content

Idempotency: The state of sent alerts is stored in Firestore, keyed by tenant, billing cycle, metric, and threshold percentage (e.g., `2025-01_firestoreReads_80`). This prevents sending duplicate notifications for the same event within the same cycle, fulfilling business rule BR-002.

#### 2.6.2.2 Position

Middle

#### 2.6.2.3 Participant Id

data-persistence-layer

#### 2.6.2.4 Sequence Number

11

## 2.7.0.0 Implementation Guidance

| Property | Value |
|----------|-------|
| Security Requirements | The Cloud Function's service account must be grant... |
| Performance Targets | The BigQuery query must be cost-optimized and comp... |
| Error Handling Strategy | The function must be idempotent. Transient errors ... |
| Testing Considerations | Unit tests (Jest) should mock BigQuery, Firestore,... |
| Monitoring Requirements | Monitor function execution time, error rate, and m... |
| Deployment Considerations | The GCP Billing Export to BigQuery must be configu... |

