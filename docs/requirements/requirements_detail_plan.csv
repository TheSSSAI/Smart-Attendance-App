id,req_id,category,formalized_text,feature_group,original_text,assumptions,constraints,dependencies,detail_analysis,priority,validation_criteria
897,REQ-1-001,Functional,"The system shall be a cross-platform mobile application, supporting both Android and iOS, designed for attendance tracking. It must offer a multi-tiered subscription model, including a free tier for small teams and one or more paid tiers that provide access to advanced features or support for larger organizations.",Attendance_Management_System_Core,The system shall be developed as a cross-platform mobile attendance application with a free tier for small teams and optional paid tiers for larger organizations or advanced features.,['A payment gateway and subscription management service will be integrated to handle paid tiers.'],[],[],FALSE,high,"['Verify that the mobile application can be built and deployed for both Android and iOS platforms.', 'Confirm the existence of a subscription management system that can differentiate between free and paid tier tenants.', ""Verify that feature access can be restricted or enabled based on a tenant's subscription tier.""]"
898,REQ-1-002,Technical,"The system shall be architected as a multi-tenant platform where each organization is a logically isolated tenant. The data model and access controls must support hierarchical organizational structures, allowing for relationships such as Supervisor-to-Subordinate.",Attendance_Management_System_Core,The system shall be designed for organizations with a hierarchical structure. The system shall implement a multi-tenant architecture where each organization is an isolated tenant.,[],"[""Data segregation must be enforced primarily at the database level through security rules and queries.""]",[],FALSE,high,"['Verify that data created by a user in Tenant A is not visible or accessible to any user in Tenant B.', ""Confirm that the database schema supports linking users in a reporting hierarchy (e.g., a user having a 'supervisorId')."", 'Perform security testing to ensure no data leakage can occur between tenants.']"
899,REQ-1-003,Security,"The system shall implement a Role-Based Access Control (RBAC) model defining three distinct user roles: 'Admin', 'Supervisor', and 'Subordinate'. Each role must have a specific and non-overlapping set of permissions governing their access to data and system functions.",Attendance_Management_System_Core,"The system shall provide Role-based access control (RBAC) for Admin, Supervisor, and Subordinate user roles.",[],[],['REQ-1-002'],FALSE,high,"[""Verify that a user's role is stored and can be retrieved upon authentication."", ""Confirm that a user assigned the 'Subordinate' role cannot access administrative functions."", ""Confirm that a user assigned the 'Supervisor' role can access their team's data but not data from other teams."", ""Confirm that a user assigned the 'Admin' role has full access within their tenant.""]"
900,REQ-1-004,Functional,The system's mobile application shall allow users to mark their attendance by performing 'check-in' and 'check-out' actions. Each action must capture the user's precise GPS coordinates (latitude and longitude) at the time of the action.,Attendance_Management_System_Core,The system shall provide GPS-based attendance marking for check-in and check-out.,['Users will have smartphones with reliable GPS capabilities.'],"[""The functionality is dependent on the user's device having functional GPS and granting location permissions to the app.""]",[],FALSE,high,"[""Verify that the 'Check-In' button successfully captures and stores the user's current timestamp and GPS coordinates."", ""Verify that the 'Check-Out' button successfully captures and stores the user's current timestamp and GPS coordinates."", 'Confirm that the application requests and handles location permissions correctly.']"
901,REQ-1-005,Functional,The system shall implement a workflow where attendance records submitted by a Subordinate user enter a 'pending' state and must be reviewed by their designated Supervisor. The Supervisor must have the ability to either 'approve' or 'reject' these records.,Attendance_Management_System_Core,The system shall include a supervisor approval workflow for attendance records.,[],[],"['REQ-1-003', 'REQ-1-004']",FALSE,high,"[""Verify that a new attendance record has a default status of 'pending'."", 'Verify that a Supervisor can view a list of pending records from their direct subordinates.', ""Verify that a Supervisor can change a record's status to 'approved'."", ""Verify that a Supervisor can change a record's status to 'rejected'.""]"
902,REQ-1-006,Functional,"The system shall provide a formal workflow for users to request corrections to their existing attendance records. All stages of the correction process, including the initial request, justification, original data, corrected data, and the final approval or rejection, must be immutably logged for auditing purposes.",Attendance_Management_System_Core,The system shall include an auditable workflow for attendance corrections.,[],[],['REQ-1-005'],FALSE,high,"['Verify a Subordinate can submit a correction request for an attendance record.', 'Verify the request is routed to their Supervisor for approval.', 'Verify that upon approval, the attendance record is updated and the entire transaction is logged in an audit trail.', 'Verify the audit log entry for a correction cannot be modified or deleted.']"
903,REQ-1-007,Functional,"The system shall provide functionality for authorized users (Supervisors and Admins) to create events within a calendar interface. These events must be assignable to specific individuals, multiple individuals, or entire pre-defined teams.",Attendance_Management_System_Core,The system shall allow for calendar-based event creation and assignment to individuals and teams.,[],[],['REQ-1-003'],FALSE,medium,"['Verify a Supervisor can create a new event with a title, description, start time, and end time.', 'Verify the event can be assigned to one or more subordinates.', 'Verify the event can be assigned to a team, which implicitly assigns it to all team members.', 'Verify assigned users can view the event on their personal calendar within the app.']"
904,REQ-1-008,Functional,"The system shall provide a feature for Admins to configure an automated, scheduled export of attendance data to a specified Google Sheet. This process must be authenticated via OAuth 2.0 and run without manual intervention after initial setup.",Attendance_Management_System_Core,The system shall provide an automated data export feature to Google Sheets for reporting.,['The tenant Admin will have a Google account with the necessary permissions to create and edit Google Sheets.'],"[""The system's ability to export data is dependent on the availability and terms of service of the Google Sheets API.""]",['REQ-1-003'],FALSE,medium,"['Verify an Admin can authenticate with their Google account and link a Google Sheet to their tenant.', 'Verify that a scheduled function runs at a configured interval (e.g., daily).', 'Verify that new, approved attendance records are appended as rows to the linked Google Sheet.']"
905,REQ-1-009,Functional,"The mobile application must support core functions, specifically attendance marking (check-in/check-out), while the user's device is offline. Data captured offline must be stored locally and synced automatically upon restoration of network connectivity. If locally stored data fails to sync to the server after a predefined period (e.g., 24 hours), the user must receive a persistent in-app notification about the sync failure.",Attendance_Management_System_Core,The system shall provide offline capabilities for core functions. The system shall provide sync-failure notifications for offline data.,[],"[""Offline capabilities rely on the local storage capacity of the user's device and the persistence features of the client-side database.""]",['REQ-1-004'],FALSE,high,"['With the device in airplane mode, verify a user can perform a check-in and check-out.', 'Verify that after reconnecting to the network, the offline data is automatically synchronized with the server without user intervention.', 'Simulate a persistent sync failure and verify that a clear, non-dismissible notification appears in the app UI after 24 hours.']"
906,REQ-1-010,Functional,"The system shall provide a web-based administrative dashboard accessible via modern web browsers. This dashboard will serve as the primary interface for users with the 'Admin' role to perform tenant management, user management, configuration, and reporting tasks.",Attendance_Management_System_Core,The system shall include a web-based dashboard for administrative functions.,[],[],['REQ-1-003'],FALSE,high,"[""Verify that a user with the 'Admin' role can log in to a web application."", 'Verify the dashboard provides access to user management, team management, and reporting features.', ""Verify that users with 'Supervisor' or 'Subordinate' roles cannot access the web-based administrative dashboard.""]"
907,REQ-1-011,Technical,"The scope of the system is strictly limited. The system shall not include any features for payroll processing or integration with payroll systems. Advanced Human Resources (HR) management features, such as leave management, performance reviews, or benefits administration, are explicitly excluded. The only permitted third-party integrations are with Google Services (Maps, Sheets, Drive for export functionality) and the SendGrid transactional email provider for notifications.",Attendance_Management_System_Core,"The system shall explicitly exclude payroll processing or integration. The system shall explicitly exclude advanced HR management features beyond user and team management. The system shall explicitly exclude direct integration with third-party systems other than Google Services (Maps, Sheets, Drive) and the SendGrid transactional email provider.",[],"[""No development effort shall be allocated to features outside these explicit boundaries.""]",[],FALSE,high,"['Review the final feature set to confirm no payroll calculation or export features exist.', 'Review the final feature set to confirm no advanced HR features (e.g., leave request system) have been implemented.', 'Audit all external API calls to ensure they are limited to the approved Google Services and SendGrid.']"
908,REQ-1-012,Technical,"The system's entire infrastructure must be deployed on the Google Firebase and Google Cloud Platform (GCP). The system shall not be designed to support, nor will support be provided for, any on-premise or self-hosted deployments.",Attendance_Management_System_Core,The system shall be exclusively cloud-based on Firebase/GCP and shall not support on-premise deployment.,[],"[""The architecture will be tightly coupled with the Firebase/GCP ecosystem.""]",[],FALSE,high,"['Verify all backend services (database, authentication, functions) are deployed on Firebase/GCP.', 'Confirm there is no documentation or code that facilitates on-premise installation.']"
909,REQ-1-013,Technical,"The system architecture shall be serverless, utilizing the Google Firebase platform for all backend services. This includes Firebase Authentication for user identity management, Firestore for the database, and Firebase Cloud Messaging for push notifications. The mobile client for all user roles shall be a single codebase developed using the Flutter framework. All custom server-side logic, including reporting aggregations and third-party integrations, must be implemented as Firebase Cloud Functions.",Attendance_Management_System_Core,"The system shall be a self-contained, serverless system built on the Google Firebase platform. The system shall consist of a cross-platform mobile client developed using Flutter for all user roles. The system shall leverage Firebase services for backend functionality, including authentication, database, and notifications. The system shall handle server-side logic for reporting and integrations using Firebase Cloud Functions.",[],"[""The choice of technology is restricted to Flutter for the client and the Firebase suite for the backend.""]",['REQ-1-012'],FALSE,high,"['Verify the mobile application is written in Dart using the Flutter framework.', 'Verify user authentication is handled by the Firebase Authentication service.', 'Verify the primary application database is Firestore.', 'Verify that server-side tasks like the Google Sheets export are implemented as Cloud Functions.']"
910,REQ-1-014,Functional,The system must integrate with two external Google APIs. It shall use the Google Maps API to display map visualizations of check-in and check-out locations within the application. It shall use the Google Sheets API to programmatically write attendance data to a user-specified spreadsheet.,Attendance_Management_System_Core,The system shall interface with the external Google Maps API for mapping functionality. The system shall interface with the external Google Sheets API for data export functionality.,['API keys for Google Cloud Platform services will be provisioned and securely managed.'],"[""The system is dependent on the availability, pricing, and terms of service of the Google Maps and Google Sheets APIs.""]","['REQ-1-004', 'REQ-1-008']",FALSE,high,"['Verify that when viewing an attendance record, a map is displayed showing the location of the check-in/out pin.', 'Verify that the automated export feature successfully makes API calls to the Google Sheets API to append rows.']"
911,REQ-1-015,Functional,"The system shall implement an 'Admin' role with comprehensive permissions within their own tenant. These permissions must include: 1) Creating, inviting, and deactivating any user account. 2) Performing all CRUD (Create, Read, Update, Delete) operations on teams. 3) Configuring tenant-wide settings and policies via the web dashboard. 4) Viewing and exporting all system-generated reports. 5) Managing the integration with Google Sheets, including authentication and configuration.",Attendance_Management_System_Core,"The system shall define an 'Admin' user role with full access to their tenant's data. The Admin role shall have permissions to create, invite, and deactivate all users within their tenant. The Admin role shall have permissions to create, update, and delete teams. The Admin role shall have permissions to define organizational policies and settings via the Admin dashboard. The Admin role shall have permissions to view all reports. The Admin role shall have permissions to manage Google Sheets integration.",[],"[""An Admin's permissions are strictly confined to their own tenant.""]",['REQ-1-003'],FALSE,high,"['Log in as an Admin and verify the ability to invite a new user.', 'Log in as an Admin and verify the ability to create a new team and assign members.', 'Log in as an Admin and verify access to the tenant configuration page.', 'Log in as an Admin and verify that all reports are visible and can be generated.', 'Log in as an Admin and verify the ability to initiate the Google Sheets OAuth flow.']"
912,REQ-1-016,Functional,"The 'Admin' role shall have the unique ability to perform direct edits on data records, such as attendance times, bypassing the standard correction approval workflow. Every direct edit action must be immutably recorded in the audit log and must require the Admin to enter a mandatory justification. Furthermore, the Admin role shall be the only role with the permission to initiate the tenant offboarding process, which requests the permanent deletion of all the organization's data.",Attendance_Management_System_Core,"The Admin role shall have permissions to perform direct data edits, which shall be audited. Direct edits bypass the standard correction workflow but require mandatory justification. The Admin role shall have permissions to initiate the tenant offboarding and data deletion process.",[],[],"['REQ-1-015', 'REQ-1-006']",FALSE,high,"[""Log in as an Admin and directly modify an attendance record's time. Verify the system requires a justification."", 'Check the audit log to confirm the direct edit, the old value, the new value, the acting Admin, and the justification were recorded.', 'Log in as an Admin and verify the presence of an interface to request tenant data deletion.', 'Verify that a Supervisor or Subordinate cannot perform direct edits or see the tenant deletion option.']"
913,REQ-1-017,Functional,The system shall implement a 'Supervisor' role with permissions focused on team management. These permissions must include: 1) Viewing and managing the profiles and attendance records of their direct subordinates only. 2) Creating events and assigning them to their team members. 3) Approving or rejecting attendance records and correction requests submitted by their subordinates. 4) Adding or removing members from the specific teams they are assigned to supervise.,Attendance_Management_System_Core,The system shall define a 'Supervisor' user role for managing a team of subordinates. The Supervisor role shall have permissions to view and manage the profiles and attendance records of their direct subordinates. The Supervisor role shall have permissions to create and assign events to their team members. The Supervisor role shall have permissions to approve or reject attendance and correction requests from their subordinates. The Supervisor role shall have permissions to manage the membership of teams they supervise.,[],"[""A Supervisor's access is limited to their direct subordinates and the teams they explicitly manage.""]",['REQ-1-003'],FALSE,high,"['Log in as a Supervisor and verify they can only see attendance records for users who report directly to them.', 'Verify a Supervisor can create an event and assign it to their team.', 'Verify a Supervisor has an interface to approve/reject pending attendance records.', 'Verify a Supervisor can add a new user to a team they manage.', 'Verify a Supervisor cannot view records for users outside their reporting line.']"
914,REQ-1-018,Functional,The system's data model and RBAC logic must support multi-level hierarchies. A single user account must be able to simultaneously hold the 'Supervisor' role for their own team while also being a 'Subordinate' to a higher-level manager.,Attendance_Management_System_Core,"A user with the Supervisor role may also be a Subordinate to another Supervisor, enabling multi-level hierarchies.",[],[],['REQ-1-017'],FALSE,medium,"['Create a three-level hierarchy: User A (Admin), User B (Supervisor reporting to A), and User C (Subordinate reporting to B).', ""Log in as User B and verify they can manage User C's attendance."", 'Log in as User B and verify they can perform Subordinate actions for themselves (e.g., check-in).', 'Log in as User A and verify they can manage User B as a subordinate (if A is also a supervisor).']"
915,REQ-1-019,Functional,"The system shall implement a 'Subordinate' role with the most restricted permissions, limited to self-service actions. These permissions must include: 1) Viewing their own user profile and historical attendance data. 2) Marking their own attendance via check-in and check-out. 3) Initiating a correction request for their own attendance records. 4) Viewing a calendar of events that have been assigned to them.",Attendance_Management_System_Core,The system shall define a 'Subordinate' user role as the primary end-user. The Subordinate role shall only have permissions to access their own profile and attendance data. The Subordinate role shall have permissions to mark their own attendance. The Subordinate role shall have permissions to request corrections to their own attendance records. The Subordinate role shall have permissions to view events assigned to them.,[],"[""A Subordinate must never be able to view or modify data belonging to another user.""]",['REQ-1-003'],FALSE,high,"['Log in as a Subordinate and verify they can view their own attendance history but not that of other users.', 'Verify a Subordinate can successfully check-in and check-out.', 'Verify a Subordinate can submit a correction request for one of their past records.', 'Verify a Subordinate can see events assigned to them on a calendar view.']"
916,REQ-1-020,Technical,The deployment infrastructure shall consist of at least three separate and isolated Google Firebase projects to support the development lifecycle: 1) A 'Development' project for local development and unit testing. 2) A 'Staging' project for User Acceptance Testing (UAT) and pre-production validation. 3) A 'Production' project for the live application used by end-users.,Attendance_Management_System_Core,The system shall utilize a dedicated Firebase project for development and testing. The system shall utilize a separate Firebase project for Staging/UAT. The system shall utilize a dedicated Firebase project for the live Production environment.,[],"[""Data shall not be shared or replicated between these environment projects.""]",['REQ-1-012'],FALSE,high,"['Confirm the existence of three distinct Firebase projects with appropriate naming conventions (e.g., myapp-dev, myapp-staging, myapp-prod).', 'Verify that CI/CD pipelines are configured to deploy to the correct environment based on the source branch.']"
917,REQ-1-021,Technical,The mobile application must be compatible with and fully functional on smartphones that have GPS capabilities. The minimum supported operating system versions are Android 6.0 (API level 23) and iOS 12.0.,Attendance_Management_System_Core,The mobile application shall run on Android or iOS smartphones with GPS capabilities. The mobile client shall support Android 6.0 (Marshmallow) or later. The mobile client shall support iOS 12.0 or later.,[],[],['REQ-1-001'],FALSE,medium,"[""Test the application's core features on an emulator or physical device running Android 6.0."", ""Test the application's core features on an emulator or physical device running iOS 12.0."", 'Verify the application fails gracefully or is blocked from installation on unsupported OS versions.']"
918,REQ-1-022,Technical,"The web-based administrative dashboard must be fully functional and render correctly on the latest stable release versions of the following web browsers: Google Chrome, Mozilla Firefox, Apple Safari, and Microsoft Edge.",Attendance_Management_System_Core,"The web dashboard shall be accessible on the latest stable versions of modern web browsers, including Chrome, Firefox, Safari, and Edge.",[],[],['REQ-1-010'],FALSE,medium,"['Execute a suite of UI tests for the admin dashboard on the latest version of Chrome.', 'Execute a suite of UI tests for the admin dashboard on the latest version of Firefox.', 'Execute a suite of UI tests for the admin dashboard on the latest version of Safari.', 'Execute a suite of UI tests for the admin dashboard on the latest version of Edge.']"
919,REQ-1-023,Security,"The system must provide users with a clear and accessible Privacy Policy and Terms of Service. These documents must explicitly detail the collection, storage, and use of personal data, particularly location data, in a manner compliant with GDPR. A new user must be required to affirmatively accept these policies before their account can be activated and used.",Attendance_Management_System_Core,"The application shall have a clear Privacy Policy and Terms of Service regarding the collection and use of location data, designed to comply with target data privacy regulations such as GDPR. User acceptance of these policies shall be a mandatory prerequisite for account activation.",[],[],[],FALSE,high,"['Verify that the registration flow presents the Privacy Policy and Terms of Service to the user.', 'Verify that there is a checkbox or button for the user to explicitly accept the terms.', 'Confirm that an account cannot be used for login until the terms have been accepted.', 'Legal review confirms the policy documents are GDPR compliant.']"
920,REQ-1-024,Technical,"The system must support data residency requirements by allowing an organization's data to be stored in a specific GCP region. The desired region shall be selected by the Admin during the tenant creation process from a list of supported regions. All of that tenant's data, primarily Firestore documents, must reside within the selected GCP region.",Attendance_Management_System_Core,"All tenant data shall be stored within a specified GCP region to comply with data residency requirements, configurable at the tenant's subscription level.",[],"[""This may require a multi-project architecture or careful use of Firestore's location settings.""]",['REQ-1-002'],FALSE,high,"['Verify the tenant registration form includes a selection for a GCP region.', ""Create a new tenant and select a specific region (e.g., 'europe-west1')."", 'Inspect the underlying Firebase/GCP project configuration to confirm the Firestore database for that tenant is located in the selected region.']"
921,REQ-1-025,Security,"The primary mechanism for enforcing multi-tenant data segregation shall be Firestore Security Rules. Upon authentication, each user's ID token must contain a `tenantId` custom claim. All database security rules must use this claim to ensure that read and write operations are restricted to documents associated with the user's own tenant.",Attendance_Management_System_Core,Data segregation between tenants shall be strictly enforced at the database level using Firestore Security Rules based on the user's `tenantId` custom claim.,[],[],['REQ-1-002'],FALSE,high,"[""Verify that the user authentication process correctly sets a `tenantId` custom claim on the user's token."", 'Write a Firestore security rule that allows access only if `request.auth.token.tenantId == resource.data.tenantId`.', 'Write a test case where a user from Tenant A attempts to read data from Tenant B and verify the operation is denied by security rules.']"
922,REQ-1-026,Functional,"The system must implement a business rule to prevent the creation of circular reporting hierarchies. When an Admin or Supervisor attempts to assign a supervisor to a user, the system must validate that this assignment does not result in a loop (e.g., A reports to B, and B reports to A). The operation must be blocked if a circular dependency is detected.",Attendance_Management_System_Core,"A user cannot be their own supervisor, directly or indirectly in a reporting chain. The system shall prevent the creation of such circular reporting structures.",[],"[""This validation may need to be performed in a Cloud Function to traverse the hierarchy.""]",['REQ-1-017'],FALSE,medium,"[""Attempt to set a user's supervisor to themselves and verify the system returns an error."", ""Create a scenario where User A reports to User B. Attempt to set User B's supervisor to User A and verify the system returns an error."", ""Create a longer chain (A->B->C) and attempt to set C's supervisor to A, verifying the system detects and blocks the loop.""]"
923,REQ-1-027,Functional,"The system shall enforce a business rule that a single attendance record, consisting of one check-in and one check-out, must occur within the same calendar day. The definition of a 'day' is determined by the timezone configured for the tenant. If a user is checked in past midnight in the tenant's timezone, they must perform a new check-in for the new day.",Attendance_Management_System_Core,"A check-in and its corresponding check-out must occur on the same calendar day, as defined by the tenant's configured timezone. A new day requires a new check-in.",[],[],"['REQ-1-004', 'REQ-1-061']",FALSE,medium,"[""Set a tenant's timezone to EST."", 'Perform a check-in at 11:55 PM EST.', 'Attempt to perform a check-out at 12:05 AM EST on the next day and verify the system handles this case correctly, likely by auto-checking out the previous day and requiring a new check-in.']"
924,REQ-1-028,Security,"The system shall maintain an `auditLog` collection in Firestore for recording critical actions. This collection must be configured to be immutable. Firestore Security Rules must be written to explicitly deny all update and delete operations on any document within the `/auditLog/` path, regardless of the user's role.",Attendance_Management_System_Core,"The `auditLog` collection shall be immutable. Records written to this collection cannot be updated or deleted by any user role, including Admin, via application logic or security rules.",[],[],['REQ-1-006'],FALSE,high,"['Write Firestore security rules that prevent `update` and `delete` on the `auditLog` collection.', 'Write a test case that attempts to modify an existing audit log entry as an Admin and verify the operation is denied.', 'Write a test case that attempts to delete an existing audit log entry as an Admin and verify the operation is denied.']"
925,REQ-1-029,Functional,"The system must enforce a business rule to prevent users from becoming orphaned in the hierarchy. When an Admin attempts to deactivate a user who is a Supervisor, the system must first check if they have any direct subordinates. If they do, the deactivation process must be blocked until the Admin reassigns each of those subordinates to a new, active Supervisor.",Attendance_Management_System_Core,"If a Supervisor is deactivated, the system shall require an Admin to reassign all of their direct subordinates to a new Supervisor before the deactivation can be finalized.",[],[],"['REQ-1-015', 'REQ-1-017']",FALSE,medium,"['Create a Supervisor with two subordinates.', 'Attempt to deactivate the Supervisor and verify the system presents an error message and a prompt to reassign the subordinates.', 'Reassign the subordinates to another Supervisor.', 'Attempt to deactivate the original Supervisor again and verify the action is now successful.']"
926,REQ-1-030,Functional,"When an Admin performs a direct data edit, the user interface must require them to enter a justification for the change. The system shall enforce a minimum length of 20 characters for this justification text. The provided justification must be stored as part of the corresponding entry in the immutable `auditLog` collection.",Attendance_Management_System_Core,"All direct data edits performed by an Admin must include a justification of at least 20 characters, which is stored in the audit log.",[],[],"['REQ-1-016', 'REQ-1-028']",FALSE,medium,"['As an Admin, attempt to save a direct edit with a justification of 10 characters and verify the UI shows a validation error.', 'Enter a justification of 25 characters and save the edit.', 'Inspect the created audit log entry and verify the full justification text is present.']"
927,REQ-1-031,Security,"The system shall enforce a mandatory password policy for all users. Passwords must meet the following criteria: a minimum length of 8 characters, at least one uppercase letter (A-Z), at least one lowercase letter (a-z), at least one number (0-9), and at least one special character (e.g., !@#$%). This policy must be validated by the system during the new user registration process and during any password reset flow.",Attendance_Management_System_Core,"The password policy for all users shall require a minimum of 8 characters, including at least one uppercase letter, one lowercase letter, one number, and one special character. This policy shall be enforced during registration and password reset.",[],[],[],FALSE,high,"[""During registration, attempt to set a password that does not meet one of the criteria (e.g., 'password123') and verify the system returns a specific error."", ""During registration, set a password that meets all criteria (e.g., 'Password!1') and verify it is accepted."", 'Initiate a password reset and verify the new password is validated against the same policy.']"
928,REQ-1-032,Functional,"The system shall provide a public-facing registration page for a new organization's first Admin user. This process must capture necessary information, including an organization name. Before creating the new tenant, the system must perform a global validation to ensure the chosen organization name is unique across all existing tenants. If the name is not unique, the registration must be blocked with an appropriate error message.",Attendance_Management_System_Core,"The system shall allow an initial Admin user to register their organization, which shall create a new, isolated tenant instance. The system shall validate that the chosen organization name is globally unique before creating the tenant.",[],[],['REQ-1-002'],FALSE,high,"[""Register a new organization with the name 'Test Corp'."", ""Attempt to register a second organization with the name 'Test Corp' and verify the system displays a 'name already taken' error."", 'Successfully register a new organization with a unique name.']"
929,REQ-1-033,Functional,"Upon successful registration of a new organization, the system must perform the following atomic operations: 1) Create a new document in the `/tenants` collection in Firestore, representing the new tenant. 2) Create a new user document in the `/users` collection for the registering Admin, assigning them the 'Admin' role and linking them to the new tenant. 3) Set two custom claims on the Admin's Firebase Authentication user object: `tenantId` (with the new tenant's ID) and `role` (with the value 'Admin').",Attendance_Management_System_Core,"Upon Admin registration with a unique organization name and credentials, the system shall create a new tenant document in Firestore under `/tenants/{tenantId}`. Upon Admin registration, the system shall create a new user document for the Admin with the 'Admin' role. Upon Admin registration, the system shall set custom claims (`tenantId`, `role: 'Admin'`) on the user's Firebase Auth token.",[],[],['REQ-1-032'],FALSE,high,"['After a successful registration, query the `/tenants` collection and verify a new document exists.', 'Query the `/users` collection and verify a new user document exists with the correct role and tenant ID.', 'Inspect the ID token of the newly logged-in Admin and verify the `tenantId` and `role` custom claims are present and correct.']"
930,REQ-1-034,Functional,"The Admin web dashboard must contain a feature for an Admin to initiate the permanent deletion of their entire tenant. To prevent accidental data loss, this action must be protected by a confirmation step that requires the Admin to re-enter their password to proceed. The UI must clearly warn the user that this action is irreversible.",Attendance_Management_System_Core,"The system shall provide a mechanism in the Admin dashboard for an Admin to request the permanent deletion of their organization's tenant and all associated data. This action shall require explicit confirmation, including re-authentication, to prevent accidental deletion.",[],[],['REQ-1-016'],FALSE,high,"['As an Admin, navigate to the tenant deletion section.', 'Click the delete button and verify a confirmation modal appears.', 'Verify the modal requires password re-authentication before the action can be confirmed.']"
931,REQ-1-035,Functional,"Upon confirmed request for deletion, the system shall mark the tenant with a 'pending_deletion' status and record the request timestamp. This initiates a 30-day grace period, during which the Admin can reverse the action. A daily scheduled Cloud Function must identify tenants whose grace period has expired. For each expired tenant, the function must systematically and irreversibly delete all associated data from all Firestore collections, including but not limited to users, teams, attendance, events, and audit logs.",Attendance_Management_System_Core,"Upon confirmation, the tenant shall be marked for deletion, entering a 30-day grace period during which the action can be reversed by the Admin. After the grace period, a scheduled Cloud Function shall be triggered to systematically and irreversibly delete all data associated with that `tenantId` from all collections, including users, teams, attendance, events, and audit logs.",[],"[""The deletion process must be robust and handle large amounts of data without timing out.""]",['REQ-1-034'],FALSE,high,"[""Initiate tenant deletion and verify the tenant's status is updated to 'pending_deletion'."", 'Verify the Admin has an option to cancel the deletion during the 30-day period.', 'Manually trigger the deletion function for a test tenant whose grace period has expired and verify that all its associated data across all collections is permanently removed.']"
932,REQ-1-036,Functional,"The Admin dashboard shall provide an interface for Admins to invite new users by providing their email address and assigning a role. Upon invitation, the system must: 1) Create a new user document in Firestore with a status of 'invited'. 2) Trigger the sending of an invitation email to the specified address using the SendGrid service. 3) The invitation email must contain a unique registration link that is valid for only 24 hours.",Attendance_Management_System_Core,"The system shall allow Admins to invite new users (Supervisors, Subordinates) via email. When an Admin invites a user, the system shall create a new user document with a status of `invited`. When an Admin invites a user, the system shall send an invitation email with a unique, 24-hour time-limited registration link to the employee, utilizing the SendGrid transactional email service integrated via a Firebase Extension.",[],"[""The system is dependent on the SendGrid API for email delivery.""]",['REQ-1-015'],FALSE,high,"[""As an Admin, invite a new user and verify a user document is created with 'invited' status."", 'Verify the invited user receives an email from the system.', 'Verify the link in the email is unique.', 'Attempt to use the link after 24 hours and verify it has expired and is no longer valid.']"
933,REQ-1-037,Functional,"When an invited user follows the registration link and successfully sets their password, the system must update their user document status from 'invited' to 'active'. Once active, the user shall be able to log in. Admins must have the ability to change a user's status to 'deactivated'. The system's authentication logic must prevent any user with a 'deactivated' status from successfully logging in.",Attendance_Management_System_Core,"When an invited user clicks the registration link and sets their password, their user status shall be updated to `active`. Upon activation, the system shall allow the new user to log in. The system shall allow an Admin to deactivate a user. When an Admin deactivates a user, the user's status shall be set to `deactivated`. A user with a `deactivated` status shall be prevented from logging in.",[],[],['REQ-1-036'],FALSE,high,"[""Complete the registration flow for an invited user and verify their status changes to 'active'."", 'Verify the newly active user can log in.', ""As an Admin, deactivate the user's account."", 'Attempt to log in with the deactivated account and verify that access is denied with an appropriate message.']"
934,REQ-1-038,Functional,"The Admin web dashboard must include a team management section that allows Admins to perform full CRUD (Create, Read, Update, Delete) operations on teams. When creating a team, an Admin must specify a team name and assign a Supervisor. Both Admins and the designated Supervisor of a team must have the ability to manage the team's membership by adding or removing Subordinates.",Attendance_Management_System_Core,"The system shall provide an interface in the Admin dashboard for Admins to create, view, update, and delete teams within their tenant. The team creation process shall allow an Admin to specify a team name and assign a Supervisor to the team. The interface shall allow Admins and the assigned Supervisor to add or remove Subordinates from a team's member list.",[],[],"['REQ-1-015', 'REQ-1-017']",FALSE,high,"['As an Admin, create a new team, name it, and assign a Supervisor.', 'As an Admin, add two members to the team.', 'Log in as the assigned Supervisor and verify the ability to remove one member and add a different one.', 'As an Admin, delete the team and verify it is removed from the system.']"
935,REQ-1-039,Security,"The system shall provide authentication for registered users via two methods: email and password, or a One-Time Password (OTP) sent to their registered phone number. To mitigate brute-force attacks, the system must use Firebase Authentication's built-in protection, which will automatically temporarily disable an account for a period of time (e.g., 15 minutes) after 5 consecutive failed login attempts.",Attendance_Management_System_Core,The system shall allow registered users to log in using their credentials (Email/Password or Phone OTP). The system shall implement brute-force protection by temporarily locking an account for 15 minutes after 5 failed login attempts.,[],[],[],FALSE,high,"['Verify a user can log in using their email and password.', 'Verify a user can log in by receiving and entering an OTP to their phone.', 'Attempt to log in with an incorrect password 5 times in a row for a single account.', 'On the 6th attempt, verify the system returns an error indicating the account is temporarily locked.']"
936,REQ-1-040,Functional,"The application's login screen must include a 'Forgot Password' link or button. When a user provides their email address through this flow, the system shall leverage the built-in password reset functionality of Firebase Authentication to send a secure, time-limited password reset link to that email address.",Attendance_Management_System_Core,"The login screen shall provide a 'Forgot Password' link. Upon a user's request, the system shall use Firebase Authentication's built-in functionality to send a password reset link to the user's registered email address.",[],[],[],FALSE,high,"[""Verify the 'Forgot Password' link is present on the login screen."", ""Enter a registered user's email and trigger the reset process."", 'Confirm that an email containing a password reset link is received.', 'Successfully reset the password using the link.']"
937,REQ-1-041,Functional,"After a user successfully authenticates, the system must check their assigned role. Based on the role, the application shall navigate the user to the correct initial view or dashboard: the web admin dashboard for Admins, the team management view for Supervisors, or the personal attendance view for Subordinates.",Attendance_Management_System_Core,"Upon successful login, the system shall route the user to the appropriate dashboard based on their assigned role (Admin, Supervisor, or Subordinate).",[],[],['REQ-1-003'],FALSE,high,"['Log in as a Subordinate and verify the app opens to their check-in/calendar screen.', 'Log in as a Supervisor and verify the app opens to their team overview/approval screen.', 'Log in as an Admin and verify they are directed to the main web dashboard.']"
938,REQ-1-042,Functional,"When a user initiates a 'check-in', the mobile application must capture the client device's current timestamp and the user's GPS coordinates (latitude, longitude, and horizontal accuracy). This data shall be used to create a new attendance document in Firestore. The new document must include fields for `checkInTime` (using the client timestamp), `checkInGps`, and have its initial status set to `pending`.",Attendance_Management_System_Core,"When a user checks in, the app shall capture the current timestamp from the client device (`clientTimestamp`) and the user's current GPS coordinates, including horizontal accuracy in meters. Upon check-in, the system shall create a new attendance record in Firestore with a `checkInTime`, `checkInGps`, and a status of `pending`.",[],[],['REQ-1-004'],FALSE,high,"['Perform a check-in and inspect the created Firestore document.', 'Verify the `checkInTime` field matches the time on the client device.', 'Verify the `checkInGps` field contains the correct geographic coordinates and an accuracy value.', ""Verify the `status` field is set to 'pending'.""]"
939,REQ-1-043,Functional,"When a user initiates a 'check-out', the application must capture the client's current timestamp and GPS coordinates. This action must update the existing attendance record that was created at check-in for that day. The `checkOutTime` and `checkOutGps` fields of that specific record shall be populated. The 'Check-Out' button in the UI must be disabled or hidden until a check-in has been successfully recorded for the current day.",Attendance_Management_System_Core,"When a user checks out, the app shall capture the current timestamp and the user's current GPS coordinates. Upon check-out, the system shall update the *same* attendance record with a `checkOutTime` and `checkOutGps`. The ""Check-Out"" button shall be disabled until a ""Check-In"" has been performed for the current record.",[],[],['REQ-1-042'],FALSE,high,"[""Open the app as a new user for the day and verify the 'Check-Out' button is disabled."", ""Perform a check-in. Verify the 'Check-Out' button becomes enabled."", 'Perform a check-out and inspect the same Firestore document to verify that `checkOutTime` and `checkOutGps` fields are now populated.']"
940,REQ-1-044,Functional,"When an attendance record is created or updated on the server, a `serverTimestamp` field must be populated using Firestore's `FieldValue.serverTimestamp()`. A Cloud Function trigger on write must then compare the `clientTimestamp` (from check-in or check-out) with this `serverTimestamp`. If the absolute difference between the two timestamps is greater than 5 minutes, the function must add a 'clock_discrepancy' flag to the attendance record.",Attendance_Management_System_Core,"Upon successful sync of the record to the server, the system shall record a `serverTimestamp` using `FieldValue.serverTimestamp()` to validate when the data was received. The system shall compare the `clientTimestamp` with the `serverTimestamp`. If a discrepancy greater than 5 minutes is detected, the record shall be flagged as `clock_discrepancy` for administrative review.",[],[],['REQ-1-042'],FALSE,medium,"[""Manually set a device's clock back by 10 minutes."", 'Perform a check-in.', ""Inspect the created attendance record in Firestore and verify it contains the 'clock_discrepancy' flag.""]"
941,REQ-1-045,Functional,"The system shall support an automated check-out feature, configurable by the Admin. A scheduled Cloud Function must execute daily at the configured auto-checkout time for each tenant, respecting the tenant's timezone. This function will query for all attendance records from that day that have a `checkInTime` but no `checkOutTime`. For each found record, the function must update it by setting the `checkOutTime` to the configured time and adding an 'auto-checked-out' flag.",Attendance_Management_System_Core,"The system shall provide a configurable option to automatically check out users who have not checked out manually by a predefined time. A scheduled Cloud Function shall run at the configured auto-checkout time, respecting the tenant's configured timezone. The function shall find attendance records with a `checkInTime` but a null `checkOutTime` for that day. The function shall update those records with a `checkOutTime` equal to the configured end-of-workday time. The function shall mark the record with a flag `auto-checked-out`.",[],[],['REQ-1-061'],FALSE,medium,"['Configure auto-checkout for a tenant at 5:00 PM.', 'Create an attendance record with only a check-in at 9:00 AM.', ""After 5:00 PM, verify the scheduled function has run and the record now has a `checkOutTime` of 5:00 PM and the 'auto-checked-out' flag.""]"
942,REQ-1-046,Functional,"When the mobile application detects it is offline, any attendance marking actions (check-in/out) must be written to the local Firestore cache. As part of this local write, a flag `isOfflineEntry` must be set to `true` on the record. The application must rely on the Firebase SDK's built-in offline persistence to automatically synchronize these cached records with the server once network connectivity is restored.",Attendance_Management_System_Core,"When offline, attendance data shall be written to the local Firestore cache with a flag `isOfflineEntry` set to `true`. When device connectivity is restored, the Firestore SDK shall automatically sync the local data to the server.","[""Firestore's offline persistence is enabled and configured correctly in the mobile client.""]",[],['REQ-1-009'],FALSE,high,"['Enable airplane mode on a device.', 'Perform a check-in.', 'Disable airplane mode.', 'Inspect the record in the Firestore console and verify it exists and contains the `isOfflineEntry: true` flag.']"
943,REQ-1-047,Functional,"The mobile application must track the status of locally cached offline records. If a record remains unsynchronized for more than 24 hours, the application must display a persistent, non-dismissible UI element (e.g., a banner or dialog) informing the user of the sync failure. This notification must include an option for the user to manually retry the synchronization and should provide simple troubleshooting steps (e.g., 'Check your internet connection').",Attendance_Management_System_Core,"If a record stored offline fails to sync after 24 hours, the system shall show the user a persistent, non-dismissible notification in the app. Upon sync failure, the system shall prompt the user to manually trigger the sync and provide guidance on resolving the issue.",[],[],['REQ-1-009'],FALSE,medium,"['Create an offline record and prevent it from syncing for 24 hours (e.g., by keeping the device offline).', 'After 24 hours, open the app and verify a persistent notification about the sync failure is visible.', ""Verify the notification includes a 'Retry Sync' button.""]"
944,REQ-1-048,Functional,"The application must provide a dashboard view for Supervisors that lists all attendance records from their direct subordinates with a 'pending' status. Within this list, any record that has the `isOfflineEntry` flag or the `clock_discrepancy` flag must be visually distinguished (e.g., with an icon or different color) to alert the Supervisor that it may require closer inspection.",Attendance_Management_System_Core,"The system shall provide Supervisors with a dashboard to view all pending attendance records from their direct subordinates. The Supervisor dashboard shall visually distinguish attendance records that were created offline (i.e., have the `isOfflineEntry` flag) or have a `clock_discrepancy` flag to allow for additional scrutiny.",[],[],"['REQ-1-017', 'REQ-1-044', 'REQ-1-046']",FALSE,high,"['Create a pending record that was marked offline.', 'Create a pending record with a clock discrepancy.', 'Create a normal pending record.', 'Log in as the Supervisor and verify all three records appear in the dashboard.', 'Verify the first two records have a clear visual indicator that differentiates them from the normal record.']"
945,REQ-1-049,Functional,"From their dashboard, a Supervisor must be able to approve or reject pending attendance records. Approving a record shall change its status to 'approved'. Rejecting a record shall change its status to 'rejected'. The system must require the Supervisor to provide a textual reason for the rejection, which will be stored in the attendance record and made visible to the Subordinate whose record was rejected.",Attendance_Management_System_Core,"The system shall allow a Supervisor to approve selected records, which changes their status to `approved`. The system shall allow a Supervisor to reject selected records, which changes their status to `rejected`. The system shall require a Supervisor to provide a reason when rejecting a record, and this reason shall be stored in the attendance record and be visible to the Subordinate.",[],[],['REQ-1-005'],FALSE,high,"[""As a Supervisor, approve a pending record and verify its status changes to 'approved'."", 'As a Supervisor, attempt to reject a record without providing a reason and verify the UI prevents this.', ""Reject a record with a reason. Verify its status changes to 'rejected' and the reason is saved."", 'Log in as the Subordinate and verify they can see the record was rejected and view the reason.']"
946,REQ-1-050,Functional,The Supervisor's approval dashboard must support bulk operations. The interface shall allow the Supervisor to select multiple pending attendance records simultaneously and apply a single action (either 'approve' or 'reject') to all selected records at once.,Attendance_Management_System_Core,"The Supervisor dashboard shall support bulk actions, allowing the selection of multiple records to be approved or rejected at once.",[],"[""Bulk rejection may not be feasible if a reason is required for each individual rejection.""]",['REQ-1-048'],FALSE,medium,"['In the Supervisor dashboard, select three pending records.', ""Click a bulk 'Approve' button."", ""Verify that all three records have their status updated to 'approved'.""]"
947,REQ-1-051,Functional,"The system shall implement an approval escalation workflow. A scheduled Cloud Function must run daily to identify pending attendance records that have remained un-actioned beyond a tenant-configurable deadline. For each such record, the function must identify the current Supervisor's own supervisor (the next level in the hierarchy) and reassign the approval request to them. Every escalation action must be recorded as an event in the `auditLog` collection.",Attendance_Management_System_Core,"A scheduled Cloud Function shall detect `pending` records that have exceeded the configured deadline for their assigned supervisor. Upon deadline expiry, the system shall reassign the approval request to the next supervisor in the hierarchy, ensuring the record does not remain un-actioned. Each escalation event shall be logged in the `auditLog` collection.",['A clear hierarchical path exists for all users.'],[],"['REQ-1-018', 'REQ-1-028', 'REQ-1-061']",FALSE,medium,"['Configure an approval deadline of 2 days.', 'Create a pending record for a user.', 'Wait 3 days.', ""Verify the scheduled function has reassigned the record's `supervisorId` to the original supervisor's manager."", 'Verify an entry was created in the audit log for the escalation event.']"
948,REQ-1-052,Functional,"The mobile application must allow a Subordinate to initiate a correction request for one of their past attendance records. The interface must require the user to input the corrected check-in and/or check-out time(s) and provide a mandatory textual justification for the change. Upon submission, the system shall update the status of the corresponding attendance record to 'correction_pending' and route it for approval.",Attendance_Management_System_Core,"A Subordinate shall be able to initiate a correction request for one of their attendance records. The user shall provide the corrected time(s) and a mandatory justification for the correction request. Upon submission of a correction request, the attendance record's status shall be changed to `correction_pending`.",[],[],['REQ-1-006'],FALSE,high,"['As a Subordinate, select a past attendance record and find the option to request a correction.', 'Attempt to submit the request without a justification and verify the UI shows an error.', 'Submit a correction with new times and a justification.', ""Verify the record's status in Firestore is updated to 'correction_pending'.""]"
949,REQ-1-053,Functional,"When a Supervisor approves a correction request, a Cloud Function must be triggered. This function shall: 1) Update the attendance record with the corrected time(s). 2) Add a 'manually-corrected' flag to the record. 3) Create a new, immutable entry in the `auditLog` collection that captures the full details of the transaction, including the requester, approver, justification, original times, and the new times.",Attendance_Management_System_Core,"If the Supervisor approves the correction, a Cloud Function shall update the attendance record with the new data. Approved corrected records shall be marked with a `manually-corrected` flag. The entire correction action (request, justification, approval, original data, new data) shall be logged immutably in the `auditLog` collection.",[],[],"['REQ-1-052', 'REQ-1-028']",FALSE,high,"['As a Supervisor, approve a pending correction request.', ""Verify the attendance record's timestamp fields are updated to the corrected values."", ""Verify the record now contains the 'manually-corrected' flag."", 'Inspect the `auditLog` collection and verify a new, detailed entry for the correction exists.']"
950,REQ-1-054,Functional,"The system shall provide an interface for Supervisors to create and manage events. The event creation form must include fields for a title, description, start time, and end time. The system must also support creating recurring events, allowing the Supervisor to specify recurrence patterns such as daily, weekly (e.g., every Monday and Wednesday), or monthly (e.g., on the 15th of every month).",Attendance_Management_System_Core,"The system shall allow Supervisors to create events (e.g., training, field visit). The event creation form shall include `title`, `description`, `startTime`, and `endTime`. The system shall support the creation of recurring events with patterns for daily, weekly, and monthly recurrence.",[],[],['REQ-1-007'],FALSE,medium,"['As a Supervisor, create a single, non-recurring event and verify it is saved correctly.', 'Create a weekly recurring event for every Tuesday.', 'Check the calendar for the next four Tuesdays and verify the event appears on each of them.']"
951,REQ-1-055,Functional,"During the check-in process, if there are any events assigned to the user for the current day, the system must display a list of these events. The user shall have the option to select one of these events to associate with their attendance for the day. If an event is selected, its unique `eventId` must be stored in the created attendance record.",Attendance_Management_System_Core,"When a user checks in, the system shall present them with a list of events they are assigned to for that day. The system shall allow the user to optionally select an event to link to their attendance record. The system shall store the `eventId` in the corresponding attendance record if an event is selected.",[],[],"['REQ-1-007', 'REQ-1-042']",FALSE,low,"['Assign a user to an event for today.', 'Log in as that user and initiate a check-in.', 'Verify the system presents the event as an option to link.', 'Select the event and complete the check-in.', 'Inspect the created attendance record and verify the correct `eventId` is stored.']"
952,REQ-1-056,Functional,"The mobile application must include a calendar view for Subordinates that displays all events they have been assigned to in a read-only format. When a Supervisor creates a new event and assigns it to a user, the system must trigger a Firebase Cloud Messaging (FCM) push notification to be sent to that user's registered device(s) to inform them of the new event.",Attendance_Management_System_Core,"The system shall provide Subordinates with a read-only calendar view of events they are assigned to. When a Supervisor assigns a user to a new event, the system shall send a Firebase Cloud Messaging (FCM) push notification to that user's device.",[],"[""Push notification delivery is dependent on the user granting notification permissions and the FCM service.""]",['REQ-1-007'],FALSE,medium,"['As a Subordinate, navigate to the calendar and verify assigned events are displayed.', 'As a Supervisor, create a new event and assign it to the Subordinate.', ""Verify the Subordinate's device receives a push notification about the new event.""]"
953,REQ-1-057,Functional,"The system must provide a comprehensive reporting module accessible to Admins via the web dashboard. All reports must be filterable by date range, specific user(s), team(s), and attendance status. The following reports must be available: 1) Attendance Summary (Daily, Weekly, Monthly). 2) Late Arrival / Early Departure Report. 3) Exception Report (missed check-outs, manual edits, offline entries). 4) Audit Log Report. All generated reports must be exportable to CSV format from the web interface.",Attendance_Management_System_Core,"The system shall provide Admins with an in-app and web dashboard to view attendance summaries and detailed reports. Reports shall be filterable by date range, user, team, and attendance status (`pending`, `approved`, `rejected`). The system shall provide a 'Daily/Weekly/Monthly Attendance Summary' report, a 'Late Arrival / Early Departure Report', an 'Exception Report', and an 'Audit Log Report'. All reports shall be exportable from the web dashboard in CSV format.",[],[],['REQ-1-015'],FALSE,high,"['As an Admin, generate an Attendance Summary report for the last month for a specific team.', 'Verify the data in the report is accurate.', ""Apply a filter to show only 'approved' records and verify the report updates."", ""Click the 'Export to CSV' button and verify a correctly formatted CSV file is downloaded.""]"
954,REQ-1-058,Functional,"The Admin web dashboard must provide an interface for an Admin to set up the Google Sheets export. This interface shall initiate a standard OAuth 2.0 consent flow, prompting the Admin to authorize the application to access their Google Drive and Google Sheets. Upon successful authorization, the system must securely store the obtained refresh token and the unique ID of the Google Sheet selected by the Admin for the export.",Attendance_Management_System_Core,An Admin shall be able to initiate an OAuth 2.0 flow from the web dashboard to grant the application permission to access their Google Drive/Sheets. The system shall securely store the refresh token and the ID of the target Google Sheet.,[],"[""Refresh tokens are sensitive credentials and must be stored encrypted at rest.""]",['REQ-1-008'],FALSE,medium,"[""As an Admin, click the 'Link Google Sheet' button."", 'Verify the Google OAuth consent screen appears, requesting the correct permissions.', 'Grant permission and select a sheet.', ""Verify that an encrypted refresh token and the sheet ID are stored in the system's configuration.""]"
955,REQ-1-059,Functional,"A scheduled Cloud Function must execute at a tenant-configurable interval (daily or weekly) to handle the Google Sheets export. The function must query for all 'approved' attendance records since the last successful export. It shall then append this data as new rows to the linked Google Sheet, adhering strictly to the predefined column format: Record ID, User Name, User Email, Check-In Time, Check-In GPS Latitude, Check-In GPS Longitude, Check-Out Time, Check-Out GPS Latitude, Check-Out GPS Longitude, Status, Notes.",Attendance_Management_System_Core,"A scheduled Cloud Function shall run at a configurable interval (daily or weekly) to perform the export. The function shall retrieve new, approved attendance records and append them as new rows to the linked Google Sheet in the following predefined format: Record ID, User Name, User Email, Check-In Time, Check-In GPS Latitude, Check-In GPS Longitude, Check-Out Time, Check-Out GPS Latitude, Check-Out GPS Longitude, Status, Notes.",['The system will need to track the timestamp of the last exported record to avoid duplicates.'],[],['REQ-1-058'],FALSE,medium,"['Configure the export to run daily.', 'Approve several attendance records.', 'After the scheduled time, open the linked Google Sheet.', 'Verify that new rows have been added for the approved records and that the data in each column is correct and in the proper format.']"
956,REQ-1-060,Functional,"The Google Sheets export function must include robust error handling. If an API error occurs (e.g., permissions revoked, sheet deleted), the function must update the status of the integration to 'error' in Firestore and log the specific error message. The Admin dashboard must display a prominent alert notifying the Admin of the sync failure. The system must ensure that any attendance records that failed to export are automatically included in the next successful export run, preventing data loss.",Attendance_Management_System_Core,"Upon detecting an API error (file not found, permission revoked, schema mismatch), the sync function shall set the status of the linked sheet to `error` in Firestore. The Admin dashboard shall display a prominent alert about the sync failure with details of the error. Attendance records that failed to sync shall be queued and exported on the next successful run, ensuring no data is lost and no duplicates are created.",[],[],['REQ-1-059'],FALSE,medium,"[""After linking a sheet, manually revoke the application's permissions from the Google account settings."", 'Trigger the export function.', ""Verify the integration status in Firestore is set to 'error'."", 'Log in as the Admin and verify a clear error message is displayed on the dashboard.', 'Re-authenticate and fix the issue. Trigger the sync again and verify the previously failed records are now exported.']"
957,REQ-1-061,Functional,The Admin web dashboard must feature a 'Tenant Settings' section where Admins can configure system behavior for their organization. This section must allow the Admin to view and update at least the following parameters: 1) Organization Timezone. 2) Auto-checkout time. 3) Approval escalation period (in days). 4) Default working hours (for reports like late arrivals). 5) Password policy details. 6) Data retention periods for attendance and audit logs.,Attendance_Management_System_Core,"The system shall provide a 'Tenant Settings' or 'Organization Configuration' section in the Admin web dashboard. Configurable settings shall include, but are not limited to: Organization Timezone, Auto-checkout time, Approval escalation period (in days), Default working hours for reporting purposes, Password policy, Data retention periods.",[],[],['REQ-1-015'],FALSE,high,"['As an Admin, navigate to the settings page.', ""Change the organization's timezone from EST to PST."", 'Verify the setting is saved.', 'Confirm that subsequent system operations, like auto-checkout, respect the new PST timezone.']"
958,REQ-1-062,NonFunctional,"The user interface design must adhere to platform-specific guidelines to provide a native look and feel. For the Android application and the web dashboard, the UI must follow Google's Material Design 3 principles. For the iOS application, the UI must follow Apple's Human Interface Guidelines (HIG).",Attendance_Management_System_Core,"The UI shall be clean, intuitive, and follow Material Design 3 principles for Android and the web dashboard. The UI shall be clean, intuitive, and follow Human Interface Guidelines for iOS.",[],[],[],FALSE,medium,"['UI/UX review confirms the Android app uses Material 3 components and patterns.', 'UI/UX review confirms the iOS app uses standard iOS components and navigation patterns.', 'UI/UX review confirms the web dashboard uses Material 3 components.']"
959,REQ-1-063,NonFunctional,"The mobile application and web dashboard must be designed and developed to meet the Web Content Accessibility Guidelines (WCAG) 2.1 at a Level AA conformance. This includes, but is not limited to, ensuring all functionality is accessible via screen readers (e.g., TalkBack, VoiceOver), maintaining a minimum color contrast ratio of 4.5:1 for text, and supporting dynamic text scaling based on user's system settings.",Attendance_Management_System_Core,"The application shall meet WCAG 2.1 Level AA accessibility standards. The application shall include support for screen readers, sufficient color contrast, and scalable text.",[],[],[],FALSE,medium,"['Perform an accessibility audit using automated tools and manual testing with screen readers.', 'Verify that all interactive elements have proper labels for screen readers.', 'Use a color contrast checker to validate that all text meets the 4.5:1 ratio.', 'Increase the system font size and verify the app layout adapts without breaking or clipping text.']"
960,REQ-1-064,Technical,"The application's architecture must support internationalization (i18n) from the outset. All user-facing strings in the UI must not be hardcoded; instead, they must be stored in resource files (e.g., ARB files in Flutter). The initial product release will only provide an English (en-US) localization, but the framework must be in place to easily add other languages in the future.",Attendance_Management_System_Core,"The application shall be developed with internationalization (i18n) support in its architecture. The initial release shall support English (en-US), and all user-facing strings shall be managed in resource files to facilitate future localization.",[],[],[],FALSE,medium,"[""Code review confirms that no user-facing strings are hardcoded in the application's source code."", 'Verify that all UI text is sourced from a dedicated English language resource file.', 'Demonstrate that changing a string in the resource file correctly updates the UI text upon rebuild.']"
961,REQ-1-065,Functional,"The mobile application must not access location services without explicit user consent. It shall use the operating system's standard permission request dialog to ask for location access. If the user denies permission, or revokes it later, the application must handle this gracefully by disabling location-dependent features and displaying a message that guides the user to their device's settings to manually enable the permission.",Attendance_Management_System_Core,"The application shall explicitly request permission from the user before accessing location services. The application shall gracefully handle scenarios where location permissions are denied or revoked, guiding the user to the device settings to enable them.",[],[],['REQ-1-004'],FALSE,high,"['On first use of a location feature, verify the OS permission dialog is shown.', 'Deny the permission and verify the app shows an informative message instead of crashing.', 'Grant the permission and then manually revoke it from the OS settings. Re-open the app and verify it handles the revoked permission gracefully.']"
962,REQ-1-066,Security,All network communication between the mobile/web clients and the backend Firebase services must be encrypted in transit using HTTPS (TLS). User authentication and session management shall be handled using JSON Web Tokens (JWTs) provided by the Firebase Authentication service. The client must include a valid JWT in the authorization header of every request to secured backend resources.,Attendance_Management_System_Core,All communication between the client application and Firebase services shall occur over HTTPS (TLS). Authentication shall be handled via JSON Web Tokens (JWTs) issued by Firebase Authentication.,['The Firebase SDK handles this automatically by default.'],[],[],FALSE,high,"['Use a network proxy to inspect traffic between the app and the backend and verify it is encrypted over TLS.', 'Inspect a request to a secure Firestore document and verify that a valid JWT is present in the request headers.']"
963,REQ-1-067,NonFunctional,"The system must meet specific performance targets. 1) The mobile application's cold start time (from launch to interactive) shall be less than 3 seconds on a mid-range device. 2) The 95th percentile response time for all callable Cloud Functions, excluding cold starts, must be under 500 milliseconds. 3) All UI animations and scrolling must maintain a rendering performance of 60 frames per second to ensure a smooth user experience.",Attendance_Management_System_Core,The mobile application's cold start time shall be less than 3 seconds. The 95th percentile (p95) response time for callable Cloud Functions shall be less than 500ms. UI rendering and animations shall maintain a consistent 60 frames per second (fps).,[],[],[],FALSE,medium,"['Measure the cold start time on target devices using profiling tools.', 'Use Firebase Performance Monitoring or Cloud Monitoring to track the p95 latency of Cloud Functions.', ""Use Flutter's performance overlay or other profiling tools to detect and address any instances of dropped frames ('jank') during UI interaction.""]"
964,REQ-1-068,Security,"The system's data access logic must be enforced primarily through Firestore Security Rules. The ruleset must be comprehensive and cover the following cases: 1) A user's access must be strictly confined to documents associated with their `tenantId` custom claim. 2) A user with the 'Supervisor' role can only read/write data of users who have that Supervisor's `userId` in their `supervisorId` field. 3) A user with the 'Subordinate' role can only read/write their own user document and associated data (e.g., their own attendance records).",Attendance_Management_System_Core,Firestore Security Rules shall be the primary mechanism to ensure users can only access data within their own tenant (`/tenants/{tenantId}`). Firestore Security Rules shall ensure Supervisors can only access data belonging to their direct subordinates. Firestore Security Rules shall ensure users can only read/write their own data unless their role grants wider permissions.,[],[],['REQ-1-025'],FALSE,high,"['Write unit tests for security rules that simulate a Supervisor attempting to read data from a user not in their team and verify access is denied.', ""Write unit tests for security rules that simulate a Subordinate attempting to read another Subordinate's data and verify access is denied."", 'Write unit tests for security rules that simulate a user from Tenant A trying to access any data in Tenant B and verify access is denied.']"
965,REQ-1-069,Security,"The system must not store any secrets (e.g., API keys for SendGrid or Google Maps) directly in source code or environment variables. All such secrets shall be stored in Google Secret Manager. Cloud Functions must be granted the appropriate IAM permissions to access these secrets from Secret Manager at runtime.",Attendance_Management_System_Core,"All server-side secrets, such as third-party API keys, shall be stored in Google Secret Manager and accessed securely by Cloud Functions at runtime.",[],[],[],FALSE,high,"['Code review confirms that no API keys or other secrets are present in the Cloud Functions codebase.', 'Verify that secrets are stored in Google Secret Manager for the project.', ""Verify that the Cloud Function's service account has the 'Secret Manager Secret Accessor' IAM role.""]"
966,REQ-1-070,NonFunctional,"The system shall be engineered to achieve a service availability of 99.9% ('three nines'). This availability target excludes scheduled maintenance windows and any downtime attributable to the underlying Google Cloud Platform services, as governed by their respective Service Level Agreements (SLAs).",Attendance_Management_System_Core,"The service shall target 99.9% availability, excluding planned maintenance and the SLA of underlying Google Cloud services.",[],[],[],FALSE,high,"['Set up uptime monitoring (e.g., Google Cloud Monitoring uptime checks) for critical API endpoints.', 'Track the availability metric over time to ensure it meets the 99.9% target.']"
967,REQ-1-071,NonFunctional,"A disaster recovery plan must be in place. The system shall be configured to perform daily, automated backups of the entire Firestore database using the GCP managed export service to a separate Google Cloud Storage bucket. This establishes a Recovery Point Objective (RPO) of 24 hours. The documented disaster recovery procedure must allow for the restoration of service from a backup within a Recovery Time Objective (RTO) of 4 hours.",Attendance_Management_System_Core,The system shall perform daily automated backups of the Firestore database using the GCP managed export service. The Recovery Point Objective (RPO) for the system shall be 24 hours. The Recovery Time Objective (RTO) for the system shall be 4 hours.,[],"[""Automated backups may be a feature limited to paid subscription tiers.""]",[],FALSE,high,"['Verify that a scheduled Firestore export to Cloud Storage is configured and runs daily.', 'Document the step-by-step process for restoring the database from a backup.', 'Perform a test restoration drill in a non-production environment and measure the time taken to confirm the 4-hour RTO is achievable.']"
968,REQ-1-072,NonFunctional,"The project must adhere to strict maintainability and quality standards. 1) All new Dart and TypeScript code must be accompanied by automated tests, achieving a minimum of 80% code coverage. 2) All backend configurations, including Firestore security rules, database indexes, and Cloud Functions definitions, must be managed as code in the repository and deployed using the Firebase CLI (Infrastructure as Code). 3) The Flutter application codebase must be structured following a clean architecture pattern to ensure separation of concerns.",Attendance_Management_System_Core,"All new code shall have a minimum of 80% unit and widget test coverage. Backend resources, including Firestore indexes and security rules, shall be managed using an Infrastructure as Code (IaC) approach with the Firebase CLI. The Flutter application shall follow a clean architecture pattern.",[],[],[],FALSE,medium,"['CI/CD pipeline is configured to run tests and calculate code coverage, failing the build if it drops below 80%.', 'Code review confirms that changes to security rules or indexes are made in the `firestore.rules` and `firestore.indexes.json` files, not manually in the console.', 'Code review confirms the Flutter project structure separates UI, business logic, and data layers.']"
969,REQ-1-073,Technical,The system's data model in Firestore shall be structured with a root `/tenants/{tenantId}` collection for tenant-specific data. Key sub-collections and their purpose are: `/users` for user profiles; `/teams` for team structures; `/attendance` for individual check-in/out records; `/events` for calendar events; `/auditLog` for immutable records of critical actions; `/config` for tenant-wide settings; and `/linkedSheets` for Google Sheets integration metadata. All queries must be optimized by defining necessary composite indexes in `firestore.indexes.json`.,Attendance_Management_System_Core,The system shall use a `/tenants/{tenantId}` collection as the root for all tenant-specific data. The system shall use a `/users/{userId}` collection... The `/attendance/{recordId}` collection... The `/auditLog/{logId}` collection...,[],[],['REQ-1-002'],FALSE,high,"['Inspect the Firestore database schema and verify it matches the specified collection structure.', 'Verify that data for a specific tenant is nested appropriately or contains a `tenantId` field for rule-based security.', 'Verify that the `firestore.indexes.json` file is populated with indexes required for application queries.']"
970,REQ-1-074,Functional,"The system must implement a data retention policy for deactivated users. A scheduled Cloud Function shall run daily to find users who have been in a 'deactivated' state for more than 90 days. For each such user, the function must perform an anonymization process: 1) Delete their Personally Identifiable Information (PII) such as name and email from their user profile. 2) To preserve historical record integrity, replace their `userId` in other records (like audit logs or attendance history) with a non-reversible, anonymized string (e.g., 'ANONYMIZED_USER_12345').",Attendance_Management_System_Core,"Data for a user whose status is `deactivated` shall be processed after 90 days. The user's personal data (e.g., name, email) shall be deleted. To maintain the integrity of historical records, any reference to their `userId` in other collections, such as `auditLog`, shall be replaced with a non-reversible, anonymized identifier (e.g., 'DeletedUser-XYZ').",[],[],['REQ-1-037'],FALSE,medium,"['Deactivate a user.', 'After 90 days (or by manually triggering the function for the test user), verify their name and email have been removed from their user document.', 'Check an old attendance record or audit log entry created by that user and verify their `userId` has been replaced with an anonymized identifier.']"
971,REQ-1-075,Technical,"The system shall be implemented using a specific, mandated technology stack. Mobile Client: Flutter 3.x with Riverpod 2.x for state management. Backend: Firebase suite, with Cloud Functions written in TypeScript. Admin Web Dashboard: Flutter for Web. CI/CD: GitHub Actions. External Integrations: Google Maps API, Google Sheets API, and the SendGrid API for transactional emails.",Attendance_Management_System_Core,"Technology Stack: Flutter 3.x, Riverpod 2.x, Firebase (Authentication, Firestore, Cloud Functions), TypeScript, Flutter for Web, SendGrid, Google Maps/Sheets API, GitHub Actions.",[],"[""Developers are not permitted to substitute other frameworks or services for those listed in the stack.""]",[],FALSE,high,"['Review the `pubspec.yaml` file to confirm Flutter and Riverpod versions.', 'Review the backend codebase to confirm Cloud Functions are written in TypeScript.', 'Review the CI/CD configuration to confirm it uses GitHub Actions.', 'Confirm the web dashboard is a Flutter for Web project.']"
972,REQ-1-076,NonFunctional,The system must implement comprehensive monitoring and logging. 1) The mobile client must integrate the Firebase Crashlytics SDK for automated crash reporting. 2) All server-side logging and monitoring shall be handled by Google Cloud's Operations Suite. 3) An alert must be configured in Google Cloud Monitoring to notify administrators if the error rate of any Cloud Function exceeds 1%. 4) A budget alert must be configured in the GCP project to notify administrators if cloud spending approaches a predefined limit.,Attendance_Management_System_Core,The system shall use Firebase Crashlytics for real-time client-side crash reporting. The system shall use Google Cloud's Operations Suite (Cloud Logging & Monitoring) for server-side monitoring. Alerts shall be configured in Google Cloud Monitoring for Cloud Function error rates exceeding 1%. Budget alerts shall be configured in GCP to prevent uncontrolled cloud costs.,[],[],[],FALSE,high,"['Induce a crash in a test build of the mobile app and verify the crash report appears in the Crashlytics dashboard.', 'Inspect the logs for Cloud Functions in the Google Cloud console.', 'Verify that an alert policy for function error rates is active in Cloud Monitoring.', ""Verify that a budget and associated alert are configured in the GCP project's billing section.""]"
973,REQ-1-077,Functional,"To support new tenant onboarding, the system shall provide a data migration tool for users and teams. The process will require the tenant Admin to populate a provided CSV template with their user and team data. The Admin web dashboard will feature a secure, Admin-only tool to upload this CSV file. The upload will trigger a Cloud Function that parses the file, creates the corresponding user and team documents in Firestore, and sends activation invitations to the imported users. The scope of this migration is limited to users and teams; historical attendance data will not be imported.",Attendance_Management_System_Core,"The system shall provide a data migration path for new tenants transitioning from existing systems. An Admin-only data import tool shall be provided in the web dashboard to upload the transformed data, which will trigger a Cloud Function to create user profiles, teams, and send out activation invitations. Historical attendance data shall not be migrated.",[],[],['REQ-1-015'],FALSE,medium,"['Provide a sample CSV file with correct headers and data.', 'As an Admin, upload this file using the import tool in the web dashboard.', 'Verify that the correct user and team documents are created in Firestore.', 'Verify that the imported users receive invitation emails.', 'Confirm that there is no functionality to import past attendance records.']"
974,REQ-1-078,Functional,"The system must include user training and support materials. Role-specific guides must be created for Admins, Supervisors, and Subordinates. All training materials (e.g., PDFs, quick-start guides, videos) shall be made available online in a self-paced format. These materials must be accessible from a dedicated 'Help' or 'Support' section within both the mobile application and the web dashboard.",Attendance_Management_System_Core,"Role-based training shall be provided for all user classes. All training materials shall be delivered online and be self-paced, accessible via a help section within the application and web dashboard.",[],[],[],FALSE,low,"[""Verify a 'Help' section exists in the mobile app and web dashboard."", 'Confirm that clicking this section provides access to user guides.', 'Verify that there are separate guides tailored to the functionalities of Admins, Supervisors, and Subordinates.']"