mermaid
graph TD
    subgraph "Layer 1: Client Applications"
        direction LR
        WebApp[REPO-APP-ADMIN-011<br/><b>app-web-admin</b><br/><i>(Flutter for Web)</i>]:::app
        MobileApp[REPO-APP-MOBILE-010<br/><b>app-mobile</b><br/><i>(Flutter iOS/Android)</i>]:::app
    end

    subgraph "Layer 2: Shared Client Libraries"
        direction LR
        DataAccess[REPO-LIB-CLIENT-008<br/><b>client-data-access</b><br/><i>(Repository Pattern)</i>]:::lib
        UIComponents[REPO-LIB-UI-009<br/><b>shared-ui-components</b><br/><i>(Design System)</i>]:::lib
    end

    subgraph "Layer 3: Backend Services (Cloud Functions)"
        direction LR
        IdentitySvc[REPO-SVC-IDENTITY-003<br/><b>identity-access-services</b>]:::svc
        AttendanceSvc[REPO-SVC-ATTENDANCE-004<br/><b>attendance-workflow-services</b>]:::svc
        TeamSvc[REPO-SVC-TEAM-005<br/><b>team-event-management-services</b>]:::svc
        ReportingSvc[REPO-SVC-REPORTING-006<br/><b>reporting-export-services</b>]:::svc
    end

    subgraph "Layer 4: Shared Backend Libraries"
        direction LR
        SharedUtils[REPO-LIB-BACKEND-002<br/><b>backend-shared-utils</b><br/><i>(Logging, Errors)</i>]:::lib
        DomainModels[REPO-LIB-CORE-001<br/><b>core-domain-models</b><br/><i>(Data Contracts, Zod)</i>]:::lib
    end

    subgraph "Layer 5: Infrastructure as Code"
        direction LR
        Infra[REPO-INFRA-FIREBASE-007<br/><b>firebase-infrastructure</b><br/><i>(Firestore Rules, Indexes)</i>]:::infra
    end

    %% Dependencies
    WebApp --> DataAccess
    WebApp --> UIComponents
    MobileApp --> DataAccess
    MobileApp --> UIComponents

    IdentitySvc --> SharedUtils
    AttendanceSvc --> SharedUtils
    TeamSvc --> SharedUtils
    ReportingSvc --> SharedUtils

    SharedUtils --> DomainModels

    %% Style Definitions
    classDef app fill:#e3f2fd,stroke:#333,stroke-width:2px;
    classDef lib fill:#e8f5e9,stroke:#333,stroke-width:2px;
    classDef svc fill:#fbe9e7,stroke:#333,stroke-width:2px;
    classDef infra fill:#f3e5f5,stroke:#333,stroke-width:2px;


mermaid
sequenceDiagram
    actor User as Subordinate User
    participant MobileApp as Flutter Mobile App
    participant Firestore
    participant AttendanceSvc as Attendance Service (Cloud Function)

    title User Attendance Check-in Flow

    User->>MobileApp: Taps 'Check-in'
    MobileApp->>MobileApp: Captures GPS Location & Timestamp
    MobileApp->>Firestore: Writes new Attendance Record (status: pending)
    note right of Firestore: This write action triggers a Cloud Function
    Firestore-->>AttendanceSvc: onWrite Event (EVT-ATTENDANCE-001)
    AttendanceSvc->>Firestore: Reads the new record
    AttendanceSvc->>AttendanceSvc: Validates data (e.g., clock discrepancy)
    AttendanceSvc->>Firestore: Updates record with validation flags

    actor Admin
    participant WebApp as Admin Web App
    participant IdentitySvc as Identity Service (Callable Function)
    participant SendGrid

    title Admin User Invitation Flow

    Admin->>WebApp: Fills and submits 'Invite User' form
    WebApp->>IdentitySvc: Invokes inviteUser(email, role)
    IdentitySvc->>Firestore: Creates User document (status: 'invited')
    IdentitySvc->>SendGrid: Sends invitation email via API
    SendGrid-->>IdentitySvc: Acknowledges email sent
    IdentitySvc-->>WebApp: Returns success response
    WebApp-->>Admin: Displays 'Invitation Sent' confirmation
