"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"PR Merge Gate","Code Quality & Unit Test","Pull Request to `develop`","Linter passes; Unit test coverage > 80%; All unit tests pass; Security scan finds no new critical vulnerabilities.","Block merge; Require author to fix.","Development Team","Fully Automated","GitHub Actions; Jest; flutter_test; SonarQube","Every PR","N/A","92","1.5","Prevents broken code and simple bugs from entering the main development branch."
"Staging Deployment Gate","Integration & Security","Merge to `develop`","All integration tests pass; All Firestore Security Rule tests pass (>95% coverage); E2E smoke test suite passes.","Block deployment to Staging; Rollback `develop` branch or trigger hotfix.","DevOps/QA Team","Fully Automated","GitHub Actions; Firebase Emulator Suite; Flutter `integration_test`","Every merge to `develop`","Alert Tech Lead and QA Lead.","85","4","Ensures the Staging environment remains stable and secure for UAT and further testing."
"Production Release Gate","Release Readiness","Manual trigger for release from `main`","All staging tests passing; Manual UAT sign-off from Product Owner; No open P0/P1 bugs; Performance benchmarks met; Manual accessibility audit passed.","Abort production release; Schedule emergency planning meeting.","Release Manager/Product Owner","Partially Automated","Jira; Manual Test Plans; GitHub Actions","Per release","Notify Head of Engineering.","99","24","Prevents the release of a low-quality or unstable product to customers."