"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"US-001","Platform Architecture & Tenant Management","Admin registers a new organization tenant","Prospective Admin","As a new administrator, I want to register my organization by providing my details and a unique organization name, so that a new, isolated tenant is created for my company and I can begin configuring the system.","Enables new organizations to onboard themselves, creating the foundational tenant structure. This is the primary entry point for customer acquisition and is critical for the multi-tenant architecture.","Must Have","5","[]","[{""scenario"":""Successful registration with unique organization name"",""given"":""A potential administrator is on the registration page and has filled all required fields with valid data, including a globally unique organization name and a password meeting complexity requirements"",""when"":""The user clicks the 'Register' button"",""then"":""A new tenant document is created in Firestore, a new user is created in Firebase Authentication with the 'Admin' role, custom claims for tenantId and role are set on the user's auth token, the user is automatically logged in, and they are redirected to the Admin dashboard.""},{""scenario"":""Registration attempt with a duplicate organization name"",""given"":""An organization with the name 'Global Tech Inc.' already exists in the system"",""when"":""A new user enters 'Global Tech Inc.' as the organization name and submits the registration form"",""then"":""The system prevents form submission and displays an inline error message: 'Organization name is already taken. Please choose another.'""},{""scenario"":""Registration process creates all required data atomically"",""given"":""A user submits a valid registration form"",""when"":""An unexpected error occurs during the creation of the Firestore user document after the Firebase Auth user has been created"",""then"":""The entire transaction is rolled back, the Firebase Auth user is deleted, and no tenant or user documents are left in the database. The user is shown a generic error message like 'Registration failed. Please try again.'""}]","[""WI-001: [Backend] Implement `registerOrganization` Callable Cloud Function"",""WI-002: [Frontend] Develop New Organization Registration Page""]","[""All acceptance criteria are met and validated."",""Code for both frontend and backend is peer-reviewed and merged."",""Unit and integration tests pass with >80% coverage."",""End-to-end registration flow is manually verified in staging."",""Security requirements (atomic transaction, custom claims) are validated.""]"
"US-002","Platform Architecture & Tenant Management","Admin is notified of a non-unique organization name during registration","Prospective Admin","As a Prospective Admin registering my organization for the first time, I want to be immediately notified if the organization name I enter is already in use, so that I can choose a unique name and complete the registration process without errors or confusion.","Ensures data integrity by enforcing unique tenant names, prevents user frustration during onboarding, and reduces potential support requests related to registration failures.","Must Have","3","[""US-001""]","[{""scenario"":""Duplicate organization name provided (case-insensitive)"",""given"":""an organization with the name 'Vandelay Industries' already exists in the system"",""when"":""a user enters 'vandelay industries' in the 'Organization Name' field and the field loses focus"",""then"":""an inline error message 'This organization name is already taken. Please choose another.' is displayed below the input field and the registration submission button is disabled.""},{""scenario"":""User corrects a duplicate name"",""given"":""a user has entered a duplicate organization name and an error message is displayed"",""when"":""the user edits the field to provide a unique name and the field loses focus"",""then"":""the error message is cleared, a success indicator is displayed, and the registration submission button becomes enabled.""},{""scenario"":""Validation in progress feedback"",""given"":""a user is on the new organization registration page"",""when"":""the user enters text into the 'Organization Name' field and the field loses focus, triggering the asynchronous validation check"",""then"":""a loading indicator is displayed next to the field until the validation check completes.""}]","[""Implement a callable Cloud Function for real-time name validation."",""Integrate onBlur validation on the registration form's organization name field.""]","[""All acceptance criteria are met and validated."",""Code for both frontend and backend is peer-reviewed and merged."",""Unit and integration tests pass with >80% coverage."",""Performance of the validation endpoint meets p95 < 300ms requirement.""]"
"US-004","Platform Architecture & Tenant Management","Admin invites a new user to the organization via email","Admin","As an Admin, I want to invite new employees to the application by entering their email address and assigning them a role, so that they can receive a secure registration link, create their account, and become part of my organization's tenant.","Enables the onboarding of new employees, facilitating organizational growth. Ensures that only authorized individuals can join a specific tenant, maintaining data security.","Must Have","5","[""US-001""]","[{""scenario"":""Successful invitation of a new user"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Manage Users' page"",""when"":""I enter a valid and unique email address, select the role 'Subordinate', and click 'Send Invitation'"",""then"":""A new user document is created in Firestore with status 'invited', a success notification is displayed, and a transactional email is triggered to the user with a 24-hour time-limited registration link.""},{""scenario"":""Attempting to invite a user who already exists in the tenant"",""given"":""A user with the email 'existing.user@example.com' already exists in my tenant"",""when"":""I attempt to invite a new user with the email 'existing.user@example.com'"",""then"":""The form submission is blocked and I see an inline error message: 'A user with this email already exists in your organization.'""}]","[""WI-003: [Backend] Implement `inviteUser` Callable Cloud Function"",""Create 'Invite User' UI in the Admin Web Dashboard.""]","[""All acceptance criteria are met and validated."",""Code for both frontend and backend is peer-reviewed and merged."",""Unit and integration tests for the full flow pass with >80% coverage."",""Email delivery is confirmed working in the staging environment.""]"
"US-006","Platform Architecture & Tenant Management","Invited user completes registration by setting a password","Invited User","As an Invited User, I want to securely complete my account registration by clicking a unique link from my invitation email and setting a strong password, so that I can activate my account and log in for the first time.","Enables the final, critical step of user onboarding, converting an invited user into an active user. A seamless registration process improves user adoption and reduces administrative support load.","Must Have","5","[""US-004""]","[{""scenario"":""Successful account activation with a valid link and strong password"",""given"":""an invited user has a valid, non-expired registration link and is on the registration completion page"",""when"":""the user enters a password that meets the organization's policy, confirms it correctly, and clicks 'Activate Account'"",""then"":""the system updates the user's status from 'invited' to 'active' in Firestore, the user is automatically logged in, and they are redirected to their role-specific dashboard.""},{""scenario"":""Attempting to register with a password that does not meet complexity requirements"",""given"":""an invited user is on the registration completion page"",""when"":""the user enters a password that does not meet the policy"",""then"":""the form submission is prevented, and a clear, inline error message is displayed detailing the specific password requirements that were not met.""},{""scenario"":""Attempting to use an expired registration link"",""given"":""an invited user has a registration link that is older than 24 hours"",""when"":""the user clicks the link"",""then"":""the user is redirected to a page that clearly states 'This invitation link has expired. Please contact your administrator to request a new invitation.'""}]","[""WI-004: [Backend] Implement `completeRegistration` Cloud Function"",""WI-005: [Frontend] Develop Invited User Registration Page""]","[""All acceptance criteria are met and validated."",""Code for both frontend and backend is peer-reviewed and merged."",""Unit and integration tests for the full flow pass with >80% coverage."",""Security review of token handling is completed.""]"
"US-008","Platform Architecture & Tenant Management","Admin deactivates a user's account","Admin","As an Admin, I want to deactivate a user's account, so that I can securely revoke access for departing employees.","Enhances organizational security by preventing unauthorized access from former employees and enforcing access control policies.","Must Have","5","[""US-004"",""US-017"",""US-009""]","[{""scenario"":""Admin successfully deactivates a user who is not a supervisor"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I select a user with the 'Subordinate' role, click 'Deactivate', and confirm the action"",""then"":""The system updates the user's status to 'deactivated', a success message is displayed, and the user's active session is invalidated, forcing them to log out.""},{""scenario"":""Deactivated user is prevented from logging in"",""given"":""A user's account has been successfully deactivated"",""when"":""That user attempts to log in with their correct credentials"",""then"":""The system denies access and displays a clear message, such as 'Your account has been deactivated. Please contact your administrator.'""},{""scenario"":""Admin cannot deactivate their own account"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I locate my own user account in the list"",""then"":""The 'Deactivate' action or button is disabled or hidden for my own account.""}]","[""Implement deactivation logic in a secure Cloud Function."",""Add UI controls for deactivation in the Admin Dashboard."",""Implement session revocation using Firebase Admin SDK.""]","[""All acceptance criteria are met and validated."",""Code for both frontend and backend is peer-reviewed and merged."",""Unit and integration tests pass with >80% coverage."",""Session invalidation is confirmed working in an E2E test.""]"
"US-009","Platform Architecture & Tenant Management","Admin is required to reassign subordinates before deactivating a Supervisor","Admin","As an Admin, I want to be prevented from deactivating a Supervisor who still has active subordinates and be prompted to reassign them first, so that I can ensure every employee remains managed and critical workflows like attendance approvals are not broken.","Ensures organizational hierarchy integrity by preventing 'orphaned' employees, maintaining the continuity of approval workflows.","Must Have","5","[""US-008""]","[{""scenario"":""Attempt to deactivate a Supervisor with active subordinates"",""given"":""An Admin attempts to deactivate a user who has the 'Supervisor' role and has one or more active subordinates"",""when"":""The deactivation action is initiated"",""then"":""The action is blocked, and a modal appears explaining subordinates must be reassigned, listing the affected subordinates, and providing a 'Reassign Subordinates' action.""},{""scenario"":""Successful deactivation of a Supervisor after reassigning all subordinates"",""given"":""An Admin was blocked from deactivating a Supervisor and is now in the reassignment interface"",""when"":""The Admin reassigns all subordinates to new Supervisors and then attempts the deactivation again"",""then"":""The deactivation action is successful, and the former Supervisor's user status is updated to 'deactivated'.""},{""scenario"":""Successful deactivation of a Supervisor with no active subordinates"",""given"":""An Admin attempts to deactivate a Supervisor who has zero active subordinates"",""when"":""The deactivation is initiated"",""then"":""The deactivation proceeds successfully without showing the reassignment modal.""}]","[""Enhance the deactivation Cloud Function to check for active subordinates."",""Develop the reassignment modal and workflow UI in the Admin Dashboard."",""Implement a batch write to update supervisor assignments atomically.""]","[""All acceptance criteria are met and validated."",""Code for both frontend and backend is peer-reviewed and merged."",""Unit and integration tests for the full workflow pass with >80% coverage."",""The user flow is approved by UX.""]"
"US-011","Platform Architecture & Tenant Management","Admin creates a new team and assigns a Supervisor","Admin","As an Admin, I want to create a new team by providing a name and selecting an existing user as its Supervisor, so that I can accurately model my organization's structure, enabling proper approval workflows and team-based event assignments.","Enables the foundational hierarchical structure of the organization within the application, which is a prerequisite for managing user groups, assigning work, and implementing role-based approval workflows.","Must Have","5","[""US-004""]","[{""scenario"":""Successful creation of a new team"",""given"":""I am an Admin on the 'Team Management' page"",""when"":""I click 'Create Team', enter a unique team name, select a valid user with the 'Supervisor' role, and click 'Save'"",""then"":""a new team document is created in Firestore with the specified name and supervisorId, and a success notification is displayed.""},{""scenario"":""Attempt to create a team with a duplicate name"",""given"":""a team named 'Field Operations' already exists"",""when"":""I enter 'Field Operations' as the team name and attempt to save"",""then"":""the creation is prevented and an inline error message 'Team name must be unique.' is displayed.""},{""scenario"":""Supervisor selection list is correctly populated"",""given"":""I am an Admin on the 'Create Team' form"",""when"":""I click on the 'Select Supervisor' dropdown"",""then"":""the list only contains active users from my tenant who have the 'Supervisor' or 'Admin' role.""}]","[""Develop 'Create Team' modal/form in the Admin Dashboard."",""Implement Firestore Security Rules to restrict team creation to Admins."",""Implement server-side and client-side validation for unique team names.""]","[""All acceptance criteria are met and validated."",""Code for frontend and security rules is peer-reviewed and merged."",""Unit and integration tests pass with >80% coverage."",""Security rules are tested to prevent unauthorized creation.""]"
"US-017","Platform Architecture & Tenant Management","User logs in with email and password","Registered User","As a registered user, I want to securely log in to the application using my email and password, so that I can access my personalized dashboard and perform actions specific to my role.","Provides the fundamental security mechanism to authenticate users and grant them role-based access to tenant-specific data.","Must Have","3","[""US-006""]","[{""scenario"":""Successful login with valid credentials"",""given"":""A registered user with an 'active' status is on the login screen"",""when"":""The user enters their correct email and password and taps the 'Log In' button"",""then"":""The system successfully authenticates the user, a session is created, and the user is redirected to their role-specific dashboard.""},{""scenario"":""Login attempt with an incorrect password"",""given"":""A registered user is on the login screen"",""when"":""The user enters their correct email but an incorrect password"",""then"":""A clear, non-specific error message such as 'Invalid email or password. Please try again.' is displayed.""},{""scenario"":""Login attempt by a deactivated user"",""given"":""A user whose account status is 'deactivated' is on the login screen"",""when"":""The user enters their correct email and password"",""then"":""A specific error message is displayed, such as 'Your account has been deactivated. Please contact your administrator.', and access is denied.""}]","[""Develop the login screen UI for both mobile and web."",""Integrate with Firebase Authentication SDK for email/password sign-in."",""Implement state management for loading, success, and error states.""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Unit and integration tests pass with >80% coverage."",""E2E login flow is tested for all user roles.""]"
"US-021","Platform Architecture & Tenant Management","User sees a role-specific dashboard after logging in","Authenticated User","As an authenticated user, I want to be automatically routed to my role-specific dashboard immediately after a successful login, so that I can efficiently access the information and tools relevant to my responsibilities.","Improves user efficiency and satisfaction by providing a personalized experience and reinforcing the Role-Based Access Control (RBAC) model.","Must Have","2","[""US-017""]","[{""scenario"":""Admin successfully logs into the web application"",""given"":""a registered user exists with the role 'Admin'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must redirect them to the main Admin Web Dashboard.""},{""scenario"":""Supervisor successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Supervisor'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Supervisor Mobile Dashboard.""},{""scenario"":""Subordinate successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Subordinate'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Subordinate Mobile Dashboard.""},{""scenario"":""Non-Admin user attempts to log into the web application"",""given"":""a user with the role 'Supervisor' or 'Subordinate'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must display a page informing them that the web dashboard is for administrative access only and they should use the mobile application.""}]","[""Implement a root-level authentication state listener."",""Read the 'role' custom claim from the user's ID token."",""Use a router (e.g., GoRouter) to perform conditional navigation based on the role.""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""E2E tests for each role's login and redirection flow are passing.""]"
"US-028","Core Attendance Workflow","Subordinate checks in for attendance","Subordinate","As a Subordinate, I want to tap a 'Check-In' button on my mobile app so that the system captures my current time and GPS location to create an official attendance record for the start of my workday.","Provides a verifiable, time-stamped, and geo-located record of when an employee starts their workday. This is the foundational data point for all attendance tracking and reporting.","Must Have","5","[""US-017"",""US-021"",""US-076""]","[{""scenario"":""Successful check-in with an active internet connection"",""given"":""I am a logged-in Subordinate on the main dashboard, I have granted location permissions, and I have not checked in for the current day"",""when"":""I tap the 'Check-In' button"",""then"":""The system captures my current client timestamp and GPS coordinates, a new attendance record is created in Firestore with status 'pending', the UI updates to show a success message, and the 'Check-In' button is disabled.""},{""scenario"":""Check-in attempt with no GPS signal"",""given"":""My device cannot acquire a GPS signal"",""when"":""I tap the 'Check-In' button"",""then"":""The app displays a loading indicator for up to 10 seconds, then fails with an error message, such as 'Could not get location. Please move to an open area and try again.'""},{""scenario"":""Attempting to check in more than once in a day"",""given"":""I have already successfully checked in for the current day"",""when"":""I view the main dashboard"",""then"":""The 'Check-In' button is disabled or hidden, preventing me from creating a duplicate check-in record for the same day.""}]","[""WI-011: [Mobile] Implement Main Attendance Screen UI"",""WI-012: [Mobile] Implement Check-In Logic"",""WI-016: [Backend] Implement Clock Discrepancy Check Cloud Function""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Unit and integration tests for the full flow pass with >80% coverage."",""E2E test is created for the happy path."",""Performance requirements for GPS lock time are met.""]"
"US-029","Core Attendance Workflow","Subordinate checks out from attendance","Subordinate","As a Subordinate, I want to check out at the end of my shift by tapping a button, so that my attendance record for the day is completed with an accurate timestamp and GPS location.","Completes the daily attendance data loop, enabling accurate calculation of work duration and providing complete records for reporting and compliance.","Must Have","5","[""US-028"",""US-030""]","[{""scenario"":""Successful check-out on an active attendance record"",""given"":""a Subordinate user has an active check-in record for the current day"",""when"":""the user taps the 'Check-Out' button"",""then"":""the system captures the current client timestamp and GPS coordinates, updates the existing attendance record with a 'checkOutTime' and 'checkOutGps', and displays a success message.""},{""scenario"":""UI state updates after successful check-out"",""given"":""a Subordinate user has successfully checked out for the day"",""when"":""they view the main attendance screen"",""then"":""the 'Check-Out' button must be disabled or hidden, and the UI must clearly indicate that they are checked out for the day.""}]","[""WI-013: [Mobile] Implement Check-Out Logic""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Unit and integration tests for the check-out flow pass with >80% coverage."",""E2E test is created for the happy path.""]"
"US-033","Core Attendance Workflow","Subordinate marks attendance while offline","Subordinate","As a Subordinate, I want to be able to check in and check out when my device is offline, so that my attendance is captured accurately at the correct time, regardless of my network connectivity.","Ensures data integrity by capturing attendance at the moment it occurs. Increases system reliability and user trust, reducing manual corrections for missed punches due to network issues.","Must Have","5","[""US-028"",""US-029""]","[{""scenario"":""User performs a check-in while the device is offline"",""given"":""The user is logged in and their device has no internet connectivity"",""when"":""The user taps the 'Check-In' button"",""then"":""The application captures the current device timestamp and GPS coordinates, a new attendance record is created in the local Firestore cache with a flag 'isOfflineEntry' set to true, and the UI updates to show a 'Checked In' status with a visual indicator that the record is pending synchronization.""},{""scenario"":""Offline records are automatically synchronized when connectivity is restored"",""given"":""The user has one or more attendance records stored in the local cache from offline actions"",""when"":""The device regains a stable internet connection"",""then"":""The Firestore SDK automatically syncs the local records to the server, and the 'isOfflineEntry' flag is preserved on the server-side record.""}]","[""WI-014: [Mobile] Implement Offline Attendance Capability""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""E2E tests for the offline workflow are implemented and passing."",""Manual verification on physical devices for both iOS and Android confirms reliability.""]"
"US-037","Core Attendance Workflow","Supervisor views pending attendance records from subordinates","Supervisor","As a Supervisor, I want to see a clear and filterable list of all attendance records from my direct subordinates that are awaiting my review, so that I can efficiently manage my team's attendance and take timely action on pending approvals.","Enables the core attendance approval workflow, ensuring that employee work hours are verified in a timely manner, which is critical for data integrity and accountability.","Must Have","5","[""US-028""]","[{""scenario"":""Supervisor views a list of pending records"",""given"":""a Supervisor is logged in and has at least one direct subordinate with an attendance record in 'pending' status"",""when"":""the Supervisor navigates to their main dashboard"",""then"":""a list of all 'pending' attendance records from their direct subordinates is displayed.""},{""scenario"":""List only shows records from direct subordinates"",""given"":""a Supervisor is logged in"",""when"":""the system fetches attendance records for their dashboard"",""then"":""the query must filter records where the `supervisorId` field matches the logged-in Supervisor's `userId`.""},{""scenario"":""Supervisor has no pending records to review"",""given"":""a Supervisor is logged in and none of their subordinates have any 'pending' attendance records"",""when"":""the Supervisor navigates to the attendance review screen"",""then"":""a user-friendly message is displayed, such as 'No pending records to review.'""}]","[""WI-017: [Mobile] Implement Supervisor's Pending Approval Dashboard""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Unit and integration tests pass with >80% coverage."",""Firestore Security Rules are tested to ensure a supervisor cannot see another team's data.""]"
"US-039","Core Attendance Workflow","Supervisor approves a single attendance record","Supervisor","As a Supervisor, I want to approve a single pending attendance record for one of my subordinates so that I can validate their work hours and move the record to an 'approved' state for accurate reporting.","Enables the core attendance validation workflow, ensures data integrity for reporting, and provides accountability by formally confirming subordinate work hours.","Must Have","2","[""US-037""]","[{""scenario"":""Successful approval of a pending record"",""given"":""I am a Supervisor viewing the 'Pending Approvals' list"",""when"":""I tap the 'Approve' button for a specific attendance record"",""then"":""The system updates the record's status from 'pending' to 'approved' in the database, a success message is displayed, and the record is removed from my 'Pending Approvals' list.""},{""scenario"":""Audit Trail: Approval action is logged"",""given"":""I am a Supervisor and I am about to approve a pending attendance record"",""when"":""The system successfully processes my approval action"",""then"":""A new, immutable document is created in the `auditLog` collection containing the actor's ID, action type, and target record ID.""}]","[""WI-018: [Mobile] Implement Supervisor Approve/Reject Actions""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Security rules are tested to ensure a supervisor can only approve records for their own subordinates.""]"
"US-045","Integrations & Advanced Features","Subordinate requests a correction to an attendance record","Subordinate","As a Subordinate, I want to submit a request to correct the check-in or check-out time on my attendance record and provide a mandatory reason for the change, so that I can fix any mistakes and ensure my work hours are accurately reflected.","Ensures data integrity by providing a formal, auditable workflow for correcting attendance errors, enhancing accountability for both employees and supervisors.","Should Have","5","[""US-039""]","[{""scenario"":""Submitting a valid correction request"",""given"":""I am a Subordinate viewing my attendance history for a record with a status of 'approved' or 'rejected'"",""when"":""I enter a valid new time, provide a justification of at least 20 characters, and tap 'Submit Request'"",""then"":""The attendance record's status in Firestore is updated to 'correction_pending', the request is routed to my supervisor, and I see a success confirmation message.""},{""scenario"":""Submitting a request with no justification"",""given"":""I am on the attendance correction form"",""when"":""I enter a new check-in time but leave the justification field blank"",""then"":""The submission is blocked, and an error message 'Justification is required and must be at least 20 characters.' is displayed.""}]","[""WI-024: [Mobile] Implement Correction Request Form for Subordinates""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Unit and integration tests for the full flow pass with >80% coverage."",""Security rules are tested to ensure a user can only request corrections for their own records.""]"
"US-050","Integrations & Advanced Features","Admin directly edits an attendance record with mandatory, auditable justification","Admin","As an Admin, I want to directly edit any employee's attendance record and provide a mandatory justification for the change, so that I can correct data inaccuracies efficiently and maintain a fully auditable trail of all high-privilege modifications.","Ensures data accuracy for reporting and provides a mechanism for authorized personnel to correct errors, with a transparent and auditable trail for compliance and accountability.","Should Have","5","[""US-059""]","[{""scenario"":""Admin successfully edits an attendance record"",""given"":""an Admin is logged into the web dashboard and is viewing an attendance report"",""when"":""the Admin clicks 'Edit' on a record, modifies the check-out time, provides a valid justification (20+ characters), and clicks 'Save'"",""then"":""the system updates the attendance record in Firestore with the new time, adds a 'manually-corrected' flag, and creates a detailed entry in the immutable `auditLog` collection.""},{""scenario"":""Admin attempts to save an edit without providing a justification"",""given"":""an Admin has opened the edit attendance modal and made a change"",""when"":""the Admin attempts to save the changes with the justification field empty"",""then"":""the save operation is prevented and a clear error message is displayed indicating that justification is mandatory.""}]","[""Develop 'Edit Attendance' modal in the Admin Dashboard."",""Implement a transactional Cloud Function to update the record and create the audit log entry atomically.""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Unit and integration tests for the full flow pass with >80% coverage."",""Security of the Cloud Function is validated to ensure only Admins can perform this action.""]"
"US-052","Integrations & Advanced Features","Supervisor creates a new event","Supervisor","As a Supervisor, I want to create a new event with a title, description, start time, and end time, so that I can formally schedule and communicate activities like meetings or training sessions to my team members.","Enables formal scheduling of team activities within the application, improving team coordination and providing context for attendance records.","Should Have","3","[""US-021""]","[{""scenario"":""Supervisor successfully creates a single, non-recurring event"",""given"":""I am a Supervisor on the 'Create Event' screen"",""when"":""I enter a valid title, description, start time, and end time (after start time), and tap 'Save'"",""then"":""A success notification is displayed, and a new document is created in the `/events` collection in Firestore with the provided details.""},{""scenario"":""Attempting to save an event where the end time is before the start time"",""given"":""I am a Supervisor on the 'Create Event' screen"",""when"":""I select an 'End Time' that is chronologically earlier than the 'Start Time'"",""then"":""A validation error message, such as 'End time must be after start time', is displayed, and the event is not saved.""}]","[""Develop 'Create Event' form/screen in the mobile app."",""Implement Firestore security rules to restrict event creation to Supervisors and Admins.""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Widget tests for the form and validation logic pass."",""Security rules are tested to prevent unauthorized creation.""]"
"US-059","Admin Reporting & Dashboards","Admin views summary attendance reports on the web dashboard","Admin","As an Admin, I want to view aggregated summary reports of attendance for daily, weekly, and monthly periods on my web dashboard, so that I can quickly assess workforce attendance trends and monitor overall presence.","Provides immediate, actionable insights into workforce attendance, enabling efficient monitoring and trend analysis, and reducing administrative overhead.","Should Have","8","[""US-021"",""US-039""]","[{""scenario"":""Viewing a specific daily summary report"",""given"":""I am viewing the reports page"",""when"":""I select the 'Daily Summary' view and choose a specific past date"",""then"":""the dashboard updates to show the total number of active users, the number of users who checked in, the number of absent users, and the attendance percentage for that selected date.""},{""scenario"":""Viewing a weekly summary report"",""given"":""I am viewing the reports page"",""when"":""I select the 'Weekly Summary' view and choose a specific week"",""then"":""the dashboard displays the average daily attendance percentage for that week and a trend chart visualizing the daily attendance.""},{""scenario"":""Report for a period with no attendance data"",""given"":""I select a date range where no one checked in"",""when"":""the report loads"",""then"":""the dashboard displays a clear message such as 'No attendance data available for the selected period'.""}]","[""Develop the reporting dashboard UI in Flutter for Web."",""Implement a server-side aggregation strategy (e.g., scheduled Cloud Function) to pre-calculate daily summaries for performance."",""Integrate a charting library for data visualization.""]","[""All acceptance criteria are met and validated."",""Code is peer-reviewed and merged."",""Unit and integration tests for the aggregation logic and UI components pass."",""Performance requirements are met for large datasets.""]"
"US-065","Integrations & Advanced Features","Admin configures automatic data export to Google Sheets","Admin","As an Admin, I want to configure a secure, automated, and scheduled export of approved attendance data to a Google Sheet, so that I can streamline our reporting process and perform custom analysis.","Automates data export, reducing manual effort and human error. Enables seamless integration with external business workflows like payroll and advanced analytics.","Should Have","13","[""US-039"",""US-066""]","[{""scenario"":""Admin successfully configures a new daily export"",""given"":""The Admin is on the 'Integrations' settings page"",""when"":""The Admin clicks 'Connect to Google Sheets', completes the Google OAuth 2.0 flow, provides a name for a new sheet, selects a 'Daily' schedule, and saves"",""then"":""A new Google Sheet with the specified name and correct headers is created in the Admin's Google Drive, and the UI updates to show 'Active' status.""},{""scenario"":""Scheduled export function runs successfully"",""given"":""The Google Sheets export is configured and active, and there are new 'approved' attendance records"",""when"":""The scheduled Cloud Function for data export is triggered"",""then"":""The new 'approved' attendance records are appended as new rows to the linked Google Sheet, and the 'Last Sync' timestamp in the Admin dashboard is updated.""},{""scenario"":""Export fails because the target Google Sheet was deleted"",""given"":""The Admin has manually deleted the target Google Sheet"",""when"":""The next scheduled export function runs"",""then"":""The function fails, the integration's status is updated to 'Error', and the Admin dashboard displays a prominent alert about the sync failure.""}]","[""WI-022: [Backend] Implement Google Sheets Export Cloud Function"",""WI-023: [Frontend] Implement Google Sheets Integration Setup UI""]","[""All acceptance criteria are met and validated."",""Code for both frontend and backend is peer-reviewed and merged."",""Unit and integration tests for the full flow pass with >80% coverage."",""Security review of the OAuth token handling process is complete and approved.""]"