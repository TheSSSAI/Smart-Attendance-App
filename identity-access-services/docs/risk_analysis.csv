"risk_id","risk_category","risk_description","probability","impact","risk_score","priority_level","affected_tasks","root_cause","mitigation_strategy","contingency_plan","monitoring_trigger","owner","due_date","status"
"RISK-001","Technical","A flaw in the Firestore Security Rules, which are the primary mechanism for tenant data isolation (REQ-1-025), could lead to a catastrophic data breach, allowing users from one tenant to access data from another. The complexity of the RBAC rules (WI-034-AAS-FS-RULES) increases this probability.","3","5","15","High","All data access operations (read, write, delete) across the entire application, particularly WI-034-AAS-FS-RULES and WI-066-THM-SUPERVISOR-RULES.","Over-reliance on a single, complex declarative security model for multi-tenancy. Human error in writing or maintaining the extensive ruleset required for the three distinct user roles and hierarchical relationships.","Implement a mandatory, automated test suite for Firestore Security Rules using the Firebase Local Emulator Suite. This suite must be integrated into the CI/CD pipeline (WI-007-PF-GHA-BACKEND) and must fail the build if any test fails. All changes to `firestore.rules` require peer review from at least two senior engineers.","Maintain a pre-written, highly restrictive 'lockdown' ruleset in the repository that denies all client-side data access. In the event of a detected breach, an emergency protocol will be executed to deploy this ruleset immediately, buying time for investigation and remediation.","Google Cloud Monitoring alert on an anomalous number of 'permission-denied' errors (could indicate a misconfiguration) or anomalous data access patterns discovered during log audits.","Backend Lead","2025-02-15","Not Started"
"RISK-002","Operational","The automated tenant data purge function (WI-029-TUL-PURGE-FUNC) is a highly destructive, irreversible operation. A bug in its logic, such as an incorrect query or faulty date comparison, could lead to the accidental permanent deletion of an active tenant's entire dataset.","2","5","10","High","WI-029-TUL-PURGE-FUNC (Implement Scheduled Tenant Data Purge Function), REQ-1-035 (Tenant Deletion Grace Period). The priority is elevated to High due to the catastrophic impact despite the medium score.","Complexity of a scheduled, automated, destructive batch process operating on production data. Potential for error in identifying expired tenants based on timestamps and status.","1. Implement a 'dry-run' mode for the function that logs what it *would* delete without performing any writes. 2. The function MUST run within a transaction that re-verifies the tenant's status as 'pending_deletion' and confirms the grace period has expired *immediately* before initiating deletion. 3. Implement extensive structured logging for every step. 4. Require manual, multi-person approval to enable the function in the production environment for the first time.","The only contingency is disaster recovery. Immediately initiate the documented DR procedure (WI-014-PF-DR-DOC) to restore the affected tenant's data from the last daily backup. This would still result in up to 24 hours of data loss (RPO).","A Google Cloud Monitoring alert is triggered every time the purge function begins execution, notifying the on-call team to monitor its logs in real-time.","Head of Engineering","2025-03-01","Not Started"
"RISK-003","Timeline","The project contains numerous high-complexity tasks with hard dependencies (e.g., Reporting depends on Core Workflow, which depends on User Lifecycle). Underestimation of any foundational task (like WI-016-TUL-REG-FUNC or WI-034-AAS-FS-RULES) will cause a cascading delay across the entire project schedule.","5","4","20","High","The entire project plan, especially downstream epics like EPIC-008 (Admin Dashboard & Reporting) and EPIC-007 (Event Management).","Inherent uncertainty in estimating complex software development tasks, especially those involving new architectural patterns or security-critical components. The tight coupling of dependencies magnifies the impact of any single delay.","For all tasks rated 'High' or 'Critical' complexity, a mandatory time-boxed spike/prototype must be conducted before the main implementation sprint to de-risk technical unknowns. Use 3-point estimation (optimistic, pessimistic, likely) for these tasks to better model uncertainty. Build an explicit contingency buffer into the project timeline.","Identify and document non-MVP features within epics that can be de-scoped to recover the timeline if a critical path delay occurs. Maintain a prioritized backlog of such features.","A critical-path task's duration exceeds its 'likely' estimate by more than 25%. A weekly project velocity review will track this.","Project Manager","2025-02-10","Not Started"
"RISK-004","Technical","The admin reporting features (EPIC-008) require complex, multi-filter queries on large datasets. A naive implementation on Firestore will lead to severe performance degradation, high operational costs (read operations), and a failure to meet the <3s report load time NFR (REQ-1-067).","4","4","16","High","WI-075-ADR-SUMMARY-UI, WI-078-ADR-EXCEPTION-REPORT, WI-079-ADR-LATE-EARLY-REPORT, WI-080-ADR-AUDIT-REPORT.","Firestore is not an analytical database. Performing complex aggregations and multi-field filtering on raw transactional data at scale is inefficient and costly by design.","Commit to a server-side data pre-aggregation strategy from the start. Implement the scheduled Cloud Function (WI-076-ADR-AGGREGATE-FUNC) to create daily summary documents. All reports must query these aggregated collections, not the raw `attendance` collection. All query patterns must be identified upfront and have corresponding composite indexes defined in `firestore.indexes.json`.","If real-time reports are still slow, the feature will be modified to be an asynchronous 'generate and notify' process, where the Admin requests a report, and is notified when the pre-computed data is ready to view.","Firebase Performance Monitoring showing any reporting query taking longer than 2 seconds in the staging environment. Firestore 'slow query' logs.","Backend Lead","2025-03-15","Not Started"
"RISK-005","Resource","The project requires a high level of expertise across a broad, modern stack (Flutter, Riverpod, Firebase Suite, GCP IAM, GitHub Actions). A skill gap in any critical area, particularly security-focused ones like Firestore Rules or GCP IAM, could lead to severe vulnerabilities, poor architecture, and significant delays.","4","4","16","High","All work items, with highest impact on WI-034-AAS-FS-RULES (Security Rules), WI-006-PF-GHA-AUTH (CI/CD Auth), and all TypeScript Cloud Functions.","High technology diversity and specialization required for the project, creating potential single points of failure if knowledge is not distributed across the team.","1. Conduct a team skills matrix assessment against the project's technology stack. 2. Mandate pair programming sessions for all security-critical development (e.g., security rules, auth functions). 3. Establish a mandatory, cross-disciplinary code review process where frontend, backend, and DevOps review relevant PRs.","Pre-approve a budget for on-demand expert consultation from a third-party vendor specializing in Firebase/GCP security and architecture.","A critical component is identified as being understood by only one developer during sprint planning or review.","Project Manager","2025-02-20","Not Started"
"RISK-006","Operational","The Disaster Recovery plan (REQ-1-071) relies on daily backups and a documented restoration procedure (WI-014-PF-DR-DOC). If this procedure is not regularly tested or is flawed, the organization may fail to meet its 4-hour Recovery Time Objective (RTO) during a real incident, leading to prolonged downtime and potential data loss.","3","5","15","High","WI-014-PF-DR-DOC (Document Disaster Recovery Procedure). Affects overall service availability (REQ-1-070).","DR plans often become outdated as the system evolves ('documentation rot'). Manual restoration processes are error-prone under pressure.","Mandate and schedule quarterly, non-negotiable DR drills. During these drills, a full restoration from backup to a temporary, isolated environment must be performed. Automate as much of the documented restoration procedure as possible using CLI scripts.","The documented DR procedure itself is the contingency plan. Its effectiveness is the variable being managed.","A scheduled calendar event for the quarterly DR drill. Failure to complete a drill on schedule automatically escalates to the Head of Engineering.","DevOps Lead","2025-04-01","Not Started"
"RISK-007","Quality","The project mandates strict WCAG 2.1 AA accessibility compliance (REQ-1-063), which requires constant discipline. If developers are not trained or if checks are not enforced, accessibility debt will accumulate, leading to a costly and time-consuming remediation effort before launch, potentially delaying the release.","4","3","12","Medium","All UI-related work items, especially WI-090-CCC-WCAG-AUDIT.","Accessibility is often treated as an afterthought in fast-paced development. It requires specialized knowledge and consistent effort from the entire frontend team.","1. Make accessibility review a mandatory, non-skippable item on the pull request template for all UI code. 2. Integrate automated accessibility scanners (e.g., Axe for Flutter Web) into the CI pipeline. 3. Conduct a brief, mandatory WCAG 2.1 training session for all developers at the project's outset.","Allocate a dedicated two-week 'Accessibility Hardening' sprint in the project plan just before the planned User Acceptance Testing (UAT) phase.","An automated accessibility scan in the CI pipeline fails, blocking a PR merge. A manual spot-check during sprint review reveals a clear violation.","Frontend Lead","2025-02-28","Not Started"
"RISK-008","External","The project's revenue model depends on a subscription system, but the requirements only mention an assumption that 'A payment gateway and subscription management service will be integrated' (REQ-1-001). The complexity, cost, and integration effort for this service (e.g., Stripe, RevenueCat) are not defined, creating a significant risk to the business viability and timeline.","5","5","25","Critical","REQ-1-001 (Subscription Model), and the entire business model of the application.","A critical business and technical component has been relegated to an assumption instead of being formally specified with requirements and work items.","Immediately initiate a technical spike and business analysis to select a subscription management provider. Create a new Epic ('EPIC-011: Subscription & Billing') with detailed user stories and technical tasks for its integration. This must be treated as a critical path item for any paid tier launch.","Launch with only the free tier available, delaying monetization. This significantly impacts the business case for the project.","End of the current sprint without a formal plan and Epic for the subscription management system.","Product Owner","2025-02-07","Not Started"