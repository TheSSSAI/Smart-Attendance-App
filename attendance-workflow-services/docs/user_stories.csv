"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"US-001","User Authentication & Lifecycle","Admin registers a new organization tenant","Initial Admin User","As a new administrator, I want to register my organization by providing my details, a unique organization name, and selecting a data residency region, so that a new, isolated tenant is created for my company and I can begin configuring the system.","Enables new organizations to onboard themselves, creating the foundational tenant structure. This is the primary entry point for customer acquisition and is critical for the multi-tenant architecture.","Must Have","5","[]","[{""scenario"":""Successful registration with unique organization name"",""given"":""A potential administrator is on the registration page and has filled all required fields with valid data, including a globally unique organization name and a password meeting complexity requirements"",""when"":""The user clicks the 'Register' button"",""then"":""A new tenant document is created in Firestore, a new user is created in Firebase Authentication with the 'Admin' role, custom claims for tenantId and role are set on the user's auth token, the user is automatically logged in, and they are redirected to the Admin dashboard.""},{""scenario"":""Registration attempt with a duplicate organization name"",""given"":""An organization with the name 'Global Tech Inc.' already exists in the system"",""when"":""A new user enters 'Global Tech Inc.' as the organization name and submits the registration form"",""then"":""The system prevents form submission and displays an inline error message: 'Organization name is already taken. Please choose another.'""},{""scenario"":""Registration process creates all required data atomically"",""given"":""A user submits a valid registration form"",""when"":""An unexpected error occurs during the creation of the Firestore user document after the Firebase Auth user has been created"",""then"":""The entire transaction is rolled back, the Firebase Auth user is deleted, and no tenant or user documents are left in the database. The user is shown a generic error message like 'Registration failed. Please try again.'""}]","[""Backend: Create `registerOrganization` Callable Function (WI-015)"",""Web UI: Build Organization Registration Page (WI-016)""]","[""All acceptance criteria validated and passing"",""Unit tests for form validation and Cloud Function logic implemented with >80% coverage"",""Integration testing of the full registration flow completed successfully in the emulator suite"",""Security requirements, especially regarding custom claims and data handling, are validated"",""Story deployed and verified in the staging environment""]"
"US-002","User Authentication & Lifecycle","Admin is notified of a non-unique organization name during registration","Initial Admin User","As a Prospective Admin registering my organization for the first time, I want to be immediately notified if the organization name I enter is already in use, so that I can choose a unique name and complete the registration process without errors or confusion.","Ensures data integrity by enforcing unique tenant names, prevents user frustration during onboarding, and reduces potential support requests related to registration failures.","Must Have","3","[""US-001""]","[{""scenario"":""Duplicate organization name provided (case-insensitive)"",""given"":""an organization with the name 'Vandelay Industries' already exists in the system"",""when"":""a user enters 'vandelay industries' in the 'Organization Name' field and the field loses focus"",""then"":""an inline error message 'This organization name is already taken. Please choose another.' is displayed below the input field and the registration submission button is disabled.""},{""scenario"":""Unique organization name provided"",""given"":""a user is on the new organization registration page"",""when"":""the user enters a globally unique name in the 'Organization Name' field and the field loses focus (onBlur event)"",""then"":""a success indicator (e.g., green checkmark) is displayed next to the input field, and the registration submission button is enabled.""}]","[""Implement real-time validation on Organization Registration Page (part of WI-016)"",""Potentially create a dedicated, public validation Cloud Function""]","[""All acceptance criteria validated and passing"",""Integration testing between the client and Cloud Function completed successfully"",""Performance requirements for the validation endpoint are verified"",""Security requirements (rate limiting, App Check) are implemented and validated""]"
"US-003","User Authentication & Lifecycle","Admin selects a data residency region during tenant creation","Initial Admin User","As an initial Admin registering my organization, I want to select a primary data residency region from a list of supported locations during the sign-up process so that I can ensure my organization's data is stored in a specific geographic area to comply with data sovereignty regulations like GDPR.","Enables the product to meet data sovereignty and regulatory compliance requirements (e.g., GDPR), expanding the addressable market to enterprise customers in regulated regions and building trust.","Should Have","8","[""US-001""]","[{""scenario"":""Successful selection of a data residency region during registration"",""given"":""A user is on the new organization registration page"",""when"":""The user fills in all required fields and selects a valid data residency region (e.g., \""Europe (Frankfurt)\"") from the dropdown list"",""then"":""The system successfully creates a new tenant upon form submission and all subsequent data created for this tenant is physically stored in the infrastructure provisioned for the selected region.""},{""scenario"":""Attempting to register without selecting a region"",""given"":""A user is on the new organization registration page"",""when"":""The user attempts to submit the registration form without selecting a data residency region"",""then"":""The form submission is prevented and a validation error message, such as \""Please select a data residency region,\"" is displayed next to the region selection field.""},{""scenario"":""Region selection is non-modifiable after tenant creation"",""given"":""An Admin has successfully created a tenant with a specific data residency region"",""when"":""The Admin navigates to the organization settings page in the web dashboard"",""then"":""The selected data residency region is displayed as a read-only value and there is no user interface option to change it.""}]","[""Update `registerOrganization` Callable Function to handle region selection (part of WI-015)"",""Update Organization Registration Page to include region dropdown (part of WI-016)"",""Implement multi-region infrastructure architecture""]","[""All acceptance criteria validated and passing"",""Integration testing confirms data is written to the correct regional database"",""Architectural decisions and implementation details are documented"",""Story deployed and manually verified in the staging environment for at least two different regions""]"
"US-004","User Authentication & Lifecycle","Admin invites a new user to the organization via email","Admin","As an Admin, I want to invite new employees to the application by entering their email address and assigning them a role, so that they can receive a secure registration link, create their account, and become part of my organization's tenant.","Enables the onboarding of new employees into the system, facilitating organizational growth and the core attendance tracking function. Ensures that only authorized individuals can join a specific tenant.","Must Have","5","[""US-001""]","[{""scenario"":""Successful invitation of a new user"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Manage Users' page"",""when"":""I enter a valid and unique email address 'new.user@example.com', select the role 'Subordinate', and click 'Send Invitation'"",""then"":""A new user document is created in Firestore with the status 'invited', a success notification is displayed, and a transactional email is triggered to 'new.user@example.com' with a unique, 24-hour time-limited registration link.""},{""scenario"":""Attempting to invite a user who already exists in the tenant"",""given"":""an existing user with the email 'existing.user@example.com' is in my tenant"",""when"":""I attempt to invite a new user with the email 'existing.user@example.com'"",""then"":""The form submission is blocked and I see an inline error message: 'A user with this email already exists in your organization.'""}]","[""Backend: Create `inviteUser` Callable Function (WI-019)"",""Web UI: Build 'Invite User' Interface (WI-020)""]","[""All acceptance criteria validated and passing"",""Unit tests for form validation and Cloud Function logic are implemented"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements for role-based access and token generation are validated""]"
"US-005","User Authentication & Lifecycle","Invited user receives an email with a time-limited registration link","Invited User","As an invited user, I want to receive an email containing a unique, time-limited registration link after an Admin invites me, so that I can securely and easily begin the process of creating my account and joining my organization's workspace.","Provides a secure and automated mechanism for new user activation, which is critical for tenant growth. Ensures only the intended recipient can register, reducing security risks and support overhead.","Must Have","5","[""US-004""]","[{""scenario"":""Successful email delivery with a valid link"",""given"":""an Admin has successfully submitted an invitation for a new user with the email 'new.user@example.com'"",""when"":""the backend system processes the invitation request"",""then"":""the user receives an email containing a unique registration link to '.../register?token=...'. The email explicitly mentions that the link will expire in 24 hours.""},{""scenario"":""Email hard bounces"",""given"":""an invitation email is sent to a non-existent email address"",""when"":""the SendGrid service reports a hard bounce event"",""then"":""a webhook or monitoring process updates the invited user's profile in Firestore with a status indicating delivery failure (e.g., `invitationStatus: 'delivery_failed'`).""}]","[""Integrate SendGrid API within the `inviteUser` Callable Function (part of WI-019)"",""Create responsive HTML email template"",""Configure SendGrid webhooks for bounce handling""]","[""All acceptance criteria validated and passing"",""Integration with SendGrid is complete and tested"",""HTML email template is created, approved, and tested for responsiveness"",""Error handling and logging for email service failures are implemented and verified""]"
"US-006","User Authentication & Lifecycle","Invited user completes registration by setting a password","Invited User","As an Invited User, I want to securely complete my account registration by clicking a unique link from my invitation email and setting a strong password, so that I can activate my account, log in for the first time, and start using the attendance application.","Enables the final, critical step of user onboarding, converting an invited user into an active user. A seamless registration process improves user adoption and reduces administrative support load.","Must Have","5","[""US-004"",""US-005""]","[{""scenario"":""Successful account activation with a valid link and strong password"",""given"":""an invited user has a valid, non-expired registration link and is on the registration completion page"",""when"":""the user enters a password that meets the organization's policy, confirms it correctly, accepts the Terms of Service, and clicks 'Activate Account'"",""then"":""the system updates the user's status from 'invited' to 'active' in Firestore, the user is automatically logged in, and they are redirected to their role-specific dashboard.""},{""scenario"":""Attempting to use an expired registration link"",""given"":""an invited user has a registration link that is older than 24 hours"",""when"":""the user clicks the link"",""then"":""the user is redirected to a page that clearly states 'This invitation link has expired. Please contact your administrator to request a new invitation.'""}]","[""Backend: Create `completeRegistration` Function (WI-021)"",""Web UI: Build Registration Completion Page (WI-022)""]","[""All acceptance criteria validated and passing"",""Integration testing between the registration form and the Cloud Function completed successfully"",""E2E test for the full registration flow is passing"",""Security requirements (token invalidation, HTTPS) validated""]"
"US-007","User Authentication & Lifecycle","Invited user is notified when a registration link has expired","Invited User","As an invited user who has clicked on an old invitation link, I want to be shown a clear, dedicated page explaining that the link has expired, so that I understand why I cannot register and know that I need to contact my administrator for a new invitation.","Improves the user onboarding experience by providing clear feedback for a common error scenario. This reduces user frustration and minimizes support requests.","Must Have","3","[""US-004"",""US-005""]","[{""scenario"":""User clicks on an invitation link that has expired"",""given"":""An Admin has sent a user an invitation link which has a 24-hour validity period"",""when"":""The user clicks the invitation link more than 24 hours after it was generated"",""then"":""The system must display a dedicated 'Invitation Link Expired' page with clear, helpful information.""},{""scenario"":""An already active user clicks their old invitation link"",""given"":""A user has already completed their registration and their account status is 'active'"",""when"":""The user clicks on their original (now used) invitation link"",""then"":""The system should display a page informing them that their account is already active and provide a link to the main login page.""}]","[""Update Firebase Hosting rewrite rules to direct to a validation function (part of WI-021/022)"",""Create Flutter for Web page for 'Expired Link' (part of WI-022)""]","[""All acceptance criteria validated and passing"",""Integration testing between Hosting, Cloud Function, and Firestore is completed successfully"",""User interface reviewed for clarity and branding consistency"",""Security requirements validated, ensuring no PII is leaked""]"
"US-008","User Authentication & Lifecycle","Admin deactivates a user's account","Admin","As an Admin, I want to deactivate a user's account and be guided through any necessary reassignments, so that I can securely revoke access for departing employees and maintain the integrity of the organizational hierarchy.","Enhances organizational security by preventing unauthorized access from former employees and ensures management continuity by enforcing the reassignment of subordinates.","Must Have","5","[""US-001"",""US-004"",""US-017""]","[{""scenario"":""Admin successfully deactivates a user who is not a supervisor"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I select a user with the 'Subordinate' role, click 'Deactivate', and confirm the action"",""then"":""The system updates the user's status to 'deactivated', displays a success message, and the user's active session is invalidated.""},{""scenario"":""Admin is blocked from deactivating a Supervisor with active subordinates"",""given"":""I am an Admin and select a 'Supervisor' user who has active subordinates"",""when"":""I attempt to deactivate this Supervisor"",""then"":""The system prevents the deactivation and displays a modal explaining that all subordinates must be reassigned first.""},{""scenario"":""Admin cannot deactivate their own account"",""given"":""I am an Admin on the user management dashboard"",""when"":""I locate my own user account in the list"",""then"":""The 'Deactivate' action or button is disabled or hidden for my own account.""}]","[""Backend: Create `deactivateUser` Callable Function (WI-028)"",""Web UI: Implement User Deactivation and Reassignment Flow (WI-029)""]","[""All acceptance criteria validated and passing"",""Integration testing for the full deactivation flow completed successfully"",""Security requirement for session invalidation is manually verified and confirmed working"",""Audit log entry is correctly generated""]"
"US-009","User Authentication & Lifecycle","Admin is required to reassign subordinates before deactivating a Supervisor","Admin","As an Admin, I want to be prevented from deactivating a Supervisor who still has active subordinates and be prompted to reassign them first, so that I can ensure every employee remains managed and critical workflows like attendance approvals are not broken.","Ensures organizational hierarchy integrity by preventing 'orphaned' employees, maintaining the continuity of approval workflows.","Must Have","5","[""US-008""]","[{""scenario"":""Attempt to deactivate a Supervisor with active subordinates"",""given"":""An Admin attempts to deactivate a 'Supervisor' user who has one or more active subordinates"",""when"":""The deactivation action is triggered"",""then"":""The action is blocked, and a modal is displayed listing the affected subordinates and providing a 'Reassign Subordinates' action.""},{""scenario"":""Successful deactivation of a Supervisor after reassigning all subordinates"",""given"":""An Admin was blocked from deactivating a Supervisor and is in the reassignment interface"",""when"":""The Admin reassigns all subordinates to a new Supervisor and confirms"",""then"":""The deactivation action is successful, and the former Supervisor's status is updated to 'deactivated'.""}]","[""Backend: Create `deactivateUser` Callable Function (WI-028)"",""Web UI: Implement User Deactivation and Reassignment Flow (WI-029)""]","[""All acceptance criteria validated and passing"",""Integration testing of the full Admin workflow completed successfully"",""User interface for the reassignment modal reviewed and approved"",""Security rules/function permissions are validated to restrict access to Admins""]"
"US-010","User Authentication & Lifecycle","Deactivated user is prevented from logging in","Deactivated User","As a deactivated user, I want to be prevented from logging into the system, even with correct credentials, so that my former employer's data is secure after my access has been revoked.","Enhances security by ensuring that offboarded users cannot access tenant data, thereby protecting company information and enforcing access control policies.","Must Have","2","[""US-008"",""US-017""]","[{""scenario"":""Deactivated user attempts login with correct credentials"",""given"":""a user exists with a status of 'deactivated'"",""when"":""the user attempts to log in using their correct email and password"",""then"":""the system rejects the authentication attempt and displays a message 'Your account is no longer active. Please contact your administrator.'""},{""scenario"":""Deactivated user attempts login with incorrect credentials"",""given"":""a user exists with a status of 'deactivated'"",""when"":""the user attempts to log in with an incorrect password"",""then"":""the system rejects the authentication and displays a generic 'Invalid credentials' message to prevent account status enumeration.""}]","[""Backend: Enforce 'Active' Status on Login (WI-027)""]","[""All acceptance criteria validated and passing"",""Integration testing confirms that login is blocked server-side for inactive users"",""Security review confirms no information leakage"",""Firestore rules are updated to deny data access to non-active users""]"
"US-011","Supervisor & Admin Management","Admin creates a new team and assigns a Supervisor","Admin","As an Admin, I want to create a new team by providing a name and selecting an existing user as its Supervisor, so that I can accurately model my organization's structure, enabling proper approval workflows and team-based event assignments.","Enables the foundational hierarchical structure of the organization within the application, which is a prerequisite for managing user groups, assigning work, and implementing role-based approval workflows.","Must Have","5","[""US-001"",""US-004""]","[{""scenario"":""Successful creation of a new team"",""given"":""I am an Admin on the 'Team Management' page"",""when"":""I click 'Create Team', enter a unique team name, select a 'Supervisor' role user, and click 'Save'"",""then"":""a new team document is created in Firestore with the specified name and `supervisorId`, and a success notification is displayed.""},{""scenario"":""Attempt to create a team with a duplicate name"",""given"":""a team named 'Field Operations' already exists"",""when"":""I enter 'Field Operations' as the team name and attempt to save"",""then"":""the system prevents creation and displays an error message: 'Team name must be unique.'""},{""scenario"":""Supervisor selection list is correctly populated"",""given"":""I am on the 'Create Team' form"",""when"":""I click on the 'Select Supervisor' dropdown"",""then"":""the list only contains active users from my tenant who have the 'Supervisor' or 'Admin' role.""}]","[""Web UI: Build Team Management Page (WI-040)"",""Web UI: Implement 'Create Team' Modal (WI-041)""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules written and tested to ensure only Admins can create teams"",""Integration testing completed successfully against the Firebase Emulator Suite"",""User interface reviewed and approved""]"
"US-012","Supervisor & Admin Management","Admin edits an existing team's name or assigned Supervisor","Admin","As an Admin, I want to edit an existing team's name and reassign its supervisor so that the application accurately reflects my organization's current structure and ensures approval workflows are routed correctly.","Maintains data accuracy of the organizational hierarchy, ensuring correct routing of approval workflows and reliability of reports.","Must Have","5","[""US-011"",""US-051""]","[{""scenario"":""Admin successfully edits a team's name"",""given"":""I am an Admin editing an existing team"",""when"":""I change its name to a new, unique value and click 'Save'"",""then"":""the system updates the team's name, displays a success notification, and creates an audit log entry for the change.""},{""scenario"":""Admin successfully reassigns a team's supervisor"",""given"":""I am an Admin editing an existing team"",""when"":""I select a different, eligible user as the new supervisor and click 'Save'"",""then"":""the system updates the team's `supervisorId`, displays a success notification, and creates an audit log entry.""},{""scenario"":""Admin attempts to use a duplicate team name"",""given"":""another team named 'Field Ops' already exists"",""when"":""I change the current team's name to 'Field Ops' and attempt to save"",""then"":""the save is prevented and a validation error 'Team name must be unique' is displayed.""}]","[""Web UI: Implement 'Edit Team' Modal (WI-042)""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function achieving >80% coverage"",""The corresponding audit log entry is created correctly upon successful update"",""Security rules and function authentication logic are tested and verified""]"
"US-013","Supervisor & Admin Management","Admin deletes a team","Admin","As an Admin, I want to permanently delete a team from my organization, so that I can maintain an accurate and clean organizational structure by removing teams that are obsolete or no longer exist.","Improves data hygiene by allowing removal of outdated organizational structures, ensuring reports and user assignments reflect the current state of the company.","Should Have","5","[""US-011"",""US-014"",""US-055""]","[{""scenario"":""Admin successfully deletes a team"",""given"":""I am an Admin viewing the list of teams"",""when"":""I click the 'Delete' action for a specific team and confirm the action"",""then"":""The team document is deleted, a success notification is displayed, and the team is removed from the UI.""},{""scenario"":""Deletion confirmation dialog prevents accidental deletion"",""given"":""I am an Admin on the team management page"",""when"":""I click the 'Delete' action for a team"",""then"":""A confirmation modal appears with the text 'Are you sure you want to delete the team \""[Team Name]\""? This action cannot be undone.'""},{""scenario"":""Team deletion is reflected in associated user profiles"",""given"":""A team with several members is being deleted"",""when"":""The Admin confirms the deletion of the team"",""then"":""The `teamId` of the deleted team is removed from the `teamIds` array field for all users who were members of that team.""}]","[""Backend: Implement `deleteTeam` Cloud Function (WI-043)"",""Web UI: Implement 'Delete Team' Action (WI-044)""]","[""All acceptance criteria validated and passing"",""Cloud Function code reviewed and approved"",""Unit tests for the Cloud Function achieve >80% code coverage"",""Integration tests covering the full data modification flow are implemented and passing""]"
"US-014","Supervisor & Admin Management","Admin adds or removes members from any team","Admin","As an Admin, I want to add and remove users from any team within my organization, so that I can maintain accurate team rosters that reflect our current organizational structure.","Ensures data integrity of the organizational structure, which is foundational for correct reporting, supervisor approval workflows, and event assignments.","Must Have","5","[""US-004"",""US-011""]","[{""scenario"":""Admin successfully adds a user to a team"",""given"":""I am an Admin viewing the 'Manage Members' page for a specific team"",""when"":""I select a valid user who is not currently a member and confirm the addition"",""then"":""The user's name appears in the team's member list, and the backend data for both the team and the user is updated atomically.""},{""scenario"":""Admin successfully removes a user from a team"",""given"":""I am an Admin viewing the member list for a team"",""when"":""I click the 'Remove' action next to a member's name and confirm"",""then"":""The user's name is removed from the team's member list, and the backend data is updated atomically.""},{""scenario"":""System prevents adding a user who is already a member of the team"",""given"":""I am on the 'Add Member' interface for a specific team"",""when"":""I search for users to add"",""then"":""The list of available users must not include any users who are already members of that team.""}]","[""Web UI: Implement Team Membership Management (WI-045)""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules tests implemented and passing"",""End-to-end integration testing completed successfully"",""Security requirements validated via rule testing and code review""]"
"US-015","Supervisor & Admin Management","Supervisor adds or removes members from their own teams","Supervisor","As a Supervisor, I want to add and remove members from the teams I directly manage, so that I can maintain accurate team rosters and ensure workflows like event assignment and attendance approvals are directed to the correct people.","Empowers team leaders to manage their own rosters, improving data accuracy and operational efficiency while reducing administrative overhead on the Admin role.","Should Have","5","[""US-011""]","[{""scenario"":""Supervisor successfully adds an eligible user to a team they manage"",""given"":""I am a logged-in Supervisor viewing the details of a team I supervise"",""when"":""I add a 'Subordinate' role user who is not already on the team"",""then"":""the user is added to the team, their profile is updated, and my UI refreshes to show the new member.""},{""scenario"":""Supervisor is prevented from managing a team they do not supervise"",""given"":""I am a logged-in Supervisor"",""when"":""I attempt to modify the member list of a team for which I am not the designated supervisor"",""then"":""the system must reject the request with a 'permission-denied' error.""},{""scenario"":""The list of users to add excludes non-subordinate roles"",""given"":""I am a logged-in Supervisor viewing the 'Add Member' interface"",""when"":""I view the list of available users to add"",""then"":""the list must only contain users with the 'Subordinate' role.""}]","[""Implement Supervisor-specific team management UI in mobile app"",""Update Firestore security rules to allow Supervisors to edit their own teams""]","[""All acceptance criteria validated and passing"",""Integration testing for security rule enforcement completed successfully"",""User interface reviewed for usability and adherence to design guidelines"",""Security requirements validated, especially Firestore rules""]"
"US-016","Supervisor & Admin Management","Admin is prevented from creating a circular reporting structure","Admin","As an Admin, I want the system to validate and prevent me from assigning a supervisor to a user if that assignment would create a circular reporting loop, so that I can maintain a logical and functional organizational hierarchy and ensure approval workflows operate correctly.","Ensures data integrity of the organizational hierarchy, prevents infinite loops in approval/escalation workflows, and reduces administrative errors.","Must Have","5","[""US-014""]","[{""scenario"":""Admin attempts to create a direct circular dependency (A -> B, then B -> A)"",""given"":""'User B' reports directly to 'Supervisor A'"",""when"":""An Admin edits the profile of 'Supervisor A' and attempts to assign 'User B' as their new supervisor"",""then"":""The system must prevent the save operation and display an error: '\""User B\"" cannot be the supervisor as they are in the reporting line of \""Supervisor A\"".'""},{""scenario"":""Admin attempts to create a multi-level, indirect circular dependency (A -> B -> C, then C -> A)"",""given"":""'User C' reports to 'Supervisor B', and 'Supervisor B' reports to 'Manager A'"",""when"":""An Admin edits 'Manager A' and attempts to assign 'User C' as their supervisor"",""then"":""The system must traverse the hierarchy, detect the loop, prevent the save, and display a clear error message.""},{""scenario"":""Admin attempts to assign a user as their own supervisor"",""given"":""An Admin is editing the profile of 'User A'"",""when"":""The Admin attempts to select 'User A' as their own supervisor"",""then"":""The system must prevent the save and display an error: 'A user cannot be their own supervisor.'""}]","[""Create a `validateHierarchy` Cloud Function to check for circular dependencies"",""Integrate validation function into the user profile update workflow""]","[""All acceptance criteria validated and passing"",""Server-side validation logic is implemented in a Firebase Cloud Function"",""Unit tests for the Cloud Function achieve >90% coverage of the validation logic"",""Performance of the validation check is verified against requirements""]"
"US-017","User Authentication & Lifecycle","User logs in with email and password","Any registered user","As a registered user (Admin, Supervisor, or Subordinate), I want to securely log in to the application using my email and password, so that I can access my personalized dashboard and perform actions specific to my role.","Provides the fundamental security mechanism to authenticate users and grant them role-based access to tenant-specific data, enabling all subsequent application functionality.","Must Have","3","[""US-006""]","[{""scenario"":""Successful login with valid credentials"",""given"":""A registered user with an 'active' status is on the login screen"",""when"":""The user enters their correct email and password and taps the 'Log In' button"",""then"":""The system successfully authenticates the user, a session is created, and the user is redirected to their role-specific dashboard.""},{""scenario"":""Login attempt with an incorrect password"",""given"":""A registered user is on the login screen"",""when"":""The user enters their correct email but an incorrect password"",""then"":""A clear, non-specific error message 'Invalid email or password. Please try again.' is displayed.""},{""scenario"":""Login attempt by a deactivated user"",""given"":""A user whose account status is 'deactivated' is on the login screen"",""when"":""The user enters their correct email and password"",""then"":""A specific error message is displayed: 'Your account has been deactivated. Please contact your administrator.'""}]","[""Implement Email/Password Login UI and Logic (WI-023)""]","[""All acceptance criteria are met and have been validated"",""End-to-end integration tests for all major scenarios are passing"",""UI conforms to the design specifications and accessibility standards"",""Security review confirms that credentials are handled securely""]"
"US-018","User Authentication & Lifecycle","User logs in with Phone OTP","Any registered user","As a registered user (Admin, Supervisor, or Subordinate), I want to log in to the application using a one-time password (OTP) sent to my registered phone number, so that I can securely and conveniently access my account without needing to remember my password.","Improves account security and enhances user experience by providing a convenient, passwordless login option, potentially reducing password-related support issues.","Could Have","5","[""US-017""]","[{""scenario"":""Successful login with a valid phone number and OTP"",""given"":""I am on the login screen and have an active account with a registered phone number"",""when"":""I select 'Login with Phone', enter my number, receive an OTP, and enter the correct OTP"",""then"":""the system validates the OTP, logs me in, and I am redirected to my role-specific dashboard.""},{""scenario"":""Entering an incorrect OTP"",""given"":""I am on the OTP verification screen"",""when"":""I enter an incorrect 6-digit OTP and tap 'Verify'"",""then"":""I see an error message 'Invalid code. Please try again.' and remain on the screen.""},{""scenario"":""Requesting to resend the OTP"",""given"":""I am on the OTP verification screen"",""when"":""I tap the 'Resend Code' button after the cooldown period"",""then"":""a new OTP is sent to my phone, the expiry timer resets, and the 'Resend Code' button is disabled for another cooldown.""}]","[""Implement Phone OTP Login Flow (WI-024)""]","[""All acceptance criteria validated and passing on both iOS and Android physical devices"",""End-to-end manual testing of the full login flow completed successfully"",""Firebase project configuration for phone auth is documented"",""Security requirements, especially rate limiting, are validated""]"
"US-019","User Authentication & Lifecycle","User is temporarily locked out after multiple failed login attempts","Any registered user","As a registered user, I want my account to be temporarily locked after a specific number of consecutive failed login attempts, so that my account is protected from unauthorized access via brute-force attacks.","Enhances platform security by mitigating brute-force and dictionary attacks, protecting user data, and building user trust in the system's security measures.","Must Have","3","[""US-017"",""US-020""]","[{""scenario"":""Account is locked after 5 consecutive failed login attempts"",""given"":""A user with a valid account exists"",""when"":""The user enters an incorrect password for the 5th consecutive time"",""then"":""The system locks the account for 15 minutes AND displays 'Your account has been temporarily locked... Please try again in 15 minutes.'""},{""scenario"":""Failed login attempt counter is reset after a successful login"",""given"":""A user has 4 consecutive failed login attempts"",""when"":""The user enters the correct password on the 5th attempt"",""then"":""The user is successfully logged in AND the failed login attempt counter for their account is reset to 0.""},{""scenario"":""Successful password reset unlocks the account immediately"",""given"":""A user's account is in a locked state"",""when"":""The user successfully completes the 'Forgot Password' flow"",""then"":""The account lock is immediately removed AND the failed login attempt counter is reset to 0.""}]","[""Leverage Firebase Authentication's built-in Identity Platform protection (part of WI-023)""]","[""All acceptance criteria validated and passing in a staging environment"",""Integration tests covering the full login/lockout/unlock flow are implemented and passing"",""Security review confirms that the lockout logic cannot be bypassed from the client""]"
"US-020","User Authentication & Lifecycle","User resets their forgotten password","Any registered user","As a registered user, I want to request a password reset link via my registered email address so that I can securely set a new password and regain access to my account if I forget my current one.","Provides a critical self-service mechanism for account recovery, reducing administrative support load and improving user experience.","Must Have","2","[""US-017"",""US-073""]","[{""scenario"":""User successfully requests a password reset link"",""given"":""I am on the application's login screen"",""when"":""I click 'Forgot Password?', enter my valid registered email, and submit"",""then"":""I see a confirmation message: 'If an account with that email exists, a password reset link has been sent.'""},{""scenario"":""User successfully resets their password using the link"",""given"":""I have received a password reset email and clicked the valid link"",""when"":""I enter a new password that meets complexity policy, confirm it, and submit"",""then"":""My password is updated, and I see a success message with a link to the login page.""},{""scenario"":""User enters an unregistered email address"",""given"":""I am on the password reset request screen"",""when"":""I enter an email address that is not registered and submit"",""then"":""I see the exact same generic confirmation message to prevent email enumeration.""}]","[""Implement 'Forgot Password' Flow (WI-025)""]","[""All acceptance criteria validated and passing"",""End-to-end integration test for the full flow is implemented and passing"",""Security check for email enumeration vulnerability has been performed and passed""]"
"US-021","User Authentication & Lifecycle","User sees a role-specific dashboard after logging in","Any authenticated user","As an authenticated user (Admin, Supervisor, or Subordinate), I want to be automatically routed to my role-specific dashboard immediately after a successful login, so that I can efficiently access the information and tools relevant to my responsibilities without unnecessary navigation.","Improves user efficiency and satisfaction by providing a personalized experience and reinforcing the Role-Based Access Control (RBAC) model.","Must Have","2","[""US-017""]","[{""scenario"":""Admin successfully logs into the web application"",""given"":""a registered user exists with the role 'Admin'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must redirect them to the main Admin Web Dashboard.""},{""scenario"":""Supervisor successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Supervisor'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Supervisor Mobile Dashboard.""},{""scenario"":""Subordinate successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Subordinate'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Subordinate Mobile Dashboard.""},{""scenario"":""Non-Admin user attempts to log into the web application"",""given"":""a registered user exists with the role 'Supervisor' or 'Subordinate'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must display a page informing them that the web dashboard is for administrative access only.""}]","[""Implement Role-Based Routing (WI-026)""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully for all roles and platforms"",""Security requirements for using custom claims are validated via code review""]"
"US-022","User Authentication & Lifecycle","Admin initiates the permanent deletion of their organization's tenant","Admin","As an Admin, I want to initiate the permanent deletion of my organization's tenant through a secure, multi-step process, so that I can comply with my company's data removal policies and ensure all our data is erased from the service when we decide to stop using it.","Provides a self-service offboarding capability, ensures compliance with data privacy regulations (e.g., GDPR's 'right to erasure'), and builds customer trust by giving them control over their data.","Should Have","5","[""US-023"",""US-024"",""US-025""]","[{""scenario"":""Admin successfully initiates tenant deletion"",""given"":""an Admin is logged into the web dashboard and on the 'Tenant Settings' page"",""when"":""the Admin clicks 'Delete Organization', confirms the warning, and re-authenticates with their password"",""then"":""the system updates the tenant's status to 'pending_deletion', sets a 30-day grace period, displays a success message, and creates an audit log entry.""},{""scenario"":""Admin enters incorrect password during re-authentication"",""given"":""an Admin has initiated tenant deletion and is prompted to re-authenticate"",""when"":""the Admin enters an incorrect password"",""then"":""the system displays an 'Invalid password' error, and the deletion process is aborted.""}]","[""Backend: Implement Tenant Deletion Workflow (WI-030)"",""Web UI: Build Tenant Deletion Interface (WI-031)""]","[""All acceptance criteria validated and passing"",""Integration testing of the full flow (UI -> Cloud Function -> Firestore) completed successfully"",""Security requirements validated, including role-based access control on the Cloud Function""]"
"US-023","User Authentication & Lifecycle","Admin must re-authenticate to confirm tenant deletion","Admin","As an Admin with the authority to delete my organization's tenant, I want to be forced to re-enter my password to confirm the deletion request, so that I can prevent accidental or unauthorized deletion of all my organization's data.","Prevents catastrophic, accidental data loss for an entire organization, which protects against significant business disruption and enhances system security.","Must Have","5","[""US-022""]","[{""scenario"":""Admin successfully re-authenticates to confirm tenant deletion"",""given"":""an Admin has clicked the 'Delete Tenant' button, triggering the confirmation step"",""when"":""the re-authentication modal appears, the Admin enters their correct password, and confirms"",""then"":""the system validates the password and the tenant deletion process is initiated.""},{""scenario"":""Admin enters an incorrect password"",""given"":""the re-authentication modal for tenant deletion is displayed"",""when"":""the Admin enters an incorrect password and confirms"",""then"":""an inline error message 'Incorrect password. Please try again.' is displayed, and the deletion process is not initiated.""}]","[""Web UI: Build Tenant Deletion Interface (WI-031)"",""Backend: Implement re-authentication check in Tenant Deletion Workflow (WI-030)""]","[""All acceptance criteria validated and passing"",""Integration testing between the frontend and backend function completed successfully"",""Security requirements validated, including role-based access control on the Cloud Function""]"
"US-024","User Authentication & Lifecycle","Admin is informed of the 30-day grace period for tenant deletion","Admin","As an Admin who has just confirmed a request to delete my organization's tenant, I want to be immediately and clearly informed about the 30-day grace period and the final deletion date, so that I understand the consequences of my action and know how to reverse the process if needed.","Provides a critical safety mechanism to prevent accidental, irreversible data loss. This builds user trust and reduces support incidents.","Must Have","2","[""US-022""]","[{""scenario"":""Display of grace period information after deletion confirmation"",""given"":""An Admin has successfully confirmed the tenant deletion request"",""when"":""the system processes the request"",""then"":""the UI displays a prominent, persistent banner stating a 30-day grace period has begun and shows the final deletion date.""},{""scenario"":""Email notification of pending deletion"",""given"":""an Admin has successfully confirmed the tenant deletion request"",""when"":""the backend processes the request"",""then"":""the system sends an email to the initiating Admin's address containing the 30-day grace period and the permanent deletion date.""}]","[""Backend: Implement Tenant Deletion Workflow (WI-030)"",""Web UI: Build Tenant Deletion Interface (WI-031)""]","[""All acceptance criteria validated and passing"",""Integration testing between the frontend, Cloud Function, and Firestore completed successfully"",""User interface reviewed for clarity and accessibility compliance""]"
"US-025","User Authentication & Lifecycle","Admin cancels a pending tenant deletion","Admin","As an Admin of an organization, I want to cancel a previously requested tenant deletion during the 30-day grace period, so that I can prevent the permanent loss of my organization's data and restore full access to the application if I change my mind or made a mistake.","Provides a critical safety net to prevent accidental or premature permanent data loss. Reduces customer support load by enabling self-service reversal of a destructive action.","Must Have","5","[""US-022"",""US-024""]","[{""scenario"":""Admin successfully cancels a pending deletion within the grace period"",""given"":""I am an Admin for a tenant whose status is 'pending_deletion' and it is within the 30-day grace period"",""when"":""I click the 'Cancel Scheduled Deletion' button and confirm"",""then"":""The system updates the tenant's status from 'pending_deletion' to 'active' and creates an audit log for the cancellation.""},{""scenario"":""UI reflects the restored active state after cancellation"",""given"":""An Admin has successfully cancelled a pending tenant deletion"",""when"":""The 'Tenant Settings' page reloads"",""then"":""The warning banner about the pending deletion is no longer visible and a success message is shown.""},{""scenario"":""Attempt to cancel deletion outside the grace period"",""given"":""A tenant's 30-day grace period for deletion has expired"",""when"":""An Admin attempts to trigger the cancellation action"",""then"":""The system must reject the request with an error: 'The grace period has expired.'""}]","[""Backend: Implement Tenant Deletion Workflow (WI-030)"",""Web UI: Build Tenant Deletion Interface (WI-031)""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security rules and server-side validation logic have been peer-reviewed""]"
"US-026","User Authentication & Lifecycle","User accepts Terms of Service and Privacy Policy","New User","As a new user completing my registration, I want to be presented with the Terms of Service and Privacy Policy and be required to accept them, so that I understand the rules of the service and how my data will be used, and my account can be fully activated for use.","Ensures legal and regulatory compliance (e.g., GDPR) by obtaining explicit user consent before account activation. Mitigates legal risk and builds user trust.","Must Have","2","[""US-006""]","[{""scenario"":""User reviews and accepts policies"",""given"":""A new user has successfully set their password and is on the 'Terms and Policy Acceptance' screen"",""when"":""The user checks the box to accept AND clicks the 'Accept & Continue' button"",""then"":""The system updates the user's status to 'active', creates an audit log of the acceptance, and redirects them to their dashboard.""},{""scenario"":""User attempts to continue without accepting"",""given"":""A new user is on the 'Terms and Policy Acceptance' screen"",""when"":""The user attempts to click 'Accept & Continue' without checking the box"",""then"":""The button must be in a disabled state and no action is performed.""},{""scenario"":""User closes the app before accepting"",""given"":""A new user is on the acceptance screen and closes the app"",""when"":""The user re-opens the app and logs in"",""then"":""The system must redirect them back to the 'Terms and Policy Acceptance' screen.""}]","[""Update `completeRegistration` function to handle ToS acceptance"",""Create 'Terms and Policy Acceptance' screen in Flutter web app""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully, verifying Firestore updates"",""Security requirement for atomic, audited writes is validated""]"
"US-027","User Authentication & Lifecycle","User password must meet complexity requirements","Any System User","As a System User (Admin, Supervisor, or Subordinate), I want my new password to be validated against a set of complexity rules when I register or reset my password, so that I can be confident my account is protected against unauthorized access.","Enhances account and data security by preventing the use of weak or easily guessable passwords. Reduces the risk of unauthorized access and supports security compliance.","Must Have","5","[""US-006"",""US-020""]","[{""scenario"":""User enters a password that meets all complexity requirements"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password that satisfies all rules (e.g., 'StrongP@ssw0rd')"",""then"":""Each requirement in the real-time validation checklist is marked as 'met' and the 'Submit' button becomes enabled.""},{""scenario"":""Password is missing a required character type"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password that meets length but is missing a number (e.g., 'MissingNumber@')"",""then"":""The 'at least one number' requirement in the validation checklist is marked as 'unmet' and the 'Submit' button remains disabled.""},{""scenario"":""Server-side validation rejects an invalid password"",""given"":""A user attempts to set a new password by bypassing client-side validation"",""when"":""The request contains a password that does not meet the policy"",""then"":""The server-side logic (Cloud Function) must reject the request and the user's password is not updated.""}]","[""Backend: Implement Password Policy Enforcement (WI-017)"",""Web UI: Implement Password Policy Validation UI (WI-018)""]","[""All acceptance criteria validated and passing"",""Server-side validation logic implemented in a Cloud Function and tested"",""Integration testing completed successfully for registration and password reset flows"",""Security requirements validated, including a test to bypass client-side checks""]"
"US-028","Core Attendance Workflow","Subordinate checks in for attendance","Subordinate","As a Subordinate, I want to tap a 'Check-In' button on my mobile app so that the system captures my current time and GPS location to create an official attendance record for the start of my workday.","Provides a verifiable, time-stamped, and geo-located record of when an employee starts their workday, which is the foundational data point for all attendance tracking.","Must Have","5","[""US-017"",""US-021"",""US-076""]","[{""scenario"":""Successful check-in with an active internet connection"",""given"":""I am a logged-in Subordinate with location permissions, and I have not checked in for the day"",""when"":""I tap the 'Check-In' button"",""then"":""The system captures my timestamp and GPS, creates a new 'pending' attendance record in Firestore, and the UI updates to show my check-in time.""},{""scenario"":""Check-in attempt without location permissions"",""given"":""I am a logged-in Subordinate and have denied location permissions"",""when"":""I tap the 'Check-In' button"",""then"":""The system prompts me to grant permissions. If denied, the check-in fails with an error stating location is required.""},{""scenario"":""Successful check-in while the device is offline"",""given"":""I am a logged-in Subordinate and my device has no internet connectivity"",""when"":""I tap the 'Check-In' button"",""then"":""The attendance record is created in the local cache with an `isOfflineEntry` flag, and the UI updates immediately to show I am checked in.""}]","[""Mobile Logic: Implement Check-in Action (WI-034)""]","[""All acceptance criteria validated and passing"",""E2E tests for offline and permission flows are passing"",""Performance requirements for GPS lock and data sync are verified"",""Security rules for creating attendance records are deployed and tested""]"
"US-029","Core Attendance Workflow","Subordinate checks out from attendance","Subordinate","As a Subordinate, I want to check out at the end of my shift by tapping a button, so that my attendance record for the day is completed with an accurate timestamp and GPS location, ensuring my work duration is correctly logged.","Completes the daily attendance data loop, enabling accurate calculation of work duration and providing complete records for reporting, compliance, and operational management.","Must Have","5","[""US-028"",""US-030"",""US-033""]","[{""scenario"":""Successful check-out on an active attendance record"",""given"":""a Subordinate has an active check-in record for the current day"",""when"":""the user taps the 'Check-Out' button"",""then"":""the system captures the timestamp and GPS, updates the existing attendance record with a 'checkOutTime' and 'checkOutGps', and displays a success message.""},{""scenario"":""User performs a check-out while the device is offline"",""given"":""a Subordinate has an active check-in and their device is offline"",""when"":""the user taps the 'Check-Out' button"",""then"":""the system saves the check-out data to the local cache with an 'isOfflineEntry' flag and displays a message indicating the record will sync when connectivity is restored.""},{""scenario"":""System cannot acquire a GPS signal during check-out"",""given"":""a Subordinate attempts to check out"",""when"":""the device is unable to get a GPS lock within the 10-second timeout"",""then"":""the system prevents the check-out and displays a clear error message.""}]","[""Mobile Logic: Implement Check-out Action (WI-035)""]","[""All acceptance criteria validated and passing"",""End-to-end test scenario for the check-out flow is implemented and passing"",""Manual testing confirms correct functionality on target iOS and Android physical devices"",""Security rules preventing unauthorized updates are tested and validated""]"
"US-030","Core Attendance Workflow","Subordinate is prevented from checking out before checking in","Subordinate","As a Subordinate, I want the 'Check-Out' button to be disabled and visually distinct until I have successfully checked in for the day, so that I am prevented from making a logical error in my attendance record and can follow the correct workflow without confusion.","Ensures data integrity by preventing orphaned check-out records, reduces user error and subsequent correction requests, and provides a clear, guided user experience.","Must Have","2","[""US-028""]","[{""scenario"":""Initial state on a new day"",""given"":""a Subordinate user opens the attendance screen"",""when"":""they have no active attendance record for the current day"",""then"":""the 'Check-In' button is enabled and the 'Check-Out' button is disabled.""},{""scenario"":""UI state updates immediately after a successful check-in"",""given"":""a Subordinate is on the attendance screen with the 'Check-In' button enabled"",""when"":""they successfully perform a check-in action"",""then"":""the 'Check-In' button immediately becomes disabled, and the 'Check-Out' button immediately becomes enabled.""},{""scenario"":""State reset on a new calendar day"",""given"":""a Subordinate had an active check-in on the previous day"",""when"":""they open the app after midnight according to the tenant's timezone"",""then"":""the attendance screen state is reset for the new day, with 'Check-In' enabled and 'Check-Out' disabled.""}]","[""Implement button state logic in Main Attendance Screen (part of WI-033)""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully against the Firebase Emulator"",""Accessibility requirements for button states validated with a screen reader""]"
"US-031","Admin Reporting & Dashboard","Admin views and filters for attendance records flagged for clock discrepancy","Admin","As an Admin, I want to view and filter for attendance records that are flagged for a significant clock discrepancy between the device and the server, so that I can audit data integrity and investigate potential time manipulation.","Enhances data integrity by providing a mechanism to audit and investigate anomalies, helping detect potential time fraud or recurring technical problems.","Should Have","3","[""US-059"",""US-060""]","[{""scenario"":""Visual identification of a flagged record in the attendance report"",""given"":""an Admin is viewing the main attendance report"",""when"":""the report displays a record with the 'clock_discrepancy' flag"",""then"":""that record's row must display a clear visual indicator (e.g., a warning icon).""},{""scenario"":""Admin filters the report to show only records with clock discrepancies"",""given"":""the attendance report contains a mix of records"",""when"":""the Admin selects the 'Clock Discrepancy' option from the report's filter controls"",""then"":""the report view must update to show only the records that contain the 'clock_discrepancy' flag.""}]","[""Web UI: Build Exception Report (WI-062)""]","[""All acceptance criteria validated and passing"",""The required Firestore index is defined in `firestore.indexes.json` and deployed"",""Performance requirements for filtering verified""]"
"US-032","Core Attendance Workflow","Subordinate's attendance is automatically checked out","Subordinate","As a Subordinate, I want the system to automatically check me out at a specific time set by my organization so that my attendance record is complete and accurate even if I forget to manually check out.","Improves data integrity by ensuring all attendance records are closed daily, reducing administrative overhead for manual corrections.","Should Have","5","[""US-028"",""US-069"",""US-070""]","[{""scenario"":""Successful auto-checkout for a user who forgot to check out"",""given"":""An organization has enabled auto-checkout for 17:30 in their timezone"",""when"":""The scheduled auto-checkout function runs"",""then"":""A Subordinate's open attendance record is updated with a 'checkOutTime' of 17:30 and an 'auto-checked-out' flag.""},{""scenario"":""Auto-checkout process ignores users who have already checked out"",""given"":""A Subordinate has manually checked out at 17:15"",""when"":""The scheduled auto-checkout function runs at 17:30"",""then"":""The Subordinate's attendance record is NOT modified.""},{""scenario"":""Auto-checked-out record is visually distinct in the Supervisor's dashboard"",""given"":""A Subordinate's record has been auto-checked-out"",""when"":""Their Supervisor views the list of pending records"",""then"":""The record is displayed with a clear visual indicator for 'Auto Check-Out'.""}]","[""Create a scheduled Cloud Function for auto-checkout"",""Update Supervisor and Subordinate UIs to display the 'auto-checked-out' flag""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function implemented with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Required Firestore indexes are defined and deployed""]"
"US-033","Core Attendance Workflow","Subordinate marks attendance while offline","Subordinate","As a Subordinate, I want to be able to check in and check out when my device is offline, so that my attendance is captured accurately at the correct time, regardless of my network connectivity.","Ensures data integrity by capturing attendance at the moment it occurs. Increases system reliability and user trust, reducing manual corrections for missed punches.","Must Have","5","[""US-028"",""US-029""]","[{""scenario"":""User performs a check-in while the device is offline"",""given"":""The user is logged in and their device has no internet connectivity"",""when"":""The user taps the 'Check-In' button"",""then"":""The app captures timestamp and GPS, creates a record in the local cache with an 'isOfflineEntry' flag, and the UI updates to show a 'Checked In' status.""},{""scenario"":""Offline records are automatically synchronized when connectivity is restored"",""given"":""The user has records stored in the local cache from offline actions"",""when"":""The device regains a stable internet connection"",""then"":""The Firestore SDK automatically syncs the local records to the server, preserving the 'isOfflineEntry' flag.""},{""scenario"":""Application is closed before offline data can be synced"",""given"":""The user performs an offline check-in and terminates the app before reconnecting"",""when"":""The user later re-launches the app with an active internet connection"",""then"":""The app's startup process ensures the Firestore SDK initiates synchronization.""}]","[""Mobile Logic: Flag Offline Entries (WI-038)"",""Configure Firestore Offline Persistence (WI-037)""]","[""All acceptance criteria validated and passing"",""E2E integration tests for all offline scenarios are implemented and passing"",""Manual verification on both Android and iOS physical devices""]"
"US-034","Core Attendance Workflow","Subordinate's offline attendance syncs automatically","Subordinate","As a Subordinate, I want my offline attendance records to be automatically sent to the server when my device reconnects to the internet, so that my attendance is accurately recorded without any extra effort from my side.","Ensures data integrity by capturing all attendance records regardless of network status. Improves user experience by removing the need for manual synchronization.","Must Have","5","[""US-033""]","[{""scenario"":""Successful sync of a single offline check-in record"",""given"":""a user performs a check-in while offline"",""when"":""the device later regains a stable internet connection"",""then"":""the Firestore SDK automatically syncs the pending write to the server, and the record appears in the backend with the `isOfflineEntry: true` flag.""},{""scenario"":""Syncing multiple offline records"",""given"":""a user creates multiple unsynced records while offline"",""when"":""the device regains a stable internet connection"",""then"":""all pending offline records are automatically sent to the server.""},{""scenario"":""Sync is attempted while app is in the background"",""given"":""a user creates an offline record and minimizes the app"",""when"":""the device regains internet connectivity while the app is in the background"",""then"":""the sync process is initiated by the OS and the Firestore SDK (within platform limitations).""}]","[""This functionality is primarily handled by the Firestore SDK, configured in WI-037""]","[""All acceptance criteria validated and passing"",""Manual E2E testing on physical Android and iOS devices confirms sync works as expected in various network conditions"",""Performance requirements verified (no UI blocking)""]"
"US-035","Core Attendance Workflow","Subordinate is notified of a persistent sync failure","Subordinate","As a Subordinate, I want to be clearly and persistently notified within the app if my offline attendance data has failed to sync for over 24 hours, so that I can take action to resolve the issue and prevent my records from being lost.","Ensures data integrity by preventing the silent loss of offline attendance records, building user trust and reducing administrative overhead for manual corrections.","Should Have","5","[""US-033""]","[{""scenario"":""Notification appears for a single stale offline record"",""given"":""a user has an unsynced offline record older than 24 hours"",""when"":""the user opens the application"",""then"":""a persistent, non-dismissible notification banner is displayed at the top of the main screens with text like '1 record failed to sync'.""},{""scenario"":""Notification includes an action to resolve"",""given"":""the persistent sync failure notification is visible"",""when"":""the user views the notification"",""then"":""the notification includes an actionable button like 'Retry Sync'.""}]","[""Mobile UI: Implement Persistent Sync Failure Notification (WI-039)""]","[""All acceptance criteria validated and passing"",""E2E integration test for the full offline-notify-retry cycle is implemented and passing"",""Performance impact on app startup has been measured and is within acceptable limits""]"
"US-036","Core Attendance Workflow","Subordinate manually re-triggers a failed data sync","Subordinate","As a Subordinate, I want to be able to manually trigger a re-sync of my offline attendance records that have failed to upload automatically, so that I can ensure my attendance data is not lost and is accurately recorded on the server.","Prevents data loss for offline entries, ensures data integrity, reduces administrative overhead, and builds user trust in the system's reliability.","Should Have","3","[""US-035""]","[{""scenario"":""Successful manual re-sync of a failed record"",""given"":""I have a 'Sync Failed' notification for an offline record"",""when"":""I tap the 'Retry Sync' button while my device has a stable internet connection"",""then"":""the system re-attempts to sync the record, and upon success, the 'Sync Failed' notification is removed.""},{""scenario"":""Manual re-sync attempt fails due to no internet connectivity"",""given"":""I have a 'Sync Failed' notification"",""when"":""I tap 'Retry Sync' while my device is still offline"",""then"":""the system displays a clear error message 'Sync failed. Please check your internet connection and try again.' and the notification remains.""}]","[""Mobile UI: Implement Persistent Sync Failure Notification (WI-039)""]","[""All acceptance criteria validated and passing on both iOS and Android"",""E2E integration test for the manual sync happy path and failure path is implemented and passing"",""All error states are handled gracefully and logged appropriately""]"
"US-037","Supervisor & Admin Management","Supervisor views pending attendance records from subordinates","Supervisor","As a Supervisor, I want to see a clear and filterable list of all attendance records from my direct subordinates that are awaiting my review, so that I can efficiently manage my team's attendance and take timely action on pending approvals.","Enables the core attendance approval workflow, ensuring that employee work hours are verified in a timely manner, which is critical for data integrity and accountability.","Must Have","5","[""US-015"",""US-028""]","[{""scenario"":""Supervisor views a list of pending records"",""given"":""a Supervisor has at least one subordinate with a 'pending' attendance record"",""when"":""the Supervisor navigates to their main dashboard"",""then"":""a list of all 'pending' records from their direct subordinates is displayed.""},{""scenario"":""List only shows records from direct subordinates"",""given"":""a Supervisor is logged in"",""when"":""the system fetches attendance records for their dashboard"",""then"":""the query must filter records where the `supervisorId` field matches the logged-in Supervisor's `userId`.""},{""scenario"":""Real-time Updates: List updates when a new record is submitted"",""given"":""a Supervisor is viewing their attendance review screen"",""when"":""one of their direct subordinates submits a new attendance record"",""then"":""the new 'pending' record automatically appears at the top of the list without requiring a manual refresh.""}]","[""Mobile UI: Build Supervisor's Pending Approvals Dashboard (WI-046)""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this feature are written and tested"",""Required Firestore composite index is defined in `firestore.indexes.json`"",""Performance requirements (load time) verified""]"
"US-038","Supervisor & Admin Management","Supervisor identifies flagged attendance records","Supervisor","As a Supervisor, I want to see clear visual indicators on attendance records that have been flagged for exceptions (like offline entry or clock discrepancy), so that I can quickly identify records that require closer scrutiny.","Improves the efficiency and accuracy of the attendance approval process by focusing the Supervisor's attention on anomalous records, thereby enhancing data integrity.","Should Have","2","[""US-037""]","[{""scenario"":""Display indicator for offline entry"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'isOfflineEntry' flag"",""then"":""the record must display a distinct visual indicator (e.g., an icon or chip) representing an offline entry.""},{""scenario"":""Display indicator for clock discrepancy"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'clock_discrepancy' flag"",""then"":""the record must display a distinct visual indicator representing a clock discrepancy.""},{""scenario"":""Display indicators for a record with multiple flags"",""given"":""a Supervisor is viewing their dashboard"",""when"":""an attendance record has both 'isOfflineEntry' and 'clock_discrepancy' flags"",""then"":""the record must display a separate visual indicator for each flag.""}]","[""Mobile UI: Display Exception Flags on Records (WI-047)""]","[""All acceptance criteria validated and passing"",""User interface reviewed and approved by the Product Owner/Designer"",""Accessibility requirements validated with screen readers and contrast checkers""]"
"US-039","Supervisor & Admin Management","Supervisor approves a single attendance record","Supervisor","As a Supervisor, I want to approve a single pending attendance record for one of my subordinates so that I can validate their work hours and move the record to an 'approved' state for accurate reporting.","Enables the core attendance validation workflow, ensures data integrity for reporting, and provides accountability by formally confirming subordinate work hours.","Must Have","2","[""US-037""]","[{""scenario"":""Successful approval of a pending record"",""given"":""I am a Supervisor viewing a 'pending' record from my direct subordinate"",""when"":""I tap the 'Approve' button for that record"",""then"":""The system updates the record's status to 'approved', displays a success message, and the record is removed from my 'Pending Approvals' list.""},{""scenario"":""Audit Trail: Approval action is logged"",""given"":""I am about to approve a pending record"",""when"":""The system successfully processes my approval"",""then"":""A new, immutable document is created in the `auditLog` collection with details of the approval action.""},{""scenario"":""Subordinate View: Subordinate sees the updated status"",""given"":""My subordinate's record has a 'pending' status"",""when"":""I approve that record"",""then"":""When my subordinate views their attendance history, the status for that record is 'Approved'.""}]","[""Mobile Logic: Implement Single Record Approve/Reject (WI-048)""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this action are written and tested"",""Integration testing with the Firebase Emulator completed successfully""]"
"US-040","Supervisor & Admin Management","Supervisor rejects a single attendance record with a reason","Supervisor","As a Supervisor, I want to reject a subordinate's attendance record and be required to provide a reason, so that I can maintain accurate team records and provide clear feedback to my subordinate for correction.","Ensures data accuracy, provides a transparent and auditable approval workflow, and facilitates clear communication between supervisors and subordinates regarding attendance issues.","Must Have","2","[""US-037""]","[{""scenario"":""Supervisor successfully rejects a record with a valid reason"",""given"":""A Supervisor is viewing a 'pending' attendance record"",""when"":""The Supervisor selects 'Reject', enters a reason, and confirms"",""then"":""The record's status is updated to 'rejected', the `rejectionReason` field is populated, a success notification is shown, and the record is removed from the pending list.""},{""scenario"":""Attempting to reject without providing a reason"",""given"":""A Supervisor has initiated the rejection process"",""when"":""The Supervisor attempts to confirm without entering a reason"",""then"":""The system displays a validation error 'A reason is required for rejection' and the action is blocked.""},{""scenario"":""Audit log is created for the rejection action"",""given"":""A Supervisor successfully rejects a record"",""when"":""The record's status is updated"",""then"":""A new, immutable document is created in the `auditLog` collection detailing the rejection.""}]","[""Mobile Logic: Implement Single Record Approve/Reject (WI-048)""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented for the rejection dialog and its logic"",""Firestore Security Rules for this action are written and tested""]"
"US-041","Supervisor & Admin Management","Supervisor bulk-approves multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records from my subordinates and approve them all with a single action, so that I can efficiently manage my team's attendance and save time.","Reduces administrative overhead for managers by streamlining a repetitive task, leading to faster attendance data processing and increased operational efficiency.","Should Have","5","[""US-037"",""US-039""]","[{""scenario"":""Successful bulk approval of multiple records"",""given"":""A Supervisor is viewing the 'Pending Approvals' list"",""when"":""The Supervisor selects three pending records and clicks 'Approve Selected'"",""then"":""The system atomically updates all three records to 'approved' status, displays a success message, and removes them from the pending list.""},{""scenario"":""UI state for selection controls"",""given"":""A Supervisor is viewing the 'Pending Approvals' list"",""when"":""The Supervisor selects the first record via its checkbox"",""then"":""A set of bulk action buttons, including 'Approve Selected', becomes visible and enabled.""},{""scenario"":""Bulk approval operation fails atomically"",""given"":""A Supervisor has selected multiple records for approval"",""when"":""The backend operation fails for any reason"",""then"":""The entire batch is rolled back, and no records have their status changed.""}]","[""Mobile UI: Implement Bulk Approve/Reject (WI-049)""]","[""All acceptance criteria validated and passing"",""Integration testing with the Firebase Emulator completed successfully"",""Performance requirements for the batch operation are verified"",""Security requirements, especially backend permission checks, are validated""]"
"US-042","Supervisor & Admin Management","Supervisor bulk-rejects multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records and reject them all in a single action with a common reason, so that I can efficiently manage my team's attendance approvals.","Improves managerial efficiency by reducing the time required to handle multiple similar attendance issues and ensures consistent reasoning is applied.","Should Have","5","[""US-037"",""US-040""]","[{""scenario"":""Supervisor successfully rejects multiple records with a reason"",""given"":""a Supervisor is viewing their list of 'pending' records"",""when"":""the Supervisor selects two or more records, clicks 'Reject Selected', enters a reason, and confirms"",""then"":""the system atomically updates all selected records to 'rejected' status with the provided reason, and they are removed from the UI.""},{""scenario"":""Supervisor attempts to reject records without providing a reason"",""given"":""a Supervisor has selected records and opened the rejection modal"",""when"":""the Supervisor attempts to confirm without entering a reason"",""then"":""the system prevents the action and displays a validation error: 'A reason is required'.""},{""scenario"":""One of the selected records is actioned by another process"",""given"":""a Supervisor has selected three records"",""when"":""an Admin approves one record before the Supervisor confirms the bulk rejection"",""then"":""the system processes the rejection only for the remaining two 'pending' records and notifies the Supervisor of a partial success.""}]","[""Mobile UI: Implement Bulk Approve/Reject (WI-049)""]","[""All acceptance criteria validated and passing"",""Integration testing with the Firebase Emulator completed successfully"",""User interface reviewed and approved by the Product Owner/UX designer"",""Security requirements validated, including Firestore rules and Cloud Function authorization""]"
"US-043","Attendance Correction Workflow","Subordinate views the reason for a rejected record","Subordinate","As a Subordinate, I want to see the specific reason my Supervisor provided when they rejected my attendance record, so that I can understand the issue and take appropriate action.","Increases transparency in the approval process, reduces confusion, and empowers employees to correct their own data, leading to improved data quality.","Must Have","1","[""US-040""]","[{""scenario"":""Display of rejection reason for a rejected record"",""given"":""I am a Subordinate and I have an attendance record that has been rejected"",""when"":""I view the details of the rejected record"",""then"":""The record's status is 'Rejected' and a section titled 'Reason for Rejection' is visible, containing the text my Supervisor entered.""},{""scenario"":""Visual distinction of rejected records in the list view"",""given"":""I am a Subordinate viewing my list of attendance records"",""when"":""The list contains a rejected record"",""then"":""The rejected record must be visually distinct, for example, by using a red color indicator or an icon.""}]","[""Update attendance detail screen to display rejection reason (part of WI-054)""]","[""All acceptance criteria validated and passing"",""User interface reviewed and approved by the Product Owner/Designer"",""Accessibility requirements (screen reader, contrast) validated""]"
"US-044","Supervisor & Admin Management","Pending approval is escalated to the next-level supervisor","System","As an Admin, I want pending attendance approvals to automatically escalate to the next supervisor in the hierarchy after a configurable period, so that approval workflows are not blocked by unavailable or unresponsive managers.","Ensures business continuity by preventing bottlenecks in the approval workflow, guaranteeing timely processing of attendance records.","Could Have","5","[""US-071"",""US-037""]","[{""scenario"":""A pending record is escalated to the next available supervisor"",""given"":""a tenant has an escalation period of 3 days, and a record has been 'pending' for 4 days"",""when"":""the daily scheduled escalation Cloud Function runs"",""then"":""the record's `supervisorId` is updated to the direct supervisor's own supervisor, and an audit log is created for the escalation.""},{""scenario"":""The assigned supervisor is at the top of the hierarchy"",""given"":""an overdue record's supervisor has a null `supervisorId`"",""when"":""the scheduled escalation function runs"",""then"":""the record's `supervisorId` remains unchanged, a flag 'escalation_failed_no_supervisor' is added, and a high-severity error is logged.""},{""scenario"":""The next-level supervisor's account is deactivated"",""given"":""Supervisor A reports to Supervisor B, who is deactivated, and B reports to C"",""when"":""a record assigned to A is escalated"",""then"":""the system skips B and successfully escalates the record to Supervisor C.""}]","[""Backend: Implement Approval Escalation Function (WI-050)""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function implemented with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Performance requirements (indexed query) verified""]"
"US-045","Attendance Correction Workflow","Subordinate requests a correction to an attendance record","Subordinate","As a Subordinate, I want to submit a request to correct the check-in or check-out time on my attendance record and provide a mandatory reason for the change, so that I can fix any mistakes I've made and ensure my work hours are accurately reflected.","Ensures data integrity by providing a formal, auditable workflow for correcting attendance errors, enhancing accountability for both employees and supervisors.","Must Have","5","[""US-028"",""US-039""]","[{""scenario"":""Submitting a valid correction request"",""given"":""I am a Subordinate viewing an 'approved' attendance record"",""when"":""I enter a new time, provide a justification of at least 20 characters, and tap 'Submit Request'"",""then"":""The record's status in Firestore is updated to 'correction_pending', and I see a success confirmation.""},{""scenario"":""Submitting a request with no justification"",""given"":""I am on the correction form"",""when"":""I enter a new time but leave justification blank and submit"",""then"":""The submission is blocked, and an error message 'Justification is required and must be at least 20 characters.' is displayed.""},{""scenario"":""Attempting to correct a record that is already pending correction"",""given"":""I am viewing my attendance history"",""when"":""I locate a record with status 'correction_pending'"",""then"":""The 'Request Correction' option for that record is disabled or hidden.""}]","[""Mobile UI: Implement Correction Request Form (WI-051)""]","[""All acceptance criteria validated and passing"",""Integration testing for Firestore writes and security rules completed successfully"",""Security requirements validated via emulator tests""]"
"US-046","Attendance Correction Workflow","Supervisor reviews an attendance correction request","Supervisor","As a Supervisor, I want to view a clear, detailed summary of an attendance correction request, including the original times, the proposed new times, and the subordinate's justification, so that I can make an informed decision.","Enables informed and auditable decisions on attendance corrections, which maintains data integrity and supports accurate record-keeping.","Must Have","3","[""US-045""]","[{""scenario"":""Correction request detail view displays all required information"",""given"":""I am viewing the details of a correction request"",""when"":""the view loads"",""then"":""the following are displayed: Subordinate's name, date, original times, requested new times, and the justification text.""},{""scenario"":""Proposed changes are visually highlighted"",""given"":""I am viewing a request where only the check-in time was changed"",""when"":""the view is displayed"",""then"":""the 'Requested New Check-In Time' field is visually distinct (e.g., bold font) from the original.""},{""scenario"":""Detail view provides clear action buttons"",""given"":""I am viewing the details of a correction request"",""when"":""the view is displayed"",""then"":""there must be 'Approve' and 'Reject' buttons available.""}]","[""Mobile UI: Supervisor's Correction Review Screen (WI-052)""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this feature are written and tested"",""User interface reviewed and approved by the Product Owner/UX designer""]"
"US-047","Attendance Correction Workflow","Supervisor approves an attendance correction request","Supervisor","As a Supervisor, I want to approve a subordinate's attendance correction request, so that I can ensure the accuracy of their attendance records and maintain a complete, auditable history of all changes.","Ensures data integrity for attendance records and provides a clear, auditable trail of all data modifications for compliance and dispute resolution.","Must Have","5","[""US-045"",""US-046""]","[{""scenario"":""Supervisor successfully approves a correction request"",""given"":""A Supervisor is viewing a 'correction_pending' request"",""when"":""The Supervisor clicks the 'Approve' button"",""then"":""The system atomically updates the record's status to 'approved', applies the corrected times, adds a 'manually-corrected' flag, and creates an audit log entry.""},{""scenario"":""Audit Log Integrity: The approval action is logged correctly"",""given"":""A Supervisor approves a correction request"",""when"":""The approval is successfully processed"",""then"":""A new document is created in the 'auditLog' collection with action 'CorrectionApproved', actor ID, target ID, and details of the change.""}]","[""Backend: Implement `approveCorrection` Cloud Function (WI-053)""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function with >80% coverage"",""Firestore Security Rules written, tested, and verified"",""Performance requirements verified""]"
"US-048","Attendance Correction Workflow","Supervisor rejects an attendance correction request","Supervisor","As a Supervisor, I want to reject an invalid attendance correction request from my subordinate and provide a reason, so that I can maintain the accuracy of attendance records and ensure invalid changes are not applied.","Ensures integrity of attendance data by preventing incorrect modifications and provides a clear audit trail for managerial decisions.","Must Have","5","[""US-045"",""US-046""]","[{""scenario"":""Supervisor successfully rejects a correction request with a reason"",""given"":""I am a Supervisor viewing a 'correction_pending' record"",""when"":""I tap 'Reject', enter a reason, and confirm"",""then"":""The record's status reverts to its previous state (e.g., 'approved'), and an audit log is created detailing the rejection and reason.""},{""scenario"":""Supervisor attempts to reject a request without providing a reason"",""given"":""I am viewing the rejection confirmation dialog"",""when"":""I attempt to confirm without entering text in the reason field"",""then"":""The action is prevented and an error message is displayed indicating a reason is required.""}]","[""Backend: Implement Correction Rejection Logic (WI-054)""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function logic achieve >80% coverage"",""Security rules have been written and tested to protect the action""]"
"US-049","Attendance Correction Workflow","Subordinate is notified of a correction request's outcome","Subordinate","As a Subordinate, I want to receive a push notification on my mobile device when my attendance correction request is either approved or rejected, so that I am immediately informed of the outcome without having to manually check the app.","Improves user experience by providing timely, proactive feedback and closes the communication loop for the correction workflow.","Should Have","5","[""US-047"",""US-048""]","[{""scenario"":""Notification for an approved correction request"",""given"":""a Subordinate has submitted a correction request"",""when"":""their Supervisor approves the request"",""then"":""the Subordinate's device receives a push notification with the body 'Your attendance correction for [Date] has been approved.'""},{""scenario"":""Notification for a rejected correction request"",""given"":""a Subordinate has submitted a correction request"",""when"":""their Supervisor rejects the request"",""then"":""the Subordinate's device receives a push notification with the body 'Your attendance correction for [Date] has been rejected.'""},{""scenario"":""Tapping notification deep-links into the app"",""given"":""the Subordinate has received a notification for a correction outcome"",""when"":""the Subordinate taps on the notification"",""then"":""the application opens and navigates directly to the details screen for the specific attendance record.""}]","[""Backend: Implement Correction Outcome Notifications (WI-055)""]","[""All acceptance criteria validated and passing on both iOS and Android"",""E2E tests confirming the entire flow from supervisor action to subordinate notification are passing"",""Performance of the Cloud Function is verified to be within acceptable limits""]"
"US-050","Supervisor & Admin Management","Admin directly edits an attendance record with mandatory, auditable justification","Admin","As an Admin, I want to directly edit any employee's attendance record and provide a mandatory justification for the change, so that I can correct data inaccuracies efficiently and maintain a fully auditable trail of all high-privilege modifications.","Ensures data accuracy for reporting and provides a mechanism for authorized personnel to correct errors, while creating a transparent and auditable trail for compliance.","Should Have","5","[""US-059""]","[{""scenario"":""Admin successfully edits an attendance record"",""given"":""an Admin is viewing an attendance report"",""when"":""the Admin clicks 'Edit', modifies the check-out time, provides a justification (20+ characters), and saves"",""then"":""the system updates the record with the new time, adds a 'manually-corrected' flag, and creates an immutable audit log entry with the justification, old value, and new value.""},{""scenario"":""Admin attempts to save an edit without providing a justification"",""given"":""an Admin has opened the edit modal and made a change"",""when"":""the Admin attempts to save with the justification field empty"",""then"":""the save is prevented and an error message is displayed indicating justification is mandatory.""},{""scenario"":""Audit Log Immutability"",""given"":""an Admin has performed a direct edit, creating an audit log entry"",""when"":""any user, including an Admin, attempts to modify or delete that audit log entry"",""then"":""the operation is denied by Firestore Security Rules.""}]","[""Create `editAttendanceRecord` Callable Function with audit logging"",""Build 'Edit Attendance' modal in the Admin web dashboard""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements validated, including Firestore rules and function authentication""]"
"US-051","Admin Reporting & Dashboard","Admin views the audit log of data changes","Admin","As an Admin, I want to view a filterable and immutable audit log of all critical system actions, so that I can ensure compliance, maintain accountability for data changes, and troubleshoot issues effectively.","Provides a trustworthy, unalterable record for internal/external audits, enhances accountability, and aids in troubleshooting administrative actions.","Must Have","8","[""US-050"",""US-047""]","[{""scenario"":""Admin accesses the audit log report and views records"",""given"":""the Admin is on the web dashboard"",""when"":""the Admin navigates to the 'Audit Log Report' section"",""then"":""the system displays a paginated list of audit log entries in reverse chronological order.""},{""scenario"":""Admin combines multiple filters"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin applies a date range filter AND a user (actor) filter"",""then"":""the list of entries updates to show only records that satisfy both criteria.""},{""scenario"":""Audit log is immutable from the UI"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin interacts with the list of entries"",""then"":""there are no UI elements (e.g., 'Edit', 'Delete' buttons) that allow modification or deletion.""}]","[""Web UI: Build Audit Log Report (WI-063)""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for immutability and access control are implemented and tested"",""Required Firestore composite indexes are defined in `firestore.indexes.json` and deployed"",""Performance requirements for loading and filtering are verified""]"