"gate_name","gate_type","trigger_event","success_criteria","failure_action","responsible_team","automation_level","tools_used","measurement_frequency","escalation_procedure","historical_pass_rate","average_resolution_time","business_impact"
"Pull Request Gate","Static Analysis & Unit Test","Code commit to a feature branch","Linter passes; All new/modified code has >80% unit test coverage; All unit tests pass.","Block pull request merge.","Development Team","Fully Automated","GitHub Actions; Jest; `flutter_test`","Every commit","PR author must fix issues before merge.","90","0.5","Prevents simple bugs and code style issues from entering the main branch."
"Staging Deployment Gate","Integration & E2E","Merge to `develop` branch","All integration tests pass; All critical-path E2E tests pass.","Roll back deployment; Create high-priority bug ticket.","QA & DevOps Teams","Fully Automated","GitHub Actions; Firebase Emulator Suite; `integration_test`","Every merge to `develop`","Alert sent to on-call engineer and tech lead.","85","4","Ensures the staging environment is always stable for manual testing and demos."
"Production Release Gate","Manual & Final Sign-off","Manual trigger for release from `main` branch","Staging E2E tests pass with 100% rate; Manual QA exploratory testing complete; UAT signed off by Product Owner; No open critical or high-priority bugs for the release.","Abort release; Schedule emergency planning meeting.","Release Manager / Product Owner","Partially Automated","Jira; GitHub Actions","Per release","Go/No-Go decision by release committee.","99","24","Final checkpoint to prevent defects from reaching end-users."