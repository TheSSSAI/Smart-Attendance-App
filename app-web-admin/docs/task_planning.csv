"task_id","title","description","type","status","priority","assignee","reporter","due_date","estimated_hours","story_points","labels","sprint","sprint_goal","epic","epic_id","project","parent_id","dependencies","skills_required","complexity","risk_level","acceptance_criteria","definition_of_done","created_at","updated_at","sprint_start_date","sprint_end_date","capacity_allocation","collaboration_required","external_dependencies","testing_requirements","deployment_notes","business_value"
"TASK-001-BE","Backend: Implement `registerOrganization` Cloud Function","Create a TypeScript callable Cloud Function to handle new tenant registration atomically: check for name uniqueness, create Auth user, create Firestore tenant/user docs, and set custom claims. Implement rollback logic.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-10-25","16","3","backend,firebase-functions,typescript,auth","Sprint 1","Establish foundational user lifecycle: Admin registration, secure login, and role-based routing.","Tenant & User Lifecycle Management","EPIC-002","Attendance Tracking System","US-001","","TypeScript,Firebase Functions,Firestore Transactions","High","High","Function executes atomically; Handles duplicate names; Sets custom claims correctly.","Code reviewed; Unit tests >80%; Integration tests pass in emulator.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-10-21","2024-11-01","100%","Frontend team for API contract","","Unit, Integration testing required","Deploy to 'development' Firebase project.","Enables new customer self-onboarding."
"TASK-002-FE","Frontend: Develop Public Registration Page (Web)","Create the Flutter for Web page for new organization registration. Implement form, client-side validation, and call the `registerOrganization` Cloud Function.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-10-28","12","2","frontend,flutter-web,dart,auth","Sprint 1","Establish foundational user lifecycle: Admin registration, secure login, and role-based routing.","Tenant & User Lifecycle Management","EPIC-002","Attendance Tracking System","US-001","TASK-001-BE","Flutter,Dart,Riverpod","Medium","Low","Form is responsive; All fields validated; Calls backend function and handles states.","Code reviewed; Widget tests >80%; E2E test with emulator passes.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-10-21","2024-11-01","100%","Backend team for API integration","","Widget, Integration, E2E testing required","Deploy to 'development' Firebase hosting.","Provides the user interface for new customer acquisition."
"TASK-017-FE","Frontend: Implement Login Screen UI (Mobile & Web)","Create the main login screen in Flutter. Implement the form for email/password, client-side validation, state management for loading/error states, and a 'Forgot Password?' link.","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-10-29","8","1","frontend,flutter,dart,auth","Sprint 1","Establish foundational user lifecycle: Admin registration, secure login, and role-based routing.","Tenant & User Lifecycle Management","EPIC-002","Attendance Tracking System","US-017","","Flutter,Dart,Riverpod","Low","Low","UI is responsive; Form validates inputs; Loading indicator shown on submit.","Code reviewed; Widget tests pass.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-10-21","2024-11-01","100%","Backend team for error code handling","","Widget testing","Part of the main app bundle.","Provides the entry point for all existing users."
"TASK-027-FE","Frontend: Create Reusable Password Policy Validator Widget","Develop a reusable Flutter widget that displays password policy rules and provides real-time visual feedback as the user types, indicating which rules are met.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-10-25","12","2","frontend,flutter,dart,auth,reusable-component","Sprint 1","Establish foundational user lifecycle: Admin registration, secure login, and role-based routing.","Tenant & User Lifecycle Management","EPIC-002","Attendance Tracking System","US-027","","Flutter,Dart","Medium","Low","Widget updates in real-time; Correctly reflects all policy rules; Is configurable.","Code reviewed; Widget tests cover all validation rules.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-10-21","2024-11-01","100%","","","Widget testing","Shared component for registration and password reset flows.","Improves user experience and enforces security during account creation."
"TASK-021-FE","Frontend: Implement Post-Login Role-Based Routing","Create a routing gate that listens to the auth state, inspects the user's role from custom claims, and redirects them to the appropriate dashboard (Admin, Supervisor, Subordinate).","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-11-01","8","2","frontend,flutter,dart,routing,auth","Sprint 1","Establish foundational user lifecycle: Admin registration, secure login, and role-based routing.","Tenant & User Lifecycle Management","EPIC-002","Attendance Tracking System","US-021","TASK-001-BE","Flutter,Dart,Riverpod","Medium","Medium","Admins routed to web dash; Supervisors/Subordinates to mobile dash; Non-Admins blocked from web.","Code reviewed; Integration tests pass for each role.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-10-21","2024-11-01","100%","","","Integration testing required","Core application routing logic.","Directs users to the correct interface based on their role, enabling the RBAC model."
"TASK-004-BE","Backend: Implement `inviteUser` Cloud Function","Create a callable Cloud Function for Admins to invite users. Must validate Admin role, check email uniqueness within tenant, create a user doc with 'invited' status, generate a 24-hour token, and trigger a SendGrid email.","Task","Sprint Backlog","Critical","backend.dev1@company.com","product.owner@company.com","2024-11-08","16","3","backend,firebase-functions,typescript,sendgrid","Sprint 2","Build the complete user invitation and registration flow, and establish team structure management.","Tenant & User Lifecycle Management","EPIC-002","Attendance Tracking System","US-004","TASK-S2-SG","TypeScript,Firebase Functions,SendGrid API","Medium","Medium","Rejects non-Admins; Creates 'invited' user doc; Triggers email with correct link.","Code reviewed; Unit tests >80%; Integration test passes.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-11-04","2024-11-15","100%","DevOps for SendGrid integration","SendGrid API","Unit, Integration testing","Requires SendGrid API key in Secret Manager.","Core logic for onboarding new employees to a tenant."
"TASK-006-FE","Frontend: Implement Registration Completion Page (Web)","Create the Flutter for Web page for invited users. It must parse the token from the URL, provide fields for setting/confirming a password using the policy validator widget, and accept Terms of Service.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-11-12","16","2","frontend,flutter-web,dart,auth","Sprint 2","Build the complete user invitation and registration flow, and establish team structure management.","Tenant & User Lifecycle Management","EPIC-002","Attendance Tracking System","US-006","TASK-027-FE,TASK-S2-BE-COMPLETE","Flutter,Dart,Riverpod","Medium","Low","Parses token; Validates password against policy; Requires ToS acceptance.","Code reviewed; Widget tests pass; E2E test of the full flow passes.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-11-04","2024-11-15","100%","Backend team for integration","","Widget, E2E testing","Requires Firebase Hosting rewrite rules for deep linking.","Final step in converting an invited user to an active user."
"TASK-028-FE-MOBILE","Mobile Frontend: Implement Check-In/Out UI and Logic","On the Subordinate's mobile dashboard, implement the UI for Check-In and Check-Out, including button state management, location permission requests, and GPS data capture.","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-11-22","24","5","frontend,flutter,mobile,gps,attendance","Sprint 3","Implement the core Subordinate workflow for attendance marking, including online/offline support and accessibility.","Core Attendance Workflow","EPIC-003","Attendance Tracking System","US-028","US-076","Flutter,Dart,Location Services","High","Medium","Captures timestamp and GPS on check-in; Creates Firestore record; Handles location permission denials gracefully; Button states update correctly.","Code reviewed; E2E tests for permission flows and check-in pass.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-11-18","2024-11-29","100%","Backend for security rules","Device GPS hardware","E2E, Manual testing on physical devices","Requires native project configuration for location services.","Core value proposition of the application for end-users."
"TASK-033-FE-MOBILE","Mobile Frontend: Implement Offline Attendance Marking","Enable Firestore offline persistence. Update the check-in/out logic to function seamlessly while the device is offline, storing records in the local cache and adding an 'isOfflineEntry' flag.","Task","Sprint Backlog","Critical","frontend.dev1@company.com","product.owner@company.com","2024-12-06","20","5","frontend,flutter,mobile,offline,firestore","Sprint 4","Make the core mobile experience robust by implementing offline support and user feedback for sync issues.","Core Attendance Workflow","EPIC-003","Attendance Tracking System","US-033","TASK-028-FE-MOBILE","Flutter,Dart,Firestore Offline","Medium","High","User can check-in/out while in airplane mode; Data is stored locally; Data syncs automatically on reconnect.","Code reviewed; E2E tests for offline scenarios pass.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-12-02","2024-12-13","100%","","","E2E, Manual testing on physical devices","Critical for field user reliability.","Ensures no data is lost due to intermittent network connectivity."
"TASK-037-FE-MOBILE","Mobile Frontend: Implement Supervisor Dashboard with Pending Approvals","Create the main dashboard for the Supervisor role. It must display a real-time list of all 'pending' attendance records from their direct subordinates.","Task","Sprint Backlog","Critical","frontend.dev2@company.com","product.owner@company.com","2024-12-20","20","5","frontend,flutter,mobile,supervisor,workflow","Sprint 5","Launch the MVP for the Supervisor role, enabling them to manage their team's attendance records.","Core Attendance Workflow","EPIC-003","Attendance Tracking System","US-037","TASK-S5-BE-RULES","Flutter,Dart,Firestore Queries","Medium","Medium","Displays only pending records; Displays only from direct reports; List updates in real-time.","Code reviewed; Widget tests pass; Integration test with emulator passes.","2024-10-15T09:00:00Z","2024-10-15T09:00:00Z","2024-12-16","2024-12-27","100%","Backend for query optimization and security rules","","Widget, Integration testing","Requires composite index in Firestore.","Enables the primary workflow for the Supervisor persona."