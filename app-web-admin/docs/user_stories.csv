"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"US-001","Tenant & User Lifecycle Management","Admin registers a new organization tenant","Initial Admin User","As a new administrator, I want to register my organization by providing my details, a unique organization name, and selecting a data residency region, so that a new, isolated tenant is created for my company and I can begin configuring the system.","Enables new organizations to onboard themselves, creating the foundational tenant structure. This is the primary entry point for customer acquisition and is critical for the multi-tenant architecture.","Must Have","5","[]","[{""scenario"":""Successful registration with unique organization name"",""given"":""A potential administrator is on the registration page and has filled all required fields with valid data"",""when"":""The user clicks the 'Register' button"",""then"":""A new tenant document is created in Firestore, a new user is created in Firebase Authentication with the 'Admin' role, custom claims for tenantId and role are set on the user's auth token, and the user is automatically logged in and redirected to the Admin dashboard.""},{""scenario"":""Registration attempt with a duplicate organization name"",""given"":""An organization with the name 'Global Tech Inc.' already exists in the system"",""when"":""A new user enters 'Global Tech Inc.' as the organization name and submits the registration form"",""then"":""The system prevents form submission and displays an inline error message: 'Organization name is already taken. Please choose another.'""},{""scenario"":""Registration process creates all required data atomically"",""given"":""A user submits a valid registration form"",""when"":""An unexpected error occurs during the creation of the Firestore user document after the Firebase Auth user has been created"",""then"":""The entire transaction is rolled back, the Firebase Auth user is deleted, and no tenant or user documents are left in the database. The user is shown a generic error message.""}]","[""WI-002-01-01: Develop `registerOrganization` Callable Cloud Function"",""WI-002-02-03: Develop Public Registration Page for New Organizations (Web)""]","[""All acceptance criteria validated and passing"",""Code reviewed and approved by team"",""Unit tests for form validation and Cloud Function logic implemented with >80% coverage"",""Integration testing of the full registration flow completed successfully in the emulator suite"",""UI is responsive and reviewed for accessibility compliance"",""Security requirements, especially regarding custom claims and data handling, are validated"",""Story deployed and verified in the staging environment""]"
"US-002","Tenant & User Lifecycle Management","Admin is notified of a non-unique organization name during registration","Initial Admin User","As a Prospective Admin registering my organization for the first time, I want to be immediately notified if the organization name I enter is already in use, so that I can choose a unique name and complete the registration process without errors or confusion.","Ensures data integrity by enforcing unique tenant names, prevents user frustration during onboarding, and reduces potential support requests related to registration failures.","Must Have","3","[""US-001""]","[{""scenario"":""Duplicate organization name provided (case-insensitive)"",""given"":""an organization with the name 'Vandelay Industries' already exists in the system"",""when"":""a user enters 'vandelay industries' in the 'Organization Name' field and the field loses focus"",""then"":""an inline error message 'This organization name is already taken. Please choose another.' is displayed and the registration submission button is disabled.""},{""scenario"":""Validation in progress feedback"",""given"":""a user is on the new organization registration page"",""when"":""the user enters text into the 'Organization Name' field and the field loses focus, triggering the asynchronous validation check"",""then"":""a loading indicator is displayed next to the field until the validation check completes.""}]","[""Implement real-time uniqueness validation on the organization registration page (WI-002-02-03)"",""Create a dedicated, rate-limited Cloud Function to check for organization name uniqueness""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for both frontend and backend logic with >80% coverage"",""Performance requirements for the validation endpoint are verified"",""Security requirements (rate limiting, App Check) are implemented and validated"",""Story deployed and verified in the staging environment""]"
"US-003","Tenant & User Lifecycle Management","Admin selects a data residency region during tenant creation","Initial Admin User","As an initial Admin registering my organization, I want to select a primary data residency region from a list of supported locations during the sign-up process so that I can ensure my organization's data is stored in a specific geographic area to comply with data sovereignty regulations like GDPR.","Enables the product to meet data sovereignty and regulatory compliance requirements (e.g., GDPR), expanding the addressable market to enterprise customers in regulated regions and building trust.","Should Have","8","[""US-001""]","[{""scenario"":""Successful selection of a data residency region during registration"",""given"":""A user is on the new organization registration page"",""when"":""The user fills in all required fields and selects a valid data residency region (e.g., 'Europe (Frankfurt)') from the dropdown list"",""then"":""All subsequent data created for this tenant is physically stored in the infrastructure provisioned for the selected region.""},{""scenario"":""Attempting to register without selecting a region"",""given"":""A user is on the new organization registration page"",""when"":""The user attempts to submit the registration form without selecting a data residency region"",""then"":""The form submission is prevented and a validation error message, such as 'Please select a data residency region,' is displayed.""},{""scenario"":""Region selection is non-modifiable after tenant creation"",""given"":""An Admin has successfully created a tenant with a specific data residency region"",""when"":""The Admin navigates to the organization settings page in the web dashboard"",""then"":""The selected data residency region is displayed as a read-only value and there is no user interface option to change it.""}]","[""Architect and implement a multi-region infrastructure on Firebase/GCP"",""Update `registerOrganization` Cloud Function (WI-002-01-01) to provision resources in the selected region"",""Add region selection dropdown to the public registration page (WI-002-02-03)""]","[""All acceptance criteria validated and passing"",""Architectural decisions and implementation details are documented"",""Integration testing confirms data is written to the correct regional database"",""Backend validation rejects invalid region values"",""Story deployed and manually verified by QA in the staging environment for at least two different regions""]"
"US-004","Tenant & User Lifecycle Management","Admin invites a new user to the organization via email","Admin","As an Admin, I want to invite new employees to the application by entering their email address and assigning them a role, so that they can receive a secure registration link, create their account, and become part of my organization's tenant.","Enables the onboarding of new employees into the system, facilitating organizational growth and the core attendance tracking function. Ensures that only authorized individuals can join a specific tenant, maintaining data security and isolation.","Must Have","5","[""US-001""]","[{""scenario"":""Successful invitation of a new user"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Manage Users' page"",""when"":""I enter a valid and unique email address 'new.user@example.com', select the role 'Subordinate', and click 'Send Invitation'"",""then"":""A new user document is created in Firestore with status 'invited', I see a success notification, and a transactional email is sent to 'new.user@example.com' with a unique, 24-hour time-limited registration link.""},{""scenario"":""Attempting to invite a user who already exists in the tenant"",""given"":""A user with the email 'existing.user@example.com' already exists in my tenant"",""when"":""I attempt to invite a new user with the email 'existing.user@example.com'"",""then"":""The form submission is blocked and I see an inline error message: 'A user with this email already exists in your organization.'""}]","[""WI-002-01-03: Develop `inviteUser` Callable Cloud Function"",""Implement 'Invite User' UI in the User Management CRUD Interface (WI-004-01-02)""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for form validation and Cloud Function logic with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements for role-based access and token generation are validated"",""Story deployed and verified in the staging environment""]"
"US-005","Tenant & User Lifecycle Management","Invited user receives an email with a time-limited registration link","Invited User","As an invited user, I want to receive an email containing a unique, time-limited registration link after an Admin invites me, so that I can securely and easily begin the process of creating my account and joining my organization's workspace.","Provides a secure and automated mechanism for new user activation, which is critical for tenant growth. Ensures only the intended recipient can register, reducing security risks and support overhead.","Must Have","5","[""US-004""]","[{""scenario"":""Successful email delivery with a valid link"",""given"":""an Admin has successfully submitted an invitation for a new user with the email 'new.user@example.com'"",""when"":""the backend system processes the invitation request"",""then"":""an email is sent to 'new.user@example.com' containing a unique registration link and a message that the link will expire in 24 hours.""},{""scenario"":""Email hard bounces"",""given"":""an invitation email is sent to a non-existent email address"",""when"":""the SendGrid service reports a hard bounce event"",""then"":""a webhook or monitoring process updates the invited user's profile in Firestore with a status indicating delivery failure, which is visible to the Admin.""}]","[""Integrate SendGrid API into the `inviteUser` Cloud Function (WI-002-01-03)"",""WI-005-02-02: Configure SendGrid for Transactional Emails"",""Create responsive HTML email template for invitations"",""Optional: Implement SendGrid webhook to handle bounces""]","[""All acceptance criteria validated and passing"",""Integration with SendGrid is complete and tested"",""HTML email template is created, approved, and tested for responsiveness"",""Error handling and logging for email service failures are implemented and verified"",""Story deployed and verified in the staging environment by sending a test invitation""]"
"US-006","Tenant & User Lifecycle Management","Invited user completes registration by setting a password","Invited User","As an Invited User, I want to securely complete my account registration by clicking a unique link from my invitation email and setting a strong password, so that I can activate my account, log in for the first time, and start using the attendance application.","Enables the final, critical step of user onboarding, converting an invited user into an active user. A seamless registration process improves user adoption and reduces administrative support load.","Must Have","5","[""US-004"",""US-005""]","[{""scenario"":""Successful account activation with a valid link and strong password"",""given"":""an invited user has a valid, non-expired registration link"",""when"":""the user enters a password that meets the organization's policy, confirms it, accepts the Terms of Service, and clicks 'Activate Account'"",""then"":""the system updates the user's status from 'invited' to 'active', the user is automatically logged in, and they are redirected to their role-specific dashboard.""},{""scenario"":""Attempting to use an expired registration link"",""given"":""an invited user has a registration link that is older than 24 hours"",""when"":""the user clicks the link"",""then"":""the user is redirected to a page that clearly states 'This invitation link has expired. Please contact your administrator to request a new invitation.'""}]","[""WI-002-01-04: Develop `completeRegistration` Cloud Function"",""WI-002-02-04: Develop Registration Completion Page for Invited Users (Web)""]","[""All acceptance criteria validated and passing"",""E2E test for the full registration flow is passing"",""Security requirements (token invalidation, HTTPS) validated"",""UI reviewed and approved for usability and accessibility"",""Story deployed and verified in the staging environment""]"
"US-007","Tenant & User Lifecycle Management","Invited user is notified when a registration link has expired","Invited User","As an invited user who has clicked on an old invitation link, I want to be shown a clear, dedicated page explaining that the link has expired, so that I understand why I cannot register and know that I need to contact my administrator for a new invitation.","Improves the user onboarding experience by providing clear feedback for a common error scenario. This reduces user frustration, minimizes support requests, and prevents potential users from abandoning the registration process.","Must Have","3","[""US-006""]","[{""scenario"":""User clicks on an invitation link that has expired"",""given"":""An Admin has sent a user an invitation link which has a 24-hour validity period"",""when"":""The user clicks the invitation link more than 24 hours after it was generated"",""then"":""The system must display a dedicated 'Invitation Link Expired' page with clear, helpful information and next steps.""},{""scenario"":""An already active user clicks their old invitation link"",""given"":""A user has already completed their registration and their account status is 'active'"",""when"":""The user clicks on their original (now used) invitation link"",""then"":""The system should display a page informing them that their account is already active and provide a link to the main login page.""}]","[""Update `completeRegistration` Cloud Function (WI-002-01-04) to handle expired/used tokens"",""Create dedicated informational pages in Flutter for Web (WI-002-02-04)"",""Configure Firebase Hosting rewrite rules to direct registration links to the validation function""]","[""All acceptance criteria validated and passing"",""UI for informational pages reviewed and approved"",""Integration testing between Hosting, Cloud Function, and Firestore is completed successfully"",""Story deployed and verified in the staging environment""]"
"US-008","Tenant & User Lifecycle Management","Admin deactivates a user's account","Admin","As an Admin, I want to deactivate a user's account, so that I can securely revoke access for departing employees.","Enhances organizational security by preventing unauthorized access from former employees.","Must Have","5","[""US-001"",""US-004"",""US-017"",""US-051""]","[{""scenario"":""Admin successfully deactivates a user who is not a supervisor"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I select a user with the 'Subordinate' role, click 'Deactivate', and confirm the action"",""then"":""The system updates the user's status to 'deactivated', a success message is displayed, and the user's status is visually updated in the user list.""},{""scenario"":""Deactivated user is prevented from logging in"",""given"":""A user's account has been successfully deactivated"",""when"":""That user attempts to log in with their correct credentials"",""then"":""The system denies access and displays a clear message, such as 'Your account has been deactivated. Please contact your administrator.'""},{""scenario"":""Admin cannot deactivate their own account"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I locate my own user account in the list"",""then"":""The 'Deactivate' action or button is disabled or hidden for my own account.""},{""scenario"":""Deactivated user's active session is invalidated"",""given"":""A user is currently logged in and has an active session"",""when"":""An Admin deactivates that user's account"",""then"":""The user's authentication token is revoked, and they are automatically logged out or their next API call fails with an authentication error.""}]","[""Implement 'Deactivate' UI/logic in User Management Interface (WI-004-01-02)"",""Develop a Cloud Function to handle deactivation, including checking for supervisor status (US-009 dependency), updating Firestore, creating an audit log, and revoking refresh tokens""]","[""All acceptance criteria validated and passing"",""Integration testing for the full deactivation flow completed successfully"",""Security requirement for session invalidation is manually verified and confirmed working"",""Audit log entry is correctly generated and formatted"",""Story deployed and verified in staging environment""]"
"US-009","Tenant & User Lifecycle Management","Admin is required to reassign subordinates before deactivating a Supervisor","Admin","As an Admin, I want to be prevented from deactivating a Supervisor who still has active subordinates and be prompted to reassign them first, so that I can ensure every employee remains managed and critical workflows like attendance approvals are not broken.","Ensures organizational hierarchy integrity by preventing 'orphaned' employees. This maintains the continuity of approval workflows and avoids administrative data correction tasks later.","Must Have","5","[""US-008""]","[{""scenario"":""Attempt to deactivate a Supervisor with active subordinates"",""given"":""An Admin attempts to deactivate a user who has the 'Supervisor' role and has active subordinates assigned to them"",""when"":""The deactivation action is initiated"",""then"":""The action is blocked, and a modal appears explaining that subordinates must be reassigned, listing the affected subordinates, and providing a 'Reassign Subordinates' action button.""},{""scenario"":""Successful deactivation of a Supervisor after reassigning all subordinates"",""given"":""An Admin was blocked from deactivating a Supervisor and is now in the reassignment interface"",""when"":""The Admin reassigns all of the Supervisor's active subordinates to a new Supervisor"",""then"":""The deactivation of the original Supervisor proceeds successfully.""},{""scenario"":""Successful deactivation of a Supervisor with no active subordinates"",""given"":""An Admin attempts to deactivate a Supervisor with zero active subordinates"",""when"":""The deactivation action is initiated"",""then"":""The deactivation proceeds successfully without showing the reassignment modal.""}]","[""Enhance deactivation Cloud Function to check for active subordinates before processing (related to WI-004-01-02)"",""Implement reassignment modal and workflow UI in the Admin Dashboard""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function and frontend logic with >80% coverage"",""Integration testing of the full Admin workflow completed successfully against the Emulator Suite"",""UI for the reassignment modal reviewed and approved"",""Story deployed and verified in staging environment""]"
"US-010","Tenant & User Lifecycle Management","Deactivated user is prevented from logging in","Deactivated User","As a deactivated user, I want to be prevented from logging into the system, even with correct credentials, so that my former employer's data is secure after my access has been revoked.","Enhances security by ensuring that offboarded users cannot access tenant data, thereby protecting company information and enforcing access control policies.","Must Have","2","[""US-008"",""US-017""]","[{""scenario"":""Deactivated user attempts login with correct credentials"",""given"":""a user exists with a status of 'deactivated'"",""when"":""the user attempts to log in using their correct email and password"",""then"":""the system rejects the authentication attempt and displays a message: 'Your account has been deactivated. Please contact your administrator.'""},{""scenario"":""Deactivated user attempts login with incorrect credentials"",""given"":""a user exists with a status of 'deactivated'"",""when"":""the user attempts to log in with an incorrect password"",""then"":""the system rejects the authentication and displays the generic 'Invalid email or password' message to prevent account status enumeration.""}]","[""Implement a Firebase Auth Blocking Function (`beforeSignIn`) to check the user's status in Firestore before issuing a token"",""Update Firestore Security Rules to deny data access to any authenticated user whose status is not 'active'""]","[""All acceptance criteria validated and passing"",""Integration testing confirms that login is blocked server-side for inactive users"",""Security review confirms no information leakage and that Firestore rules are updated"",""Story deployed and verified in the staging environment""]"
"US-011","Tenant & User Lifecycle Management","Admin creates a new team and assigns a Supervisor","Admin","As an Admin, I want to create a new team by providing a name and selecting an existing user as its Supervisor, so that I can accurately model my organization's structure, enabling proper approval workflows and team-based event assignments.","Enables the foundational hierarchical structure of the organization within the application. This is a prerequisite for managing user groups, assigning work, and implementing role-based approval workflows.","Must Have","5","[""US-001"",""US-004""]","[{""scenario"":""Successful creation of a new team"",""given"":""I am an Admin on the 'Team Management' page"",""when"":""I enter a unique team name, select a valid user with the 'Supervisor' role, and click 'Save'"",""then"":""a new team document is created in Firestore and a success notification is displayed.""},{""scenario"":""Attempt to create a team with a duplicate name"",""given"":""a team named 'Field Operations' already exists"",""when"":""I enter 'Field Operations' as the team name and attempt to save"",""then"":""the creation is prevented and an error message 'Team name must be unique' is displayed.""},{""scenario"":""Supervisor selection list is correctly populated"",""given"":""I am an Admin on the 'Create Team' form"",""when"":""I click on the 'Select Supervisor' dropdown"",""then"":""the list only contains active users from my tenant who have the 'Supervisor' or 'Admin' role.""}]","[""Implement the 'Create Team' UI within the Team Management Interface (WI-004-01-03)"",""Develop backend logic/security rules to handle team creation, ensuring name uniqueness and role enforcement""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules are written and tested to cover all access scenarios"",""Integration testing completed successfully against the Firebase Emulator Suite"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-012","Tenant & User Lifecycle Management","Admin edits an existing team's name or assigned Supervisor","Admin","As an Admin, I want to edit an existing team's name and reassign its supervisor so that the application accurately reflects my organization's current structure and ensures approval workflows are routed correctly.","Maintains data accuracy of the organizational hierarchy, ensuring correct routing of approval workflows and reliability of reports. Allows the system to adapt to organizational changes without data loss.","Must Have","5","[""US-011"",""US-051""]","[{""scenario"":""Admin successfully edits a team's name"",""given"":""I am an Admin editing a team"",""when"":""I change its name to a new, unique value and click 'Save'"",""then"":""the system updates the team's name, a success notification is displayed, and an audit log entry is created.""},{""scenario"":""Admin successfully reassigns a team's supervisor"",""given"":""I am an Admin editing a team"",""when"":""I select a different, eligible user as the new supervisor and click 'Save'"",""then"":""the system updates the team's supervisor, a success notification is displayed, and an audit log entry is created.""},{""scenario"":""Admin attempts to use a duplicate team name"",""given"":""another team named 'Field Ops' already exists"",""when"":""I change the current team's name to 'Field Ops' and attempt to save"",""then"":""the save is prevented and a validation error message 'Team name must be unique' is displayed.""}]","[""Implement 'Edit Team' UI in Team Management Interface (WI-004-01-03)"",""Develop a callable Cloud Function to handle secure validation (unique name check) and atomic writes (update team + write to audit log)""]","[""All acceptance criteria validated and passing"",""Unit tests for Cloud Function and UI logic achieve >80% coverage"",""Integration tests are passing in the emulator environment"",""The corresponding audit log entry is created correctly upon successful update"",""Story deployed and verified in the staging environment""]"
"US-013","Tenant & User Lifecycle Management","Admin deletes a team","Admin","As an Admin, I want to permanently delete a team from my organization, so that I can maintain an accurate and clean organizational structure by removing teams that are obsolete or no longer exist.","Improves data hygiene and administrative efficiency by allowing the removal of outdated organizational structures, ensuring reports and user assignments reflect the current state of the company.","Should Have","5","[""US-011"",""US-014"",""US-055"",""US-051""]","[{""scenario"":""Admin successfully deletes a team"",""given"":""I am an Admin on the team management page"",""when"":""I click the 'Delete' action for a team and confirm in the dialog"",""then"":""The team document is deleted, a success notification is displayed, and the team is removed from the UI list.""},{""scenario"":""Deletion confirmation dialog prevents accidental deletion"",""given"":""I am an Admin on the team management page"",""when"":""I click the 'Delete' action for a team"",""then"":""A confirmation modal appears with the text 'Are you sure you want to delete the team \""[Team Name]\""? This action cannot be undone.'""},{""scenario"":""Team deletion is reflected in associated user profiles"",""given"":""A team with several members is being deleted"",""when"":""The Admin confirms the deletion of the team"",""then"":""The `teamId` of the deleted team is removed from the `teamIds` array for all users who were members of that team.""}]","[""Implement 'Delete Team' UI in Team Management Interface (WI-004-01-03)"",""Develop a Cloud Function to orchestrate the multi-collection update logic (delete team, update users, update events, create audit log) atomically""]","[""All acceptance criteria validated and passing"",""Cloud Function code reviewed and approved"",""Integration tests covering the full data modification flow are passing in the Emulator Suite"",""Security rules and function authentication logic are tested and verified"",""Story deployed and verified in the staging environment""]"
"US-014","Tenant & User Lifecycle Management","Admin adds or removes members from any team","Admin","As an Admin, I want to add and remove users from any team within my organization, so that I can maintain accurate team rosters that reflect our current organizational structure.","Ensures data integrity of the organizational structure, which is foundational for correct reporting, supervisor approval workflows, and event assignments.","Must Have","5","[""US-004"",""US-011""]","[{""scenario"":""Admin successfully adds a user to a team"",""given"":""I am an Admin on the 'Manage Members' page for a team"",""when"":""I select a valid user who is not currently a member and confirm"",""then"":""A success notification is displayed, the user's name appears in the member list, and backend data for both the team and user is updated.""},{""scenario"":""Admin successfully removes a user from a team"",""given"":""I am an Admin viewing the member list for a team"",""when"":""I click the 'Remove' action for a member and confirm"",""then"":""A success notification is displayed, the user is removed from the list, and backend data for the team and user is updated.""},{""scenario"":""System prevents adding a user who is already a member"",""given"":""I am an Admin on the 'Add Member' interface for a team"",""when"":""I view the list of available users to add"",""then"":""the list must not include any users who are already members of that team.""}]","[""Implement 'Manage Members' UI in the Team Management Interface (WI-004-01-03)"",""Develop backend logic (Cloud Function or Batched Writes) to atomically update team and user documents""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules tests implemented and passing"",""End-to-end integration testing completed successfully"",""UI reviewed for responsiveness and accessibility"",""Story deployed and verified in the staging environment""]"
"US-015","Tenant & User Lifecycle Management","Supervisor adds or removes members from their own teams","Supervisor","As a Supervisor, I want to add and remove members from the teams I directly manage, so that I can maintain accurate team rosters and ensure workflows like event assignment and attendance approvals are directed to the correct people.","Empowers team leaders to manage their own rosters, improving data accuracy and operational efficiency. Reduces administrative overhead on the Admin role.","Should Have","5","[""US-011""]","[{""scenario"":""Supervisor successfully adds an eligible user to a team they manage"",""given"":""I am a logged-in Supervisor viewing a team I supervise"",""when"":""I select 'Add Member' and choose an active user with the 'Subordinate' role"",""then"":""the user is added to the team, and the UI refreshes to show the new member.""},{""scenario"":""Supervisor is prevented from managing a team they do not supervise"",""given"":""I am a logged-in Supervisor"",""when"":""I attempt to modify the member list of a team I do not supervise"",""then"":""the system must reject the request with a 'permission-denied' error.""},{""scenario"":""The list of users to add excludes non-subordinate roles"",""given"":""I am a logged-in Supervisor in the 'Add Member' interface"",""when"":""I view the list of available users to add"",""then"":""the list must only contain users with the 'Subordinate' role.""}]","[""Develop 'Manage My Team' UI for the Supervisor mobile dashboard"",""Update Firestore Security Rules to allow a supervisor to edit the `memberIds` array only on teams where their UID matches the `supervisorId`""]","[""All acceptance criteria validated and passing"",""Security requirements validated, especially Firestore rules"",""UI reviewed and approved"",""Integration testing for both happy paths and security rule enforcement completed successfully"",""Story deployed and verified in the staging environment""]"
"US-016","Tenant & User Lifecycle Management","Admin is prevented from creating a circular reporting structure","Admin","As an Admin, I want the system to validate and prevent me from assigning a supervisor to a user if that assignment would create a circular reporting loop, so that I can maintain a logical and functional organizational hierarchy and ensure approval workflows operate correctly.","Ensures data integrity of the organizational hierarchy, prevents infinite loops in approval/escalation workflows, reduces administrative errors, and improves overall system stability.","Must Have","5","[""US-014""]","[{""scenario"":""Admin attempts to assign a user as their own supervisor"",""given"":""An Admin is editing the profile of 'User A'"",""when"":""The Admin attempts to select 'User A' as their own supervisor and save"",""then"":""The system must prevent the save and display an error: 'A user cannot be their own supervisor.'""},{""scenario"":""Admin attempts to create a direct circular dependency (A -> B, then B -> A)"",""given"":""'User B' reports directly to 'Supervisor A'"",""when"":""An Admin edits 'Supervisor A' and attempts to assign 'User B' as their new supervisor"",""then"":""The system must prevent the save and display an error: ''User B' cannot be the supervisor as they are in the reporting line of 'Supervisor A'.'""},{""scenario"":""Admin attempts to create a multi-level, indirect circular dependency (A -> B -> C, then C -> A)"",""given"":""'User C' reports to 'Supervisor B', and 'Supervisor B' reports to 'Manager A'"",""when"":""An Admin edits 'Manager A' and attempts to assign 'User C' as their new supervisor"",""then"":""The system must traverse the hierarchy, detect the loop, prevent the save, and display a clear error message.""}]","[""Develop a callable Cloud Function to perform hierarchical validation before updating a user's `supervisorId`"",""Integrate this validation function into the User Management CRUD Interface (WI-004-01-02)""]","[""All acceptance criteria validated and passing"",""Server-side validation logic is implemented in a Firebase Cloud Function"",""Unit tests for the Cloud Function achieve >90% coverage of the validation logic"",""E2E tests for happy path and all error conditions are passing"",""Story deployed and verified in staging environment""]"
"US-017","Tenant & User Lifecycle Management","User logs in with email and password","Registered User","As a registered user (Admin, Supervisor, or Subordinate), I want to securely log in to the application using my email and password, so that I can access my personalized dashboard and perform actions specific to my role.","Provides the fundamental security mechanism to authenticate users and grant them role-based access to tenant-specific data, enabling all subsequent application functionality.","Must Have","3","[""US-006"",""US-021""]","[{""scenario"":""Successful login with valid credentials"",""given"":""A registered user with an 'active' status is on the login screen"",""when"":""The user enters their correct email and password and taps 'Log In'"",""then"":""The system authenticates the user, a session is created, and the user is redirected to their role-specific dashboard.""},{""scenario"":""Login attempt with an incorrect password"",""given"":""A registered user is on the login screen"",""when"":""The user enters their correct email but an incorrect password"",""then"":""A clear, non-specific error message 'Invalid email or password. Please try again.' is displayed.""},{""scenario"":""Login attempt by a deactivated user"",""given"":""A user whose account status is 'deactivated' is on the login screen"",""when"":""The user enters their correct credentials"",""then"":""A specific error message 'Your account has been deactivated. Please contact your administrator.' is displayed, and access is denied.""}]","[""Implement the Login Screen UI for mobile and web (Part of WI-002-02-01)"",""Integrate with Firebase Authentication SDK for email/password sign-in""]","[""All acceptance criteria are met and validated"",""E2E tests for all major scenarios are passing in the CI/CD pipeline"",""UI conforms to design specifications and accessibility standards"",""Security review confirms that credentials are handled securely"",""The feature is deployed and verified on the staging environment""]"
"US-018","Tenant & User Lifecycle Management","User logs in with Phone OTP","Registered User","As a registered user, I want to log in to the application using a one-time password (OTP) sent to my registered phone number, so that I can securely and conveniently access my account without needing to remember my password.","Improves account security and enhances user experience by providing a convenient, passwordless login option.","Should Have","5","[""US-017""]","[{""scenario"":""Successful login with a valid phone number and OTP"",""given"":""I am on the login screen and have an active account with a registered phone number"",""when"":""I select 'Login with Phone', enter my number, receive an SMS with an OTP, and enter the correct OTP"",""then"":""the system validates the OTP, logs me in, and I am redirected to my role-specific dashboard.""},{""scenario"":""Entering an incorrect OTP"",""given"":""I am on the OTP verification screen"",""when"":""I enter an incorrect OTP"",""then"":""I see an error message 'Invalid code. Please try again.' and I remain on the OTP verification screen.""},{""scenario"":""Requesting to resend the OTP"",""given"":""I am on the OTP verification screen"",""when"":""I tap the 'Resend Code' button after the cooldown period"",""then"":""a new OTP is sent, the timer resets, and the 'Resend Code' button is temporarily disabled.""}]","[""Implement Phone OTP UI/logic on the Login Screen (Part of WI-002-02-01)"",""Configure Firebase project for Phone Number sign-in (APNs, SHA fingerprints)"",""Integrate with Firebase Authentication SDK for phone auth""]","[""All acceptance criteria validated and passing on both iOS and Android physical devices"",""Security requirements, especially rate limiting, are validated"",""Firebase project configuration for phone auth is documented"",""Story deployed and verified in the staging environment""]"
"US-019","Tenant & User Lifecycle Management","User is temporarily locked out after multiple failed login attempts","Registered User","As a registered user, I want my account to be temporarily locked after a specific number of consecutive failed login attempts, so that my account is protected from unauthorized access via brute-force attacks.","Enhances platform security by mitigating brute-force and dictionary attacks, protecting user data, and building user trust.","Must Have","3","[""US-017"",""US-020""]","[{""scenario"":""Account is locked after 5 consecutive failed login attempts"",""given"":""A user enters an incorrect password for the 4th time"",""when"":""The user enters an incorrect password for the 5th consecutive time"",""then"":""The system locks the account for 15 minutes AND displays an error: 'Your account has been temporarily locked due to too many failed login attempts. Please try again in 15 minutes.'""},{""scenario"":""Failed login attempt counter is reset after a successful login"",""given"":""A user has 4 consecutive failed login attempts"",""when"":""The user enters the correct password on the 5th attempt"",""then"":""The user is successfully logged in and the failed login attempt counter is reset to 0.""},{""scenario"":""Account is automatically unlocked after the lockout period expires"",""given"":""A user's account has been locked and the 15-minute lockout period has passed"",""when"":""The user attempts to log in with the correct password"",""then"":""The user is successfully logged in.""}]","[""Enable Firebase Identity Platform's built-in brute-force protection"",""Update Login Screen (WI-002-02-01) to handle the 'auth/too-many-requests' error code and display the specific lockout message""]","[""All acceptance criteria validated and passing"",""Integration tests covering the full login/lockout/unlock flow are passing"",""Security review confirms that the lockout logic cannot be bypassed from the client"",""Story is deployed and verified in the staging environment""]"
"US-020","Tenant & User Lifecycle Management","User resets their forgotten password","Registered User","As a registered user, I want to request a password reset link via my registered email address so that I can securely set a new password and regain access to my account if I forget my current one.","Provides a critical self-service mechanism for account recovery, reducing administrative support load and improving user experience.","Must Have","2","[""US-017""]","[{""scenario"":""User successfully requests a password reset link"",""given"":""I am on the login screen"",""when"":""I click 'Forgot Password?', enter my valid registered email, and submit"",""then"":""I see a confirmation message: 'If an account with that email exists, a password reset link has been sent.'""},{""scenario"":""User successfully resets their password using the link"",""given"":""I have received a password reset email and clicked the valid link"",""when"":""I enter a new password that meets complexity requirements, confirm it, and submit"",""then"":""My password is updated, and I see a success message with a link to the login page.""},{""scenario"":""User enters an unregistered email address"",""given"":""I am on the password reset request screen"",""when"":""I enter an email that is not registered and submit"",""then"":""I see the exact same generic confirmation message to prevent email enumeration.""}]","[""WI-002-02-05: Implement 'Forgot Password' Flow"",""Integrate with Firebase Authentication's `sendPasswordResetEmail` and `confirmPasswordReset` functions""]","[""All acceptance criteria validated and passing"",""End-to-end integration test for the full flow is implemented and passing"",""Security check for email enumeration vulnerability has been performed and passed"",""Story deployed and verified in the staging environment""]"
"US-021","Tenant & User Lifecycle Management","User sees a role-specific dashboard after logging in","Authenticated User","As an authenticated user (Admin, Supervisor, or Subordinate), I want to be automatically routed to my role-specific dashboard immediately after a successful login, so that I can efficiently access the information and tools relevant to my responsibilities without unnecessary navigation.","Improves user efficiency and satisfaction by providing a personalized experience and streamlining workflows.","Must Have","2","[""US-017""]","[{""scenario"":""Admin successfully logs into the web application"",""given"":""a registered user exists with the role 'Admin'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must redirect them to the main Admin Web Dashboard.""},{""scenario"":""Supervisor successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Supervisor'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Supervisor Mobile Dashboard.""},{""scenario"":""Non-Admin user attempts to log into the web application"",""given"":""a user with the role 'Supervisor' or 'Subordinate'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must display a page informing them that the web dashboard is for administrative access only.""}]","[""WI-002-02-02: Implement Post-Login Role-Based Routing""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully for all roles and platforms"",""Performance requirement for redirection time is met and verified"",""Security requirements for using custom claims are validated via code review"",""Story deployed and verified in the staging environment""]"
"US-022","Tenant & User Lifecycle Management","Admin initiates the permanent deletion of their organization's tenant","Admin","As an Admin, I want to initiate the permanent deletion of my organization's tenant through a secure, multi-step process, so that I can comply with my company's data removal policies and ensure all our data is erased from the service.","Provides a self-service offboarding capability, ensures compliance with data privacy regulations (e.g., GDPR's 'right to erasure'), and builds customer trust.","Should Have","5","[""US-023"",""US-024"",""US-025""]","[{""scenario"":""Admin successfully initiates tenant deletion"",""given"":""an Admin is logged in and on the 'Tenant Settings' page"",""when"":""the Admin clicks 'Delete Organization', confirms, and successfully re-authenticates"",""then"":""the system updates the tenant's status to 'pending_deletion' and sets a 'scheduledDeletionTimestamp' for 30 days in the future, and an audit log is created.""},{""scenario"":""UI displays clear warnings about the irreversible action"",""given"":""an Admin has clicked the 'Delete Organization' button"",""when"":""the confirmation modal is displayed"",""then"":""the modal must explicitly state that the action is irreversible after the grace period and mention the 30-day grace period.""}]","[""Develop the 'Delete Organization' UI in the Tenant Settings page (WI-004-01-04)"",""Develop the first part of the Tenant Deletion Lifecycle Cloud Function (WI-002-01-06) to handle the deletion request""]","[""All acceptance criteria validated and passing"",""Integration testing of the full flow (UI -> Cloud Function -> Firestore) completed successfully"",""Security requirements validated"",""Story deployed and verified in the staging environment""]"
"US-023","Tenant & User Lifecycle Management","Admin must re-authenticate to confirm tenant deletion","Admin","As an Admin, I want to be forced to re-enter my password to confirm the tenant deletion request, so that I can prevent accidental or unauthorized deletion of all my organization's data.","Prevents catastrophic, accidental data loss for an entire organization, which protects against significant business disruption and enhances system security.","Must Have","5","[""US-022""]","[{""scenario"":""Admin successfully re-authenticates to confirm tenant deletion"",""given"":""the re-authentication modal appears after initiating deletion"",""when"":""the Admin enters their correct password and clicks 'Confirm Deletion'"",""then"":""the system validates the password and the tenant deletion process is initiated.""},{""scenario"":""Admin enters an incorrect password"",""given"":""the re-authentication modal for tenant deletion is displayed"",""when"":""the Admin enters an incorrect password"",""then"":""an error message 'Incorrect password. Please try again.' is displayed, and the deletion process is not initiated.""}]","[""Implement the re-authentication modal as part of the Tenant Deletion UI (WI-002-01-06 and WI-004-01-04)"",""The backend Cloud Function must include a secure step to re-authenticate the user before proceeding""]","[""All acceptance criteria validated and passing"",""Unit tests for the modal UI and Cloud Function implemented"",""Security requirements validated"",""Story deployed and verified in the staging environment""]"
"US-024","Tenant & User Lifecycle Management","Admin is informed of the 30-day grace period for tenant deletion","Admin","As an Admin who has just confirmed a request to delete my organization's tenant, I want to be immediately and clearly informed about the 30-day grace period and the final deletion date, so that I understand the consequences and know how to reverse the process.","Provides a critical safety mechanism to prevent accidental, irreversible data loss, building user trust and reducing support incidents.","Must Have","2","[""US-022"",""US-023""]","[{""scenario"":""Display of grace period information after deletion confirmation"",""given"":""An Admin has successfully confirmed the tenant deletion request"",""when"":""the system processes the request"",""then"":""the UI immediately displays a prominent, persistent banner stating that a 30-day grace period has begun and shows the final deletion date.""},{""scenario"":""Email notification of pending deletion"",""given"":""an Admin has successfully confirmed the tenant deletion request"",""when"":""the backend processes the request"",""then"":""the system sends an email to the initiating Admin's address containing the 30-day grace period and the permanent deletion date.""}]","[""Implement the grace period banner in the Admin Dashboard shell (WI-004-01-01)"",""Update the tenant deletion Cloud Function (WI-002-01-06) to send a confirmation email via SendGrid""]","[""All acceptance criteria validated and passing"",""E2E test verifies banner and email"",""UI is reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-025","Tenant & User Lifecycle Management","Admin cancels a pending tenant deletion","Admin","As an Admin, I want to cancel a previously requested tenant deletion during the 30-day grace period, so that I can prevent the permanent loss of my organization's data and restore full access to the application.","Provides a critical safety net to prevent accidental data loss. Reduces customer support load by enabling self-service reversal of a destructive action.","Must Have","5","[""US-022""]","[{""scenario"":""Admin successfully cancels a pending deletion within the grace period"",""given"":""A tenant's status is 'pending_deletion' and the current date is within the 30-day grace period"",""when"":""The Admin clicks 'Cancel Scheduled Deletion' and confirms"",""then"":""The tenant's status is updated from 'pending_deletion' to 'active', and an audit log entry is created.""},{""scenario"":""Attempt to cancel deletion outside the grace period"",""given"":""A tenant's 30-day grace period for deletion has expired"",""when"":""An Admin attempts to trigger the cancellation action"",""then"":""The system must reject the request with an error: 'The grace period has expired.'""}]","[""Implement the 'Cancel Deletion' UI within the grace period banner"",""Develop a callable Cloud Function to handle the cancellation logic securely and atomically (update status, create audit log)""]","[""All acceptance criteria validated and passing"",""E2E test scenario automated and passing"",""Security rules and server-side validation logic have been peer-reviewed"",""Story deployed and verified in the staging environment""]"
"US-026","Tenant & User Lifecycle Management","User accepts Terms of Service and Privacy Policy","New User","As a new user completing my registration, I want to be presented with the Terms of Service and Privacy Policy and be required to accept them, so that I understand the rules and how my data will be used, and my account can be fully activated.","Ensures legal and regulatory compliance (e.g., GDPR) by obtaining explicit user consent before account activation. Mitigates legal risk and builds user trust.","Must Have","2","[""US-006""]","[{""scenario"":""User reviews and accepts policies"",""given"":""A new user has set their password and is on the 'Terms and Policy Acceptance' screen"",""when"":""The user checks the box to accept and clicks 'Accept & Continue'"",""then"":""The user's status is updated from 'invited' to 'active', an audit log of the acceptance is created, and the user is redirected to their dashboard.""},{""scenario"":""User closes the app before accepting"",""given"":""A new user is on the acceptance screen and closes the app"",""when"":""The user re-opens the app and logs in"",""then"":""The system must redirect them back to the 'Terms and Policy Acceptance' screen because their account is not yet active.""}]","[""Implement the 'Terms and Policy Acceptance' screen as part of the registration flow (WI-002-02-04)"",""Update the `completeRegistration` Cloud Function (WI-002-01-04) to handle the final activation and audit logging""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully"",""Security requirement for atomic, audited writes is validated"",""Story deployed and verified in the staging environment""]"
"US-027","Tenant & User Lifecycle Management","User password must meet complexity requirements","System User","As a System User, I want my new password to be validated against a set of complexity rules when I register or reset my password, so that I can be confident my account is protected against unauthorized access.","Enhances account and data security by preventing the use of weak passwords. Reduces the risk of unauthorized access and supports security compliance.","Must Have","5","[""US-006"",""US-020""]","[{""scenario"":""Password is missing a required character type"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password that meets length but is missing a number (e.g., 'MissingNumber@')"",""then"":""The 'at least one number' requirement in the validation checklist is marked as 'unmet' and the 'Submit' button remains disabled.""},{""scenario"":""Server-side validation rejects an invalid password"",""given"":""A user attempts to set a new password by bypassing client-side validation"",""when"":""The request contains a password that does not meet the policy"",""then"":""The server-side logic (Cloud Function) must reject the request with an error.""}]","[""WI-002-01-05: Implement `beforeCreate` Auth Blocking Function for Password Policy"",""Create a reusable Flutter widget for real-time password policy validation""]","[""All acceptance criteria validated and passing"",""Server-side validation logic implemented in a Cloud Function and tested"",""Integration testing completed successfully for registration and password reset flows"",""Security requirements validated"",""Story deployed and verified in staging environment""]"
"US-028","Core Attendance Workflow","Subordinate checks in for attendance","Subordinate","As a Subordinate, I want to tap a 'Check-In' button on my mobile app so that the system captures my current time and GPS location to create an official attendance record for the start of my workday.","Provides a verifiable, time-stamped, and geo-located record of when an employee starts their workday. This is the foundational data point for all attendance tracking and reporting.","Must Have","5","[""US-017"",""US-021"",""US-076""]","[{""scenario"":""Successful check-in with an active internet connection"",""given"":""I am a logged-in Subordinate, have granted location permissions, and have not checked in for the day"",""when"":""I tap the 'Check-In' button"",""then"":""The system captures my timestamp and GPS, a new attendance record is created in Firestore with status 'pending', and the UI updates to show I am checked in.""},{""scenario"":""Check-in attempt with no GPS signal"",""given"":""My device cannot acquire a GPS signal"",""when"":""I tap the 'Check-In' button"",""then"":""The app fails after a 10-second timeout and displays an error: 'Could not get location. Please move to an open area and try again.'""},{""scenario"":""Attempting to check in more than once in a day"",""given"":""I have already successfully checked in for the day"",""when"":""I view the main dashboard"",""then"":""The 'Check-In' button is disabled, preventing a duplicate record.""}]","[""Implement Subordinate Dashboard and Check-In UI (Part of WI-003-01-01)"",""Develop AttendanceRepository for Check-In logic (Part of WI-003-01-02)"",""Develop Cloud Function for server-side timestamp validation (related to US-031)""]","[""All acceptance criteria validated and passing"",""E2E tests for offline and permission flows are passing"",""Performance requirements for GPS lock and data sync are verified"",""Security rules for creating attendance records are deployed and tested"",""Story deployed and verified in the staging environment on both Android and iOS""]"
"US-029","Core Attendance Workflow","Subordinate checks out from attendance","Subordinate","As a Subordinate, I want to check out at the end of my shift by tapping a button, so that my attendance record for the day is completed with an accurate timestamp and GPS location.","Completes the daily attendance data loop, enabling accurate calculation of work duration and providing complete records for reporting and compliance.","Must Have","5","[""US-028"",""US-030"",""US-033"",""US-077""]","[{""scenario"":""Successful check-out on an active attendance record"",""given"":""A Subordinate has an active check-in record for the day"",""when"":""the user taps the 'Check-Out' button"",""then"":""the system captures the timestamp and GPS, updates the existing attendance record with 'checkOutTime' and 'checkOutGps', and displays a success message.""},{""scenario"":""Check-out action updates the correct daily record"",""given"":""A Subordinate performs a check-out"",""when"":""the action is processed"",""then"":""the system must update the same attendance document that was created during check-in for that day, not a new one.""},{""scenario"":""UI state updates after successful check-out"",""given"":""A Subordinate has successfully checked out"",""when"":""they view the main attendance screen"",""then"":""the 'Check-Out' button must be disabled, and the UI must indicate that they are checked out for the day.""}]","[""Implement Check-Out UI on Subordinate Dashboard (Part of WI-003-01-01)"",""Develop `checkOut()` method in AttendanceRepository (Part of WI-003-01-02)""]","[""All acceptance criteria validated and passing"",""End-to-end test scenario for the check-out flow is implemented and passing"",""Manual testing confirms correct functionality on target iOS and Android physical devices"",""Security rules preventing unauthorized updates are tested and validated"",""Story deployed and verified in the staging environment""]"
"US-030","Core Attendance Workflow","Subordinate is prevented from checking out before checking in","Subordinate","As a Subordinate, I want the 'Check-Out' button to be disabled until I have successfully checked in for the day, so that I am prevented from making a logical error and can follow the correct workflow.","Ensures data integrity by preventing orphaned check-out records, reduces user error, and provides a clear, guided user experience.","Must Have","2","[""US-028""]","[{""scenario"":""Initial state on a new day"",""given"":""a Subordinate opens the attendance screen on a new day"",""when"":""they have no active attendance record"",""then"":""the 'Check-In' button is enabled and the 'Check-Out' button is disabled.""},{""scenario"":""UI state updates immediately after a successful check-in"",""given"":""a Subordinate is on the attendance screen"",""when"":""they successfully perform a check-in"",""then"":""the 'Check-In' button immediately becomes disabled, and the 'Check-Out' button immediately becomes enabled.""},{""scenario"":""State persistence after app restart"",""given"":""a Subordinate has an active check-in for the day"",""when"":""they close and reopen the application"",""then"":""the app correctly fetches their status, displaying the 'Check-In' button as disabled and the 'Check-Out' button as enabled.""}]","[""Implement state management logic for Check-In/Out buttons on the Subordinate Dashboard (WI-003-01-01)"",""The state management provider must query Firestore for the user's current day attendance status on app start""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented with >80% coverage for the logic"",""Integration testing completed successfully against the Firebase Emulator"",""Story deployed and verified in staging environment""]"
"US-031","Core Attendance Workflow","Admin views and filters for attendance records flagged for clock discrepancy","Admin","As an Admin, I want to view and filter for attendance records that are flagged for a significant clock discrepancy between the device and the server, so that I can audit data integrity and investigate potential time manipulation.","Enhances data integrity and trust by providing a mechanism to audit and investigate anomalies. Helps detect potential time fraud or recurring technical problems.","Should Have","3","[""US-059"",""US-060""]","[{""scenario"":""Visual identification of a flagged record in the attendance report"",""given"":""an Admin is viewing the main attendance report"",""when"":""the report displays a record with the 'clock_discrepancy' flag"",""then"":""that record's row must display a clear visual indicator (e.g., a warning icon).""},{""scenario"":""Admin filters the report to show only records with clock discrepancies"",""given"":""the attendance report contains a mix of records"",""when"":""the Admin selects the 'Clock Discrepancy' option from the filter controls"",""then"":""the report view must update to show only the records that contain the 'clock_discrepancy' flag.""}]","[""Develop a Cloud Function on attendance record creation to compare client and server timestamps and add the `clock_discrepancy` flag if the difference > 5 minutes"",""Update the Admin's Exception Report (WI-004-02-03) to include a filter and indicator for this flag""]","[""All acceptance criteria validated and passing"",""The required Firestore index is defined in `firestore.indexes.json` and deployed"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-032","Core Attendance Workflow","Subordinate's attendance is automatically checked out","Subordinate","As a Subordinate, I want the system to automatically check me out at a specific time set by my organization so that my attendance record is complete even if I forget to manually check out.","Improves data integrity by ensuring all attendance records are closed daily. Reduces administrative overhead by minimizing the need for manual corrections.","Should Have","5","[""US-028"",""US-069"",""US-070""]","[{""scenario"":""Successful auto-checkout for a user who forgot to check out"",""given"":""An organization has enabled auto-checkout for 17:30 in their timezone"",""when"":""The scheduled auto-checkout function runs"",""then"":""The Subordinate's attendance record is updated with a 'checkOutTime' of 17:30 and an 'auto-checked-out' flag.""},{""scenario"":""Auto-checkout process ignores users who have already checked out"",""given"":""A Subordinate has manually checked out at 17:15"",""when"":""The scheduled auto-checkout function runs at 17:30"",""then"":""The Subordinate's attendance record is NOT modified.""}]","[""Develop a daily scheduled Cloud Function that queries for open attendance records for each tenant with the feature enabled"",""The function must respect each tenant's configured timezone and auto-checkout time"",""The function updates matching records with the configured time and the `auto-checked-out` flag""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function implemented with >80% coverage"",""Integration testing completed using the Firebase Emulator Suite"",""Story deployed and verified in the staging environment""]"
"US-033","Core Attendance Workflow","Subordinate marks attendance while offline","Subordinate","As a Subordinate, I want to be able to check in and check out when my device is offline, so that my attendance is captured accurately at the correct time, regardless of my network connectivity.","Ensures data integrity and accuracy by capturing attendance at the moment it occurs. Increases system reliability and user trust.","Must Have","5","[""US-028"",""US-029""]","[{""scenario"":""User performs a check-in while the device is offline"",""given"":""The user is logged in and their device is offline"",""when"":""The user taps the 'Check-In' button"",""then"":""The app captures the timestamp and GPS, creates a record in the local Firestore cache with an 'isOfflineEntry' flag, and the UI updates to show a 'Checked In' status.""},{""scenario"":""Offline records are automatically synchronized when connectivity is restored"",""given"":""The user has records stored in the local cache"",""when"":""The device regains a stable internet connection"",""then"":""The Firestore SDK automatically syncs the local records to the server, preserving the 'isOfflineEntry' flag.""}]","[""Enable and configure Firestore offline persistence in the Flutter application"",""Update the AttendanceRepository (WI-003-01-02) to add the `isOfflineEntry` flag when creating a record while offline""]","[""All acceptance criteria validated and passing"",""E2E integration tests for all offline scenarios are implemented and passing"",""Manual verification on both Android and iOS physical devices"",""Story deployed and verified in the staging environment""]"
"US-034","Core Attendance Workflow","Subordinate's offline attendance syncs automatically","Subordinate","As a Subordinate, I want my offline attendance records to be automatically sent to the server when my device reconnects to the internet, so that my attendance is accurately recorded without any extra effort.","Ensures data integrity by capturing all attendance records regardless of network status. Improves user experience by removing the need for manual synchronization.","Must Have","5","[""US-033""]","[{""scenario"":""Successful sync of a single offline check-in record"",""given"":""a user performs a check-in while offline"",""when"":""the device later regains a stable internet connection"",""then"":""the Firestore SDK automatically syncs the pending write to the server and the local UI updates to show the record as successfully synced.""},{""scenario"":""Syncing multiple offline records"",""given"":""a user has created multiple unsynced attendance records"",""when"":""the device regains a stable internet connection"",""then"":""all pending offline records are automatically sent to the server.""},{""scenario"":""Sync process is non-blocking for the user interface"",""given"":""the application is in the process of syncing offline data"",""when"":""the user navigates to other parts of the application"",""then"":""the UI remains responsive and is not blocked by the background sync process.""}]","[""Verify and test the default behavior of the configured Firestore offline persistence (from US-033)"",""Implement UI state updates to remove 'pending sync' indicators upon successful sync""]","[""All acceptance criteria validated and passing"",""Manual E2E testing on physical Android and iOS devices confirms sync works as expected in various network conditions"",""Performance requirements verified (no UI blocking)"",""Story deployed and verified in staging environment""]"
"US-035","Core Attendance Workflow","Subordinate is notified of a persistent sync failure","Subordinate","As a Subordinate, I want to be clearly and persistently notified within the app if my offline attendance data has failed to sync for over 24 hours, so that I can take action to resolve the issue and prevent my records from being lost.","Ensures data integrity by preventing the silent loss of offline attendance records. Builds user trust and reduces administrative overhead for manual corrections.","Should Have","5","[""US-033""]","[{""scenario"":""Notification appears for a single stale offline record"",""given"":""a user has an unsynced offline record for more than 24 hours"",""when"":""the user opens the application"",""then"":""a persistent, non-dismissible notification banner is displayed with a 'Retry Sync' button.""},{""scenario"":""Successful manual sync dismisses the notification"",""given"":""the sync failure notification is visible and the device has internet"",""when"":""the user taps the 'Retry Sync' button"",""then"":""the system syncs the data, the banner is removed, and a temporary success message is displayed.""}]","[""WI-003-01-03: Implement Persistent Notification for Sync Failures""]","[""All acceptance criteria validated and passing"",""E2E integration test for the full offline-notify-retry cycle is implemented and passing"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-036","Core Attendance Workflow","Subordinate manually re-triggers a failed data sync","Subordinate","As a Subordinate, I want to be able to manually trigger a re-sync of my offline attendance records that have failed to upload, so that I can ensure my data is not lost.","Prevents data loss for offline entries, ensures data integrity, and builds user trust in the system's reliability.","Should Have","3","[""US-035""]","[{""scenario"":""Successful manual re-sync of a failed record"",""given"":""I have a 'Sync Failed' notification for an offline record"",""when"":""I tap the 'Retry Sync' button while my device has a stable internet connection"",""then"":""The system re-attempts to write the record to Firestore, and upon success, the 'Sync Failed' notification is removed.""},{""scenario"":""Manual re-sync attempt fails due to no internet connectivity"",""given"":""I am viewing a 'Sync Failed' notification"",""when"":""I tap 'Retry Sync' while my device is still offline"",""then"":""The system immediately displays an error: 'Sync failed. Please check your internet connection and try again.' and the 'Sync Failed' notification remains.""}]","[""Implement the 'Retry Sync' button logic within the sync failure banner (from WI-003-01-03)""]","[""All acceptance criteria validated and passing"",""E2E integration test for the manual sync happy path and failure path is implemented and passing"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-037","Core Attendance Workflow","Supervisor views pending attendance records from subordinates","Supervisor","As a Supervisor, I want to see a clear list of all attendance records from my direct subordinates that are awaiting my review, so that I can efficiently manage my team's attendance and take timely action.","Enables the core attendance approval workflow, ensuring that employee work hours are verified in a timely manner, which is critical for data integrity and accountability.","Must Have","5","[""US-028""]","[{""scenario"":""Supervisor views a list of pending records"",""given"":""a Supervisor has a subordinate with a record in 'pending' status"",""when"":""the Supervisor navigates to their dashboard"",""then"":""a list of all 'pending' records from their direct subordinates is displayed.""},{""scenario"":""List only shows records from direct subordinates"",""given"":""a Supervisor is logged in"",""when"":""the system fetches records for their dashboard"",""then"":""the query must filter records where `supervisorId` matches the Supervisor's `userId`, and must be enforced by security rules.""},{""scenario"":""Supervisor has no pending records to review"",""given"":""none of a Supervisor's subordinates have 'pending' records"",""when"":""the Supervisor navigates to the review screen"",""then"":""a message is displayed: 'No pending records to review.'""}]","[""WI-003-02-01: Implement Supervisor Dashboard with Pending Approvals List""]","[""All acceptance criteria validated and passing"",""Required Firestore composite index is defined in `firestore.indexes.json`"",""Integration testing with the Firebase Emulator completed successfully"",""Security rules tested to ensure data isolation"",""Story deployed and verified in the staging environment""]"
"US-038","Core Attendance Workflow","Supervisor identifies flagged attendance records","Supervisor","As a Supervisor, I want to see clear visual indicators on attendance records that have been flagged for exceptions (like offline entry or clock discrepancy), so I can quickly identify records that require closer scrutiny.","Improves the efficiency and accuracy of the approval process by focusing the Supervisor's attention on anomalous records, enhancing data integrity.","Should Have","2","[""US-037"",""US-033"",""US-032"",""US-031""]","[{""scenario"":""Display indicator for offline entry"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'isOfflineEntry' flag"",""then"":""the record must display a distinct visual indicator representing an offline entry.""},{""scenario"":""Display indicator for clock discrepancy"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record has the 'clock_discrepancy' flag"",""then"":""the record must display a distinct visual indicator representing a clock discrepancy.""},{""scenario"":""Display indicators for a record with multiple flags"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record has both 'isOfflineEntry' and 'clock_discrepancy' flags"",""then"":""the record must display a separate visual indicator for each flag.""}]","[""WI-003-02-04: Implement UI Indicators for Flagged Records""]","[""All acceptance criteria validated and passing"",""Widget tests for the list item to verify indicators render correctly"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-039","Core Attendance Workflow","Supervisor approves a single attendance record","Supervisor","As a Supervisor, I want to approve a single pending attendance record for one of my subordinates so that I can validate their work hours and move the record to an 'approved' state for accurate reporting.","Enables the core attendance validation workflow, ensures data integrity for reporting, and provides accountability by formally confirming subordinate work hours.","Must Have","2","[""US-037""]","[{""scenario"":""Successful approval of a pending record"",""given"":""I am a Supervisor viewing a 'pending' record from my direct subordinate"",""when"":""I tap the 'Approve' button for that record"",""then"":""the system updates the record's status to 'approved', a success message is displayed, and the record is removed from my 'Pending Approvals' list.""},{""scenario"":""Audit Trail: Approval action is logged"",""given"":""I am a Supervisor and I approve a pending record"",""when"":""The system processes my approval"",""then"":""A new, immutable document is created in the `auditLog` collection detailing the action.""},{""scenario"":""Security: Supervisor cannot approve records for non-subordinates"",""given"":""I am a Supervisor"",""when"":""I attempt to approve a record belonging to a user not in my direct reporting line"",""then"":""The operation must be rejected by the backend with a permission error.""}]","[""Implement 'Approve' button logic on the Supervisor Dashboard (related to WI-003-02-01)"",""Develop or update `approveRejectRecord` Callable Cloud Function (WI-003-02-02) to handle approval and audit logging""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this action are written and tested"",""Integration testing with the Firebase Emulator completed successfully"",""Story deployed and verified in the staging environment""]"
"US-040","Core Attendance Workflow","Supervisor rejects a single attendance record with a reason","Supervisor","As a Supervisor, I want to reject a subordinate's attendance record and be required to provide a reason, so that I can maintain accurate team records and provide clear feedback to my subordinate.","Ensures data accuracy, provides a transparent and auditable approval workflow, and facilitates clear communication between supervisors and subordinates regarding attendance issues.","Must Have","2","[""US-037""]","[{""scenario"":""Supervisor successfully rejects a record with a valid reason"",""given"":""A Supervisor is viewing a 'pending' record"",""when"":""The Supervisor selects 'Reject', enters a reason, and confirms"",""then"":""The record's status is updated to 'rejected', the `rejectionReason` field is populated, and the record is removed from the pending list.""},{""scenario"":""Attempting to reject without providing a reason"",""given"":""A Supervisor has initiated the rejection process"",""when"":""The Supervisor attempts to confirm without entering a reason"",""then"":""A validation error 'A reason is required for rejection' is displayed, and the action is blocked.""},{""scenario"":""Audit log is created for the rejection action"",""given"":""A Supervisor successfully rejects a record"",""when"":""The record's status is updated"",""then"":""A new document is created in the `auditLog` collection detailing the action and reason.""}]","[""Implement 'Reject' button and reason modal on the Supervisor Dashboard (related to WI-003-02-01)"",""Update `approveRejectRecord` Callable Cloud Function (WI-003-02-02) to handle rejection and audit logging""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented for the rejection dialog and its logic"",""Firestore Security Rules for this action are written and tested"",""Story deployed and verified in the staging environment""]"
"US-041","Core Attendance Workflow","Supervisor bulk-approves multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records and approve them all with a single action, so that I can efficiently manage my team's attendance and save time.","Reduces administrative overhead for managers by streamlining a repetitive task, leading to faster attendance data processing and increased operational efficiency.","Should Have","5","[""US-037"",""US-039""]","[{""scenario"":""Successful bulk approval of multiple records"",""given"":""A Supervisor has selected three pending records"",""when"":""The Supervisor clicks the 'Approve Selected' button"",""then"":""All three records are atomically updated to 'approved' status, a success message '3 records approved' is shown, and they are removed from the pending list.""},{""scenario"":""Bulk approval operation fails atomically"",""given"":""A Supervisor has selected multiple records for approval"",""when"":""The backend operation fails for any reason"",""then"":""The entire batch operation is rolled back, and no records have their status changed.""},{""scenario"":""Security check for record ownership"",""given"":""A user attempts to call the bulk-approval function with a list of record IDs"",""when"":""The list contains a record that does not belong to a direct subordinate"",""then"":""The entire operation is rejected by the backend.""}]","[""WI-003-02-03: Implement Bulk Approve/Reject UI and Logic""]","[""All acceptance criteria validated and passing"",""Performance requirements for the batch operation are verified"",""Security requirements, especially backend permission checks, are validated"",""Story deployed and verified in the staging environment""]"
"US-042","Core Attendance Workflow","Supervisor bulk-rejects multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records and reject them all in a single action with a common reason, so that I can efficiently manage approvals.","Improves managerial efficiency by reducing the time required to handle multiple similar attendance issues and ensures consistent reasoning is applied.","Could Have","5","[""US-037"",""US-040""]","[{""scenario"":""Supervisor successfully rejects multiple records with a reason"",""given"":""a Supervisor has selected two or more records"",""when"":""the Supervisor clicks 'Reject Selected', enters a reason, and confirms"",""then"":""all selected records are updated to 'rejected' status with the provided reason, and they are removed from the pending list.""},{""scenario"":""Supervisor attempts to reject records without a reason"",""given"":""a Supervisor has selected records and opened the rejection modal"",""when"":""the Supervisor attempts to confirm without entering a reason"",""then"":""the action is prevented, and a validation error 'A reason is required' is displayed.""}]","[""WI-003-02-03: Implement Bulk Approve/Reject UI and Logic""]","[""All acceptance criteria validated and passing"",""Integration testing with the Firebase Emulator completed successfully"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-043","Core Attendance Workflow","Subordinate views the reason for a rejected record","Subordinate","As a Subordinate, I want to see the specific reason my Supervisor provided when they rejected my attendance record, so that I can understand the issue and take appropriate action.","Increases transparency in the approval process, reduces confusion, and empowers employees to correct their own data, improving data quality.","Should Have","1","[""US-040""]","[{""scenario"":""Display of rejection reason for a rejected record"",""given"":""I am a Subordinate with a rejected attendance record"",""when"":""I navigate to my attendance history and view the details of the rejected record"",""then"":""The record's status is displayed as 'Rejected' and a section 'Reason for Rejection' contains the text my Supervisor entered.""},{""scenario"":""Visual distinction of rejected records in the list view"",""given"":""I am a Subordinate viewing my list of attendance records"",""when"":""The list contains a rejected record"",""then"":""The rejected record must be visually distinct from others (e.g., using a red color indicator).""}]","[""Update the Subordinate's attendance history screen (WI-003-01-04) to display the `rejectionReason` field for records with 'rejected' status""]","[""All acceptance criteria validated and passing"",""UI reviewed and approved"",""Story deployed and verified in staging environment""]"
"US-044","Core Attendance Workflow","Pending approval is escalated to the next-level supervisor","System","As an Admin, I want pending attendance approvals to automatically escalate to the next supervisor in the hierarchy after a configurable period, so that approval workflows are not blocked by unavailable or unresponsive managers.","Ensures business continuity by preventing bottlenecks in the approval workflow. Guarantees timely processing of attendance records, improving operational efficiency.","Could Have","5","[""US-071"",""US-037"",""US-051""]","[{""scenario"":""A pending record is escalated to the next available supervisor"",""given"":""a tenant has an escalation period of 3 days and a record is pending for 4 days"",""when"":""the daily scheduled escalation Cloud Function runs"",""then"":""the record's `supervisorId` is updated to the ID of the original supervisor's manager, and an audit log is created.""},{""scenario"":""The assigned supervisor is at the top of the hierarchy"",""given"":""an overdue record is assigned to a supervisor who has no manager"",""when"":""the escalation function runs"",""then"":""the record's `supervisorId` remains unchanged, and the record is flagged with `escalation_failed_no_supervisor`.""},{""scenario"":""The next-level supervisor's account is deactivated"",""given"":""an overdue record is assigned to Supervisor A, who reports to Supervisor B (deactivated), who reports to Supervisor C (active)"",""when"":""the escalation function runs"",""then"":""the record is escalated directly to Supervisor C, skipping the deactivated user.""}]","[""Develop a scheduled Cloud Function to query for overdue pending records"",""Implement logic to traverse the user hierarchy and find the next active supervisor"",""Update the record and create an audit log entry in a transaction""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function implemented with >80% coverage"",""Integration testing completed using the Firebase Emulator Suite"",""Story deployed and verified in staging environment""]"
"US-045","Core Attendance Workflow","Subordinate requests a correction to an attendance record","Subordinate","As a Subordinate, I want to submit a request to correct my attendance record and provide a mandatory reason, so that I can fix mistakes and ensure my work hours are accurate.","Ensures data integrity by providing a formal, auditable workflow for correcting attendance errors. Enhances accountability and streamlines the process.","Must Have","5","[""US-028"",""US-039"",""US-051""]","[{""scenario"":""Submitting a valid correction request"",""given"":""I am viewing my attendance history"",""when"":""I select an 'approved' record, enter a valid new time, provide a justification, and submit"",""then"":""The record's status updates to 'correction_pending', the proposed changes are stored, and my supervisor is notified.""},{""scenario"":""Submitting a request with no justification"",""given"":""I am on the correction form"",""when"":""I leave the justification field blank and submit"",""then"":""The submission is blocked, and an error 'Justification is required' is displayed.""},{""scenario"":""Attempting to correct a record that is already pending"",""given"":""I am viewing my attendance history"",""when"":""I locate a record with status 'pending' or 'correction_pending'"",""then"":""The 'Request Correction' option is disabled.""}]","[""Implement 'Request Correction' UI in the attendance history screen (WI-003-01-04)"",""Update Firestore security rules to allow users to update their own records to 'correction_pending' state"",""Implement backend logic (Cloud Function trigger) to create an audit log for the request""]","[""All acceptance criteria validated and passing"",""Integration testing for Firestore writes and security rules completed successfully"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-046","Core Attendance Workflow","Supervisor reviews an attendance correction request","Supervisor","As a Supervisor, I want to view a detailed summary of an attendance correction request, including original times, proposed new times, and justification, so I can make an informed decision.","Enables informed and auditable decisions on attendance corrections, maintaining data integrity and supporting accurate record-keeping.","Must Have","3","[""US-045"",""US-037""]","[{""scenario"":""Supervisor views the details of a pending correction request"",""given"":""I am a Supervisor on my dashboard's approval list"",""when"":""I tap on an item marked as 'Correction Pending'"",""then"":""A detailed view is displayed showing the Subordinate's name, date, original times, requested new times, and the justification.""},{""scenario"":""Proposed changes are visually highlighted"",""given"":""I am viewing a correction request where only the check-in time was changed"",""when"":""the view is displayed"",""then"":""the 'Requested New Check-In Time' field is visually distinct (e.g., bold font).""}]","[""Update Supervisor Dashboard (WI-003-02-01) to handle 'correction_pending' status items"",""Create a detailed view screen/modal for correction requests""]","[""All acceptance criteria validated and passing"",""Widget tests implemented with >80% coverage"",""Firestore Security Rules are written and tested"",""Story deployed and verified in the staging environment""]"
"US-047","Core Attendance Workflow","Supervisor approves an attendance correction request","Supervisor","As a Supervisor, I want to approve a subordinate's attendance correction request, so that I can ensure the accuracy of their records and maintain a complete, auditable history of all changes.","Ensures data integrity for attendance records and provides a clear, auditable trail of all data modifications for compliance and dispute resolution.","Must Have","5","[""US-045"",""US-046"",""US-051""]","[{""scenario"":""Supervisor successfully approves a correction request"",""given"":""A Supervisor is viewing a pending correction request"",""when"":""The Supervisor clicks the 'Approve' button"",""then"":""The system atomically updates the record's status to 'approved', updates the timestamps with corrected values, adds a 'manually-corrected' flag, and creates a detailed audit log entry.""},{""scenario"":""Attempting to approve a stale or already processed request"",""given"":""A Supervisor is viewing a 'correction_pending' request"",""when"":""The record's status is changed by another process before the Supervisor clicks 'Approve'"",""then"":""The backend rejects the approval, and the Supervisor is shown an error: 'This request has already been processed.'""}]","[""Implement 'Approve' button logic on the correction request review screen (from US-046)"",""Develop a callable Cloud Function to handle the approval atomically (update attendance, create audit log)""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function implemented"",""Integration testing completed successfully between the client and backend"",""Story deployed and verified in staging environment""]"
"US-048","Core Attendance Workflow","Supervisor rejects an attendance correction request","Supervisor","As a Supervisor, I want to reject an invalid attendance correction request from my subordinate and provide a reason, so that I can maintain the accuracy of attendance records.","Ensures integrity of attendance data by allowing supervisors to prevent incorrect modifications and provides a clear audit trail for managerial decisions.","Must Have","5","[""US-045"",""US-046"",""US-049"",""US-051""]","[{""scenario"":""Supervisor successfully rejects a correction request with a reason"",""given"":""I am viewing a 'correction_pending' record"",""when"":""I tap 'Reject', enter a reason, and confirm"",""then"":""The record's status reverts to its state before the correction was requested, an audit log is created with the reason, and the subordinate is notified.""},{""scenario"":""Supervisor attempts to reject a request without a reason"",""given"":""I am viewing the rejection confirmation dialog"",""when"":""I attempt to confirm without entering a reason"",""then"":""The action is blocked, and an error message indicates a reason is required.""}]","[""Implement 'Reject' button and reason modal on the correction request review screen (from US-046)"",""Develop a callable Cloud Function to handle the rejection atomically (revert status, create audit log, trigger notification)""]","[""All acceptance criteria validated and passing"",""Integration tests confirming the end-to-end flow are passing"",""Security rules have been written and tested"",""Story deployed and successfully verified in the staging environment""]"
"US-049","Core Attendance Workflow","Subordinate is notified of a correction request's outcome","Subordinate","As a Subordinate, I want to receive a push notification when my attendance correction request is either approved or rejected, so that I am immediately informed of the outcome.","Improves user experience by providing timely, proactive feedback and closes the communication loop for the correction workflow.","Should Have","5","[""US-047"",""US-048""]","[{""scenario"":""Notification for an approved correction request"",""given"":""a Subordinate has submitted a correction request"",""when"":""their Supervisor approves the request"",""then"":""the Subordinate's device receives a push notification: 'Your attendance correction for [Date] has been approved.'""},{""scenario"":""Notification for a rejected correction request"",""given"":""a Subordinate has submitted a correction request"",""when"":""their Supervisor rejects the request"",""then"":""the Subordinate's device receives a push notification: 'Your attendance correction for [Date] has been rejected.'""},{""scenario"":""Tapping notification deep-links into the app"",""given"":""the Subordinate has received a notification"",""when"":""the Subordinate taps on the notification"",""then"":""the application opens and navigates directly to the details screen for the specific attendance record.""}]","[""Develop a Cloud Function triggered on attendance document updates"",""The function should check for relevant status changes and send a push notification via FCM to the record owner"",""Implement deep linking in the Flutter app to handle notification taps""]","[""All acceptance criteria validated and passing on both iOS and Android"",""E2E tests confirming the entire flow are passing"",""Story deployed and verified in the staging environment""]"
"US-050","Administrative & Reporting Dashboard (Web)","Admin directly edits an attendance record with mandatory, auditable justification","Admin","As an Admin, I want to directly edit any employee's attendance record and provide a mandatory justification, so that I can correct data inaccuracies efficiently and maintain a fully auditable trail.","Ensures data accuracy for reporting and record-keeping, while creating a transparent and auditable trail for all high-privilege data modifications.","Must Have","5","[""US-059"",""US-051""]","[{""scenario"":""Admin successfully edits an attendance record"",""given"":""an Admin is viewing an attendance report"",""when"":""the Admin clicks 'Edit', modifies the check-out time, provides a justification (20+ characters), and saves"",""then"":""the attendance record is updated with the new time, a 'manually-corrected' flag is added, and a detailed entry is created in the audit log.""},{""scenario"":""Admin attempts to save an edit without a valid justification"",""given"":""an Admin has opened the edit modal"",""when"":""the Admin attempts to save with a justification shorter than 20 characters"",""then"":""the save is prevented, and an error message indicates the minimum character requirement.""}]","[""Implement an 'Edit' action and modal in the Admin's attendance report view"",""Develop a transactional callable Cloud Function to update the attendance record and create the audit log entry atomically""]","[""All acceptance criteria validated and passing"",""Unit tests for UI logic and Cloud Function achieve >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements validated"",""Story deployed and verified in the staging environment""]"
"US-051","Administrative & Reporting Dashboard (Web)","Admin views the audit log of data changes","Admin","As an Admin, I want to view a filterable and immutable audit log of all critical system actions, so that I can ensure compliance, maintain accountability, and troubleshoot issues.","Provides a trustworthy, unalterable record for audits, enhances accountability, and aids in troubleshooting administrative actions.","Must Have","8","[""US-050"",""US-047"",""US-008""]","[{""scenario"":""Admin views the audit log with default settings"",""given"":""I am an Admin on the web dashboard"",""when"":""I navigate to the 'Audit Log' section"",""then"":""I see a paginated list of audit log entries in reverse chronological order.""},{""scenario"":""Admin combines multiple filters"",""given"":""I am viewing the audit log"",""when"":""I apply a filter for a specific Actor AND a specific date range"",""then"":""the list updates to show only actions performed by that actor within that date range.""},{""scenario"":""Audit log is immutable from the UI"",""given"":""I am viewing the audit log report"",""when"":""I interact with the list of entries"",""then"":""there are no UI elements (e.g., 'Edit', 'Delete') that allow modification or deletion of a log entry.""}]","[""WI-004-02-04: Develop Audit Log Report"",""Update Firestore Security Rules for the `/auditLog` collection to be immutable (allow create; deny update, delete)""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for immutability and access control are implemented and tested"",""Required Firestore composite indexes are defined and deployed"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-052","Event Management","Supervisor creates a new event","Supervisor","As a Supervisor, I want to create a new event with a title, description, start time, and end time, so that I can formally schedule and communicate activities to my team members.","Enables formal scheduling of team activities, improving team coordination and providing context for attendance records.","Must Have","3","[]","[{""scenario"":""Supervisor successfully creates a single, non-recurring event"",""given"":""I am a Supervisor on the 'Create Event' screen"",""when"":""I enter valid details and tap 'Save'"",""then"":""A success notification is displayed, and a new document is created in the `/events` collection in Firestore.""},{""scenario"":""Attempting to save an event where the end time is before the start time"",""given"":""I am on the 'Create Event' screen"",""when"":""I select an 'End Time' that is earlier than the 'Start Time' and tap 'Save'"",""then"":""A validation error 'End time must be after start time' is displayed, and the event is not saved.""},{""scenario"":""A non-supervisor user cannot create an event"",""given"":""A user with the 'Subordinate' role is logged in"",""when"":""They attempt to access event creation functionality"",""then"":""The UI is not visible, and any direct API attempt is rejected by Firestore Security Rules.""}]","[""Implement 'Create Event' form/modal in the Supervisor's mobile UI"",""Implement Firestore Security Rules to enforce role-based creation of events""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for event creation are written and tested"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-053","Event Management","Supervisor creates a recurring event","Supervisor","As a Supervisor, I want to define recurrence rules (daily, weekly, monthly) when creating an event, so that I can efficiently schedule regular activities without manual repetition.","Reduces administrative time spent on scheduling repetitive tasks, ensures consistency, and minimizes human error.","Should Have","5","[""US-052""]","[{""scenario"":""Supervisor creates a weekly recurring event for specific days"",""given"":""A Supervisor is on the 'Create Event' screen"",""when"":""the Supervisor enables 'Repeat', selects 'Weekly', checks 'Tuesday' and 'Thursday', and sets an end date"",""then"":""the system creates individual event instances for each Tuesday and Thursday within the specified period.""},{""scenario"":""Attempting to create a recurring event series longer than the allowed maximum"",""given"":""A Supervisor is creating a recurring event"",""when"":""they set an 'End Date' more than 1 year after the 'Start Date'"",""then"":""the system displays a validation error 'Recurring events cannot span more than one year' and prevents saving.""}]","[""Enhance the 'Create Event' UI with recurrence rule options"",""Develop a Cloud Function, triggered on the creation of a 'master' event, to generate all individual event instances in Firestore""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function's date logic implemented with >80% coverage"",""Integration testing of the end-to-end flow completed successfully"",""Story deployed and verified in the staging environment""]"
"US-054","Event Management","Supervisor assigns an event to specific individuals","Supervisor","As a Supervisor, I want to select one or more specific individuals from my team(s) when creating an event, so that I can accurately assign tasks to only the relevant team members.","Enables targeted task management and precise scheduling, improving operational efficiency and communication.","Must Have","5","[""US-052""]","[{""scenario"":""Supervisor assigns a new event to multiple individuals"",""given"":""A Supervisor is on the 'Create Event' screen"",""when"":""The Supervisor selects two specific subordinates and saves the event"",""then"":""A new event document is created, and its 'assignedUserIds' array contains the IDs of the two selected subordinates.""},{""scenario"":""The list of assignable users is correctly scoped"",""given"":""A Supervisor is on the user assignment screen for an event"",""when"":""The application fetches the list of users"",""then"":""The list must only contain users for whom the 'supervisorId' field matches the current Supervisor's user ID.""}]","[""Enhance the 'Create Event' UI with a multi-select user list"",""Implement Firestore Security Rules to ensure a Supervisor can only query for their direct subordinates""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this feature are implemented and tested"",""E2E test: Supervisor assigns event, then assigned Subordinate logs in and confirms visibility"",""Story deployed and verified in the staging environment""]"
"US-055","Event Management","Supervisor assigns an event to an entire team","Supervisor","As a Supervisor, I want to assign an event to one or more of my teams in a single action, so that I can efficiently schedule activities for entire groups without selecting each member individually.","Increases operational efficiency for managers, minimizes human error, and streamlines communication of scheduled activities to large groups.","Should Have","5","[""US-011"",""US-052"",""US-057"",""US-058""]","[{""scenario"":""Supervisor assigns a new event to a single team"",""given"":""a Supervisor is on the 'Create Event' screen"",""when"":""the Supervisor selects one team they manage and saves the event"",""then"":""a new event document is created with the selected team's ID in the 'assignedTeamIds' array.""},{""scenario"":""Supervisor only sees teams they manage"",""given"":""a Supervisor is logged in and another team exists which they do not manage"",""when"":""the Supervisor views the 'Assign to Teams' list"",""then"":""the other team is not visible in the list of options.""}]","[""Enhance the 'Create Event' UI with a multi-select team list"",""Update Subordinate calendar view (US-057) and notification logic (US-058) to resolve team memberships""]","[""All acceptance criteria validated and passing"",""End-to-end test scenario (Supervisor assigns, Subordinate views) is passing"",""Security requirements validated via manual and automated tests"",""Story deployed and verified in the staging environment""]"
"US-056","Event Management","Subordinate links attendance to an event","Subordinate","As a Subordinate, I want to select from a list of my assigned events for the day when I check in, so that my attendance record accurately reflects the specific activity I am starting.","Enriches attendance data by adding context, enabling better reporting on time spent on specific tasks and providing supervisors greater visibility.","Should Have","5","[""US-028"",""US-054"",""US-057""]","[{""scenario"":""User with a single assigned event for the day links it during check-in"",""given"":""I am a Subordinate with one event assigned for today"",""when"":""I initiate the check-in process"",""then"":""I am shown a screen to link my check-in to that event. After confirming, a new attendance record is created with the `eventId` of the selected event.""},{""scenario"":""User with no assigned events for the day performs a check-in"",""given"":""I am a Subordinate with no events assigned for today"",""when"":""I initiate the check-in process"",""then"":""the system bypasses the event selection step and proceeds directly to check-in, creating a record with a null `eventId`.""}]","[""Modify the check-in workflow (from US-028) to include a conditional event selection step"",""Implement a Firestore query to fetch the user's events for the current day""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully for online and offline scenarios"",""Firestore security rules updated and tested"",""Story deployed and verified in the staging environment""]"
"US-057","Event Management","Subordinate views their event calendar","Subordinate","As a Subordinate, I want to view a calendar that displays all events I am assigned to, so that I can clearly see my work schedule and plan my activities.","Improves operational efficiency by providing employees with clear, self-service access to their work schedules.","Must Have","5","[""US-054"",""US-055""]","[{""scenario"":""Calendar displays both individually-assigned and team-assigned events"",""given"":""the Subordinate is assigned to 'Event A' individually and is a member of a team assigned to 'Event B'"",""when"":""they view their calendar"",""then"":""both 'Event A' and 'Event B' are present on their respective days.""},{""scenario"":""User views event details"",""given"":""the user is viewing the calendar"",""when"":""they tap on an event"",""then"":""a details view is displayed showing the event's title, description, and times in a read-only format.""},{""scenario"":""Calendar displays recurring events correctly"",""given"":""the user is assigned to an event that recurs every Monday"",""when"":""they view their calendar"",""then"":""the event is displayed on every Monday of that month.""}]","[""Implement a calendar screen in the Subordinate's mobile UI"",""Develop a complex Firestore query to fetch all events where the user's ID is in `assignedUserIds` OR one of their team IDs is in `assignedTeamIds`""]","[""All acceptance criteria validated and passing"",""Performance requirements (load times) verified on a physical test device"",""Firestore Security Rules for event data are written and tested"",""Story deployed and verified in the staging environment""]"
"US-058","Event Management","Subordinate receives a push notification for a new event","Subordinate","As a Subordinate, I want to receive a real-time push notification whenever a new event is assigned to me, so that I am immediately aware of changes to my schedule.","Improves timely communication of work assignments, reduces missed events, and increases user engagement.","Should Have","5","[""US-054"",""US-055""]","[{""scenario"":""Notification for direct event assignment"",""given"":""a Subordinate has granted notification permissions"",""when"":""a Supervisor creates a new event and assigns it directly to that Subordinate"",""then"":""the Subordinate's device receives a push notification containing the event title.""},{""scenario"":""Tapping notification opens the event calendar"",""given"":""the Subordinate has received a new event notification"",""when"":""the Subordinate taps the notification"",""then"":""the application launches and navigates directly to the user's event calendar view.""}]","[""Develop a Cloud Function triggered on event creation (`onCreate`)"",""The function will resolve all assigned users (direct and team-based) and send them a notification via FCM"",""Implement notification handling and deep-linking in the Flutter app""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Manual E2E tests confirm correct behavior for all scenarios"",""Story deployed and verified in the staging environment""]"
"US-059","Administrative & Reporting Dashboard (Web)","Admin views summary attendance reports on the web dashboard","Admin","As an Admin, I want to view aggregated summary reports of attendance for daily, weekly, and monthly periods, so that I can quickly assess workforce attendance trends and monitor overall presence.","Provides immediate, actionable insights into workforce attendance, enabling efficient monitoring, trend analysis, and proactive management.","Must Have","8","[""US-021"",""US-028""]","[{""scenario"":""Viewing a specific daily summary report"",""given"":""I am viewing the reports page"",""when"":""I select a specific past date"",""then"":""the dashboard updates to show the total active users, number of users who checked in, number of absent users, and attendance percentage for that day.""},{""scenario"":""Viewing a weekly summary report"",""given"":""I am viewing the reports page"",""when"":""I select a specific week"",""then"":""the dashboard displays the average daily attendance percentage and a trend chart visualizing daily attendance for that week.""}]","[""WI-004-02-02: Develop Attendance Summary Report"",""Implement a scheduled Cloud Function for daily data pre-aggregation to ensure report performance""]","[""All acceptance criteria validated and passing"",""Performance requirements verified against a large, seeded dataset"",""Security rules are in place and tested to ensure tenant data isolation"",""Story deployed and verified in the staging environment""]"
"US-060","Administrative & Reporting Dashboard (Web)","Admin filters attendance reports by multiple criteria","Admin","As an Admin, I want to apply filters for date range, user, team, and attendance status on the reporting dashboard, so that I can efficiently narrow down the data to find specific information.","Enables efficient and targeted data analysis, saving time, improving decision-making, and supporting audit/compliance tasks.","Must Have","5","[""US-059""]","[{""scenario"":""Filter by Date Range"",""given"":""the Admin is viewing an attendance report"",""when"":""the Admin selects a start date and an end date"",""then"":""the report data refreshes to display only records within the selected date range.""},{""scenario"":""Combine multiple filters (Date, Team, and Status)"",""given"":""the Admin is viewing an attendance report"",""when"":""the Admin selects a date range, a team, AND the 'rejected' status"",""then"":""the report refreshes to display only records that match ALL applied criteria.""}]","[""WI-004-02-01: Implement Generic Reporting Filter Component""]","[""All acceptance criteria validated and passing"",""All required Firestore composite indexes are defined and deployed"",""Performance requirements verified against a large dataset"",""Story deployed and verified in the staging environment""]"
"US-061","Administrative & Reporting Dashboard (Web)","Admin views a late arrival / early departure report","Admin","As an Admin, I want to view a 'Late Arrival / Early Departure' report, so that I can efficiently monitor employee punctuality and identify attendance patterns.","Provides actionable insights into workforce punctuality, enabling data-driven management decisions and supporting HR processes.","Should Have","5","[""US-072"",""US-069"",""US-060""]","[{""scenario"":""Correctly Identifying Late Arrivals"",""given"":""the tenant's working hours are set from 09:00 to 17:00"",""when"":""a user has a check-in time of 09:15"",""then"":""the report must list this record as a late arrival with a deviation of '15 minutes late'.""},{""scenario"":""Correctly Identifying Early Departures"",""given"":""the tenant's working hours are set from 09:00 to 17:00"",""when"":""a user has a check-out time of 16:30"",""then"":""the report must list this record as an early departure with a deviation of '30 minutes early'.""},{""scenario"":""No Working Hours Configured"",""given"":""the default working hours have NOT been configured"",""when"":""I navigate to the 'Late Arrival / Early Departure Report'"",""then"":""the system displays a message prompting me to configure working hours, and the report is not rendered.""}]","[""Develop 'Late Arrival / Early Departure' report page"",""Implement backend logic (client-side or Cloud Function) to perform timezone-aware calculations against configured working hours""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully"",""Security rules updated and tested"",""Story deployed and verified in the staging environment""]"
"US-062","Administrative & Reporting Dashboard (Web)","Admin views an exception report to identify anomalous attendance records","Admin","As an Admin, I want to view a dedicated exception report so that I can efficiently identify and review attendance records that deviate from the standard process.","Improves administrative efficiency by consolidating problematic records into a single view and enhances data integrity by enabling proactive identification of errors.","Should Have","5","[""US-031"",""US-032"",""US-033"",""US-050"",""US-060""]","[{""scenario"":""Viewing the exception report with all exception types"",""given"":""there are attendance records with various exception flags"",""when"":""I navigate to the 'Exception Report'"",""then"":""the system displays a list of all records that have at least one flag: 'isOfflineEntry', 'auto-checked-out', 'manually-corrected', or 'clock_discrepancy'.""},{""scenario"":""Filtering the report by a single exception type"",""given"":""I am viewing the Exception Report"",""when"":""I use the filter to select only 'Missed Check-out' ('auto-checked-out' flag)"",""then"":""the report updates to show only the records that have that specific flag.""}]","[""WI-004-02-03: Develop Exception Report""]","[""All acceptance criteria validated and passing"",""Required Firestore indexes are defined and deployed"",""E2E tests for filtering and viewing the report are passing"",""Story deployed and verified in the staging environment""]"
"US-063","Administrative & Reporting Dashboard (Web)","Admin views and filters the audit log report","Admin","As an Admin, I want to access a detailed and filterable audit log report, so that I can review all critical system actions, ensure compliance, and investigate any changes made within my organization's tenant for security and accountability purposes.","Provides a tamper-proof record of critical activities for security audits, compliance verification (e.g., GDPR), accountability, and troubleshooting administrative actions.","Must Have","5","[""US-050"",""US-008""]","[{""scenario"":""Admin accesses the audit log report and views records"",""scenario_type"":""Happy_Path"",""given"":""the Admin is logged in and is on the web dashboard"",""when"":""the Admin navigates to the 'Audit Log Report' section"",""then"":""the system displays a list of audit log entries in reverse chronological order (newest first)""},{""scenario"":""Admin combines multiple filters"",""scenario_type"":""Happy_Path"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin applies a date range filter AND a user filter"",""then"":""the list of entries updates to show only records that satisfy both criteria""},{""scenario"":""Audit log data is paginated"",""scenario_type"":""Alternative_Flow"",""given"":""the audit log contains more records than the page limit (e.g., 50)"",""when"":""the Admin views the audit log report"",""then"":""the system displays the first page of results and provides pagination controls (e.g., 'Next', 'Previous', page numbers) to navigate through the full result set""}]","[""WI-004-02-04: Develop Audit Log Report""]","[""All acceptance criteria validated and passing"",""Performance requirements (query speed) verified"",""Security requirements (role access, immutability) validated"",""All necessary Firestore indexes are defined in IaC and deployed"",""Story deployed and verified in the staging environment""]"
"US-064","Administrative & Reporting Dashboard (Web)","Admin exports a report to CSV","Admin","As an Admin, I want to export the data from any report view on the web dashboard into a CSV file, so that I can perform offline analysis, share the data with stakeholders, or use it in other business tools.","Enables data portability for offline analysis, custom reporting, auditing, and integration with external business processes (e.g., payroll data preparation).","Should Have","5","[""US-059"",""US-060"",""US-061"",""US-062"",""US-063""]","[{""scenario"":""Exporting a filtered report"",""scenario_type"":""Happy_Path"",""given"":""an Admin is viewing the 'Attendance Summary' report, filtered for 'Team Alpha' and the previous month"",""when"":""the Admin clicks the 'Export to CSV' button"",""then"":""a file download is initiated by the browser and the data rows in the CSV correspond exactly to the filtered data for 'Team Alpha' from the previous month.""},{""scenario"":""Exporting a report with no data"",""scenario_type"":""Edge_Case"",""given"":""an Admin is viewing a report with filters applied that result in zero records being displayed"",""when"":""the Admin clicks the 'Export to CSV' button"",""then"":""a CSV file is downloaded containing only the header row and no data rows.""}]","[""WI-004-02-05: Implement CSV Export Functionality""]","[""All acceptance criteria validated and passing"",""Manual testing confirms correct functionality and file integrity on all target browsers"",""Performance requirements verified for moderately sized reports"",""Security requirements validated (role-based access)"",""Story deployed and verified in staging environment""]"
"US-065","External Integrations","Admin configures automatic data export to Google Sheets","Admin","As an Admin, I want to configure a secure, automated, and scheduled export of approved attendance data to a Google Sheet, so that I can streamline our reporting process and perform custom analysis.","Automates data export, reducing manual effort and human error. Enables seamless integration with external business workflows (e.g., payroll, advanced analytics).","Should Have","13","[""US-021"",""US-039"",""US-066""]","[{""scenario"":""Admin successfully configures a new daily export"",""given"":""The Admin is on the 'Integrations' settings page."",""when"":""The Admin clicks 'Connect to Google Sheets', completes OAuth, provides a sheet name, selects a 'Daily' schedule, and saves."",""then"":""A new Google Sheet is created in the Admin's Drive, and the UI updates to show 'Active' status.""},{""scenario"":""Scheduled export function runs successfully"",""given"":""The Google Sheets export is configured and active, and there are new 'approved' records."",""when"":""The scheduled Cloud Function is triggered."",""then"":""The new 'approved' records are appended as new rows to the linked Google Sheet, and the 'Last Sync' timestamp is updated.""},{""scenario"":""Export fails because the target Google Sheet was deleted"",""given"":""The Admin has manually deleted the target Google Sheet."",""when"":""The next scheduled export function runs."",""then"":""The function fails, the integration status is updated to 'Error', and the Admin dashboard displays an alert (per US-067).""}]","[""WI-005-01-01: Implement Google OAuth 2.0 Flow for Sheets API"",""WI-005-01-02: Develop Scheduled Cloud Function for Google Sheets Export""]","[""All acceptance criteria validated and passing in a staging environment."",""Successful end-to-end integration test has been performed."",""Security review of the OAuth token handling process is complete and approved."",""The feature is deployed and verified in the staging environment.""]"
"US-066","External Integrations","Admin authorizes Google Drive/Sheets access via OAuth 2.0","Admin","As an Admin, I want to initiate a secure OAuth 2.0 flow to authorize the application to access my Google Drive and Sheets, so that I can enable the automated export of attendance data without compromising my account credentials.","Enables the core functionality of automated data export (US-065) by establishing a secure, user-consented connection to Google services.","Should Have","5","[""US-065""]","[{""scenario"":""Successful Authorization Flow"",""given"":""The Admin is on the 'Data Export' page where the integration is 'Not Connected'."",""when"":""The Admin clicks 'Connect to Google Sheets', authenticates with Google, and grants permissions."",""then"":""The Admin is redirected back, a success notification is displayed, and the UI updates to 'Connected' status.""},{""scenario"":""User Denies Permission"",""given"":""The Admin is on the Google OAuth consent screen."",""when"":""The Admin clicks 'Deny' or closes the window."",""then"":""The Admin is redirected back, an 'Authorization was cancelled' message is displayed, and the status remains 'Not Connected'.""},{""scenario"":""Secure Token Exchange"",""given"":""The Admin has granted permission and been redirected back with an authorization code."",""when"":""The client sends the code to a secure backend Cloud Function."",""then"":""The Cloud Function exchanges the code for a refresh token and securely stores it server-side.""}]","[""WI-005-01-01: Implement Google OAuth 2.0 Flow for Sheets API""]","[""All acceptance criteria validated and passing"",""Integration testing of the full OAuth flow completed successfully"",""Security requirements validated, including secure storage of secrets and tokens"",""Story deployed and verified in the staging environment""]"
"US-067","External Integrations","Admin is alerted to a Google Sheets sync failure","Admin","As an Admin, I want to be proactively notified with a persistent alert on my web dashboard whenever the Google Sheets sync process fails, so that I can immediately investigate and take corrective action.","Prevents silent data integration failures, ensuring the integrity and timeliness of external reports. This builds trust and allows for rapid resolution of issues.","Should Have","5","[""US-065"",""US-066"",""US-068""]","[{""scenario"":""Alert is displayed when sync fails due to revoked permissions"",""given"":""The scheduled export function fails because OAuth permissions were revoked."",""when"":""The function executes."",""then"":""The function updates the integration status to 'error' in Firestore, and the Admin dashboard displays a prominent alert banner.""},{""scenario"":""Alert persists across sessions until the issue is resolved"",""given"":""A sync failure has occurred and the alert banner is visible."",""when"":""The Admin logs out and logs back in."",""then"":""The alert banner must be visible again, as the underlying error state has not been resolved.""},{""scenario"":""Alert is automatically removed after a successful sync"",""given"":""A sync failure has occurred and the alert banner is visible."",""when"":""The issue is resolved and the next scheduled sync completes successfully."",""then"":""The function updates the status to 'active', and the alert banner is no longer displayed on the dashboard.""}]","[""WI-005-01-03: Implement Error Handling and Alerting for Sheets Sync""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""UI reviewed and approved"",""Story deployed and verified in the staging environment via a full E2E test case""]"
"US-068","External Integrations","Admin re-authorizes Google Sheets sync after a failure","Admin","As an Admin, I want to be prompted with clear actions to re-authenticate or link a new Google Sheet when the data sync fails, so that I can quickly restore the automated reporting feature.","Ensures the reliability and continuity of the automated reporting feature by providing a self-service recovery path, maintaining trust in the application.","Should Have","5","[""US-067""]","[{""scenario"":""Admin successfully re-authenticates after a token revocation failure"",""given"":""the Google Sheets sync status is 'error' due to 'AUTH_ERROR'"",""when"":""the Admin clicks 'Re-authenticate' and successfully completes the Google OAuth 2.0 flow"",""then"":""the system updates the stored token, the sync status is updated to 'active', and the error alert is removed.""},{""scenario"":""System triggers a catch-up sync after successful recovery"",""given"":""the Google Sheets sync has been restored and records previously failed to sync"",""when"":""the next scheduled sync job runs"",""then"":""the system exports all previously failed records to the Google Sheet without creating duplicates.""}]","[""Implement recovery action buttons ('Re-authenticate', 'Link New Sheet') in the Google Sheets alert banner (WI-005-01-03)"",""Update the OAuth Cloud Function (WI-005-01-01) to handle re-authentication"",""Update the export Cloud Function (WI-005-01-02) to handle catch-up syncs""]","[""All acceptance criteria validated and passing"",""Integration testing for the full recovery flow completed successfully"",""Security requirements, especially OAuth token handling, validated"",""Story deployed and verified in the staging environment""]"
"US-069","Administrative & Reporting Dashboard (Web)","Admin configures the organization's timezone","Admin","As an Admin, I want to select and save a default timezone for my organization so that all time-based calculations, business rules, and reports are consistent and accurate for all users.","Ensures data integrity and consistency for all time-related data. Critical for accurate reporting, correct application of business rules, and event scheduling.","Must Have","2","[""US-021""]","[{""scenario"":""Admin successfully sets the organization's timezone"",""given"":""I am an Admin on the 'Tenant Settings' page"",""when"":""I select 'America/New_York' from the dropdown and click 'Save'"",""then"":""I see a success notification, and the tenant's configuration in Firestore is updated with the value 'America/New_York'.""},{""scenario"":""Non-Admin user attempts to access timezone settings"",""given"":""A user with a 'Supervisor' role is logged in"",""when"":""They attempt to navigate to the 'Tenant Settings' page"",""then"":""They are redirected or shown a 'Permission Denied' error.""}]","[""Implement Timezone selection UI in the Tenant Settings Configuration Page (WI-004-01-04)""]","[""All acceptance criteria validated and passing"",""Firestore security rules written and tested to protect the configuration document"",""Integration testing completed to verify a dependent feature uses the timezone correctly"",""Story deployed and verified in the staging environment""]"
"US-070","Administrative & Reporting Dashboard (Web)","Admin configures the auto-checkout time","Admin","As an Admin, I want to configure a specific time of day for automatic check-outs, so that I can ensure all employee attendance records are closed for the day, improving data accuracy.","Improves data integrity by preventing open-ended attendance records. Reduces administrative overhead by automating the correction of forgotten check-outs.","Should Have","2","[""US-069""]","[{""scenario"":""Admin enables and sets the auto-checkout time"",""given"":""I am an Admin on the 'Tenant Settings' page"",""when"":""I enable 'Automatic Check-out', select '17:30', and click 'Save'"",""then"":""I see a success message and the settings are saved.""},{""scenario"":""Admin disables the auto-checkout feature"",""given"":""The 'Automatic Check-out' feature is enabled"",""when"":""I disable the feature using the toggle and click 'Save'"",""then"":""I see a success message, and the time picker becomes disabled.""}]","[""Implement Auto-Checkout UI in the Tenant Settings Configuration Page (WI-004-01-04)""]","[""All acceptance criteria validated and passing"",""Integration testing confirms the scheduled function (US-032) correctly reads the value"",""Firestore security rules are implemented and tested"",""Story deployed and verified in the staging environment""]"
"US-071","Administrative & Reporting Dashboard (Web)","Admin configures the approval escalation period","Admin","As an Admin, I want to configure the approval escalation period in days, so that pending attendance records are automatically escalated if not actioned in a timely manner.","Improves operational efficiency by preventing bottlenecks in the attendance approval workflow and ensures timely processing of all records.","Could Have","1","[""US-021""]","[{""scenario"":""Admin successfully sets a valid escalation period"",""given"":""The Admin is on the 'Tenant Settings' page"",""when"":""The Admin enters '3' into the 'Approval Escalation Period' field and clicks 'Save'"",""then"":""The system displays a success notification and the value '3' is persisted in Firestore.""},{""scenario"":""Admin attempts to save a value less than one"",""given"":""The Admin is on the 'Tenant Settings' page"",""when"":""The Admin enters '0' and attempts to save"",""then"":""The system prevents the save and displays an error: 'Value must be 1 or greater.'""}]","[""Implement Approval Escalation Period UI in the Tenant Settings Configuration Page (WI-004-01-04)""]","[""All acceptance criteria validated and passing"",""Security requirements validated"",""Story deployed and verified in the staging environment""]"
"US-072","Administrative & Reporting Dashboard (Web)","Admin configures default working hours for reporting","Admin","As an Admin, I want to define default working hours and applicable days for my organization, so that the system can automatically generate reports on late arrivals and early departures.","Enables automated exception reporting, saving administrative time and providing key insights into workforce punctuality.","Should Have","2","[""US-069""]","[{""scenario"":""Admin successfully sets working hours"",""given"":""the Admin is on the 'Tenant Settings' page"",""when"":""the Admin enters '09:00' start, '17:30' end, selects Mon-Fri, and clicks 'Save'"",""then"":""a success notification is displayed and the configuration is saved to Firestore.""},{""scenario"":""Admin attempts to save with end time before start time"",""given"":""the Admin is on the 'Tenant Settings' page"",""when"":""the Admin sets start time to '17:00' and end time to '09:00' and clicks 'Save'"",""then"":""a validation error 'End time must be after start time' is displayed, and the data is not saved.""}]","[""Implement Working Hours UI in the Tenant Settings Configuration Page (WI-004-01-04)""]","[""All acceptance criteria validated and passing"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-073","Administrative & Reporting Dashboard (Web)","Admin configures the tenant's password policy","Admin","As an Admin, I want to configure and enforce a custom password policy for my organization, so that I can enhance account security and ensure compliance with my company's IT policies.","Provides organizations with direct control over their security posture, enabling them to enforce internal IT policies and meet external compliance requirements.","Should Have","8","[""US-021""]","[{""scenario"":""Admin successfully saves a new password policy"",""given"":""the Admin is on the 'Password Policy' settings page"",""when"":""the Admin changes the minimum length to '12' and requires all character types, then clicks 'Save'"",""then"":""a success notification is displayed, and the new policy is written to Firestore.""},{""scenario"":""New user registration enforces the custom password policy"",""given"":""the Admin has set a policy requiring 10 characters and a number"",""when"":""a new user registers with a compliant password like 'Password123!'"",""then"":""the password is accepted and the account is created.""},{""scenario"":""New user registration is blocked by a non-compliant password"",""given"":""the Admin has set a policy requiring 10 characters and a number"",""when"":""a new user registers with a non-compliant password like 'Password!'"",""then"":""a validation error 'Password must contain at least one number' is displayed, and account creation is blocked.""}]","[""Implement Password Policy UI in the Tenant Settings Configuration Page (WI-004-01-04)"",""WI-002-01-05: Implement `beforeCreate` Auth Blocking Function for Password Policy to enforce rules server-side""]","[""All acceptance criteria validated and passing"",""Integration testing completed for the Admin UI -> Firestore -> Auth Function flow"",""Security requirements validated, including server-side enforcement"",""Story deployed and verified in the staging environment""]"
"US-074","Administrative & Reporting Dashboard (Web)","Admin configures data retention periods for attendance and audit logs","Admin","As an Admin, I want to configure specific retention periods for attendance records and audit logs, so that I can ensure my organization complies with data governance policies and regulations.","Enables compliance with data protection regulations (e.g., GDPR), enforces internal data governance policies, and reduces long-term data storage costs.","Could Have","5","[""US-021""]","[{""scenario"":""Admin successfully updates and saves a retention period"",""given"":""the Admin is viewing the 'Data Retention' settings page"",""when"":""the Admin changes the retention for 'Attendance Records' to '3' years and clicks 'Save'"",""then"":""the system displays a success notification and the new value is persisted in Firestore.""},{""scenario"":""Admin attempts to save an invalid (non-positive) retention period"",""given"":""the Admin is viewing the 'Data Retention' settings page"",""when"":""the Admin enters '0' into a retention period field and clicks 'Save'"",""then"":""a validation error 'Value must be greater than 0' is displayed and the save is prevented.""}]","[""Implement Data Retention UI in the Tenant Settings Configuration Page (WI-004-01-04)"",""Develop a scheduled Cloud Function to read these settings and perform data purging/anonymization""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements validated"",""Story deployed and verified in the staging environment""]"
"US-075","External Integrations","User views a map of their check-in/check-out location","User","As a User (Subordinate, Supervisor, or Admin), I want to view the captured GPS coordinates for a check-in and check-out action as pins on an interactive map so that I can visually confirm the accuracy of the location data.","Increases user trust and data transparency by providing intuitive, visual confirmation of captured locations. Reduces potential disputes and the need for attendance corrections.","Should Have","5","[""US-028"",""US-029""]","[{""scenario"":""Display map with both check-in and check-out locations"",""given"":""a user is viewing an attendance record with valid GPS coordinates for both check-in and check-out"",""when"":""the attendance detail screen loads"",""then"":""a map is displayed showing two distinct pins for the check-in and check-out locations, zoomed to encompass both.""},{""scenario"":""User interacts with a location pin"",""given"":""a map is displayed with one or more pins"",""when"":""the user taps on a pin"",""then"":""an info window appears above the pin, displaying the action type ('Check-In' or 'Check-Out') and the timestamp.""},{""scenario"":""Device is offline when viewing the map"",""given"":""the user's device is offline"",""when"":""the user navigates to an attendance detail screen"",""then"":""the map area displays a placeholder with a message like 'Map cannot be loaded. Please check your internet connection.'""}]","[""WI-005-02-01: Integrate Google Maps for Location Visualization""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully on both Android and iOS physical devices"",""Security review of API key handling completed"",""Story deployed and verified in the staging environment""]"
"US-076","User Experience","User is prompted to grant location permissions before using location-based features","First-time User","As a first-time user, I want to be prompted to grant location permissions when I first attempt to use a location-based feature, so that I understand why my location is needed and can explicitly consent to its use.","Ensures compliance with platform policies and data privacy regulations. Builds user trust through transparency and enables the core GPS-based attendance functionality.","Must Have","3","[""US-021""]","[{""scenario"":""User grants 'While Using the App' permission on first attempt"",""given"":""A user has not yet been asked for location permissions"",""when"":""The user taps a UI element that requires location (e.g., 'Check-In')"",""then"":""The native OS location permission dialog is displayed. If granted, the action proceeds.""},{""scenario"":""User denies location permission"",""given"":""The native OS location permission dialog is displayed"",""when"":""The user selects 'Deny'"",""then"":""The dialog is dismissed, the location-dependent action is blocked, and an in-app message explains why the feature is unavailable.""}]","[""Integrate a permissions-handling package (e.g., `permission_handler`) into the Flutter app"",""Configure native project files (Info.plist, AndroidManifest.xml) with appropriate permission declarations and usage descriptions""]","[""All acceptance criteria validated and passing"",""E2E tests for all major permission flows are implemented and passing"",""Story successfully tested and verified on physical devices for both platforms"",""Story deployed and verified in the staging environment""]"
"US-077","User Experience","Guide user to device settings when location permission is denied","Mobile App User","As a mobile app user, I want to be shown a helpful message with a direct link to my device's app settings if I have previously denied location permissions, so that I can easily enable them and use core features.","Improves usability and user retention by providing a clear, low-friction recovery path for a common error. Reduces user frustration and support requests.","Should Have","3","[""US-076"",""US-028""]","[{""scenario"":""User attempts a location-based action with permissions permanently denied"",""given"":""The user has previously denied location permissions"",""when"":""The user taps a button that requires location services, such as 'Check-In'"",""then"":""A modal dialog is displayed, explaining why location is required and providing an 'Open Settings' button.""},{""scenario"":""User is successfully navigated to the OS app settings screen"",""given"":""The permission guidance dialog is displayed"",""when"":""The user taps the 'Open Settings' button"",""then"":""The application deep-links the user directly to the app's specific settings page within the device's OS.""}]","[""Update the permissions-handling logic to detect a 'permanently denied' state"",""Implement a UI dialog that uses a package (e.g., `permission_handler`) to open app settings""]","[""All acceptance criteria validated and passing on supported iOS and Android versions"",""Manual end-to-end testing completed successfully on physical devices"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-078","User Experience","User interacts with an accessible application compliant with WCAG 2.1 AA standards","User with a disability","As a user with a disability (such as visual or motor impairment), I want the application to adhere to established accessibility standards, including screen reader compatibility and sufficient color contrast, so that I can independently and effectively use all of its features.","Ensures the application is inclusive and usable by the widest possible audience, mitigates legal risk, and improves overall application usability.","Must Have","13","[]","[{""scenario"":""Screen Reader Compatibility for Interactive Elements"",""given"":""A user has a screen reader (e.g., VoiceOver, TalkBack) enabled"",""when"":""The user navigates to any interactive element (button, text field, toggle)"",""then"":""The screen reader clearly announces the element's name, role, and state.""},{""scenario"":""Sufficient Color Contrast for Readability"",""given"":""A user is viewing any screen in the application"",""when"":""Text or a meaningful icon is displayed"",""then"":""The contrast ratio meets or exceeds WCAG 2.1 AA standards (4.5:1 for normal text).""},{""scenario"":""Adequate Touch Target Size for All Controls"",""given"":""A user is interacting with any screen"",""when"":""The user attempts to tap a button or icon"",""then"":""The interactive area for the control is at least 44x44 pixels (dp/pt).""}]","[""Conduct a full accessibility audit of all application screens"",""Add semantic labels and properties to all Flutter widgets"",""Adjust color palettes to meet contrast ratio requirements"",""Increase touch target sizes for all interactive elements""]","[""An accessibility checklist based on WCAG 2.1 AA has been created and applied to all screens"",""Full application walkthrough using VoiceOver and TalkBack completed successfully"",""Verification of color contrast ratios on all screens"",""The application is verified as accessible in the staging environment""]"
"US-079","User Experience","User adjusts the application's text size based on device settings","User with visual impairments","As a user, I want the application's text to scale according to my device's system-wide font size settings so that I can adjust the text to a comfortable size for me.","Improves application accessibility and usability, ensuring compliance with WCAG 2.1 standards (1.4.4 Resize text). This broadens the user base and enhances user satisfaction.","Should Have","5","[]","[{""scenario"":""Text scales up when device font size is increased"",""given"":""The user has the application open"",""when"":""the user navigates to their device's system settings and increases the font size"",""then"":""all text within the application renders at the new, larger size, and the UI layout reflows gracefully without horizontal scrolling or truncation.""},{""scenario"":""Layout remains usable at maximum accessibility font size"",""given"":""The user has the application open"",""when"":""the user sets their device's font size to the maximum accessibility setting"",""then"":""no text overlaps, and all interactive elements remain visible and tappable.""}]","[""Audit all application screens to ensure they use responsive layout widgets (Flexible, Expanded, Wrap)"",""Ensure all text widgets correctly respect `MediaQuery.textScaleFactor`"",""Manually test all primary user flows at minimum, default, and maximum font sizes""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Manual end-to-end testing completed for all primary user flows at various font sizes"",""No layout overflows or usability issues are present"",""Story deployed and verified in the staging environment""]"
"US-080","Tenant & User Lifecycle Management","User enables multi-factor authentication for enhanced account security","Security-conscious User","As a security-conscious user, I want to enable multi-factor authentication (MFA) by verifying my phone number, so that I can add an extra layer of security to my account and prevent unauthorized access.","Increases the security of user accounts and protects sensitive organizational data, reducing the risk of data breaches and enhancing customer trust.","Should Have","8","[""US-017""]","[{""scenario"":""User successfully enables MFA with a valid phone number and OTP"",""given"":""I am on the security settings screen and MFA is disabled"",""when"":""I tap 'Enable MFA', enter a valid phone number, receive an OTP, and enter the correct OTP"",""then"":""I see a success message, and the screen updates to show that MFA is 'Enabled' with a masked phone number.""},{""scenario"":""MFA is enforced during a subsequent login attempt"",""given"":""I have enabled MFA and logged out"",""when"":""I enter my correct email and password"",""then"":""I am redirected to a screen prompting me to enter a verification code sent to my phone.""},{""scenario"":""User is temporarily locked out after too many incorrect OTP attempts"",""given"":""I am on the OTP entry screen"",""when"":""I enter an incorrect OTP 5 consecutive times"",""then"":""I am prevented from making further attempts for 15 minutes and see a lockout message.""}]","[""Configure Firebase Authentication to support Phone Number as a second factor"",""Implement MFA management UI in the user profile settings screen"",""Modify the login flow to handle the MFA challenge""]","[""All acceptance criteria validated and passing on both iOS and Android"",""E2E test successfully completed on a physical device in the staging environment"",""Security requirements, including rate-limiting and anti-abuse, are validated"",""Story deployed and verified in the staging environment""]"
"US-081","User Experience","Admin is notified of planned maintenance","Admin","As an Admin, I want to receive clear, timely notifications about planned system maintenance, so that I can proactively inform my users and manage expectations.","Improves customer trust and satisfaction by providing proactive communication. Reduces operational disruption and minimizes support inquiries during maintenance periods.","Could Have","5","[""US-021""]","[{""scenario"":""Admin receives an email notification for upcoming maintenance"",""given"":""A maintenance window is scheduled by a system operator at least 48 hours in the future"",""when"":""The system's notification process runs"",""then"":""The Admin receives an email with the maintenance start time, end time, and expected service impact.""},{""scenario"":""Admin sees an in-app banner notification in the web dashboard"",""given"":""An Admin is logged in and a maintenance window is scheduled within the next 7 days"",""when"":""The Admin loads the dashboard"",""then"":""A persistent, non-dismissible banner is displayed at the top of the screen with maintenance details.""},{""scenario"":""User attempts to access the system during an active maintenance window"",""given"":""A system-wide maintenance window is currently in effect"",""when"":""Any user attempts to log in"",""then"":""They are presented with a user-friendly maintenance page indicating the system is temporarily unavailable.""}]","[""Create a Firestore collection to store maintenance window data"",""Develop a scheduled Cloud Function to send email notifications to Admins"",""Implement a persistent banner in the Admin web dashboard that reads maintenance data"",""Modify the core authentication flow to redirect to a static maintenance page if a window is active""]","[""All acceptance criteria validated and passing"",""Integration testing between Cloud Function, Firestore, and SendGrid completed successfully"",""E2E tests for the full notification and maintenance page flow are passing"",""Story deployed and verified in the staging environment""]"
"US-082","Data Management","Admin downloads a CSV template for data migration","Admin","As an Admin, I want to download a predefined CSV template for user and team data, so that I can correctly format my existing data for a successful bulk import.","Streamlines the tenant onboarding process by providing a clear, error-reducing template for data migration, enhancing user experience and reducing support load.","Should Have","1","[""US-021""]","[{""scenario"":""Admin successfully downloads the CSV template"",""given"":""I am an Admin on the 'Data Import' page"",""when"":""I click the 'Download CSV Template' button"",""then"":""my browser initiates a download of a file named 'user_team_import_template.csv'.""},{""scenario"":""Downloaded template has the correct headers"",""given"":""I have downloaded the template file"",""when"":""I open the file"",""then"":""the first row must contain: 'email', 'firstName', 'lastName', 'role', 'supervisorEmail', 'teamName'.""}]","[""Add a 'Download Template' button to the Admin web dashboard"",""Host the static CSV template file in Firebase Storage or as a project asset""]","[""All acceptance criteria validated and passing"",""Security requirement (Admin-only access) validated"",""The final CSV template file is checked into the repository or uploaded to Firebase Storage"",""Story deployed and verified in staging environment""]"
"US-083","Data Management","Admin uploads a CSV file to bulk-create users and teams","Admin","As an Admin, I want to upload a CSV file containing user and team information, so that I can efficiently bulk-create accounts, define team structures, and automatically send registration invitations.","Reduces manual effort and potential for error when onboarding multiple users, improving administrative efficiency and scalability for larger organizations.","Should Have","8","[""US-082"",""US-004"",""US-011"",""US-016""]","[{""scenario"":""Successful bulk import of new users and new teams"",""given"":""The Admin uploads a correctly formatted CSV file"",""when"":""The import process runs"",""then"":""The system initiates an asynchronous background job, and upon completion, user and team documents are created in Firestore and invitation emails are sent.""},{""scenario"":""Processing a CSV with some invalid data rows"",""given"":""The Admin uploads a CSV with a mix of valid and invalid rows"",""when"":""The import process runs"",""then"":""The system successfully processes all valid rows, and the final summary report (US-084) lists which rows failed with specific reasons.""},{""scenario"":""Attempting to create a circular reporting structure"",""given"":""The Admin uploads a CSV where User A's supervisor is User B, and User B's supervisor is User A"",""when"":""The import process runs"",""then"":""The system detects the circular dependency, and the summary report (US-084) indicates the rows failed.""}]","[""Implement a file upload component in the Admin dashboard"",""Develop a Cloud Function triggered by file upload to Cloud Storage"",""The function will parse the CSV, validate each row, check for duplicates and circular dependencies, and perform batched writes to Firestore""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function's parsing and validation logic are implemented with >= 80% coverage"",""Integration testing using the Firebase Emulator Suite is completed successfully"",""E2E test case for the happy path upload scenario is created and passing"",""Story deployed and verified in the staging environment""]"
"US-084","Data Management","Admin reviews a data import summary report","Admin","As an Admin, I want to see a detailed summary report immediately after uploading a user and team data file, so that I can quickly verify which records were successful and diagnose errors for any that failed.","Improves the efficiency and accuracy of the tenant onboarding process by providing immediate, actionable feedback on bulk data imports.","Should Have","8","[""US-083""]","[{""scenario"":""Partial success with some failed records"",""given"":""an Admin has uploaded a CSV with a mix of valid and invalid records"",""when"":""the import process completes"",""then"":""the summary report accurately displays the total, success, and fail counts, with a detailed list of failed records showing the original row, problematic data, and a clear error message.""},{""scenario"":""Admin downloads the failed records report"",""given"":""an Admin is viewing an import summary with failed records"",""when"":""the Admin clicks 'Download Failed Records'"",""then"":""a CSV file is downloaded containing the full data from the failed rows plus an 'Error' column detailing the failure reason.""},{""scenario"":""UI handling for asynchronous processing"",""given"":""an Admin has just uploaded a large CSV file"",""when"":""the backend is processing the data"",""then"":""the UI displays a 'Processing...' state, and automatically updates to show the final summary report upon completion.""}]","[""The CSV processing Cloud Function (from US-083) must write its results to a temporary Firestore document"",""Implement a results page/modal in the Admin dashboard that listens for real-time updates on the results document"",""Develop a Cloud Function to generate and serve the downloadable failed records CSV""]","[""All acceptance criteria validated and passing"",""Integration testing of the full upload-process-report flow completed successfully"",""E2E test scenario for a partial failure and report download is automated and passing"",""UI reviewed and approved for clarity and usability"",""Story deployed and verified in staging environment""]"
"US-085","User Experience","User accesses role-based training materials from a centralized help section","User","As a user (Admin, Supervisor, or Subordinate), I want to access a 'Help & Training' section within the application so that I can easily find guides and videos relevant to my role.","Improves user onboarding and proficiency, reduces customer support load by enabling self-service, and increases user satisfaction.","Could Have","3","[""US-021""]","[{""scenario"":""Subordinate views their specific training materials"",""given"":""I am logged in with the 'Subordinate' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see a list of materials tagged for the 'Subordinate' role, such as the 'Subordinate Quick Start Guide'.""},{""scenario"":""Supervisor views their own and their subordinates' training materials"",""given"":""I am logged in with the 'Supervisor' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see a list of materials for the 'Supervisor' role and a separate list for the 'Subordinate' role.""},{""scenario"":""User opens a PDF training guide"",""given"":""I am viewing the list of training materials"",""when"":""I tap on an item that is a PDF guide"",""then"":""The PDF document opens successfully in a native viewer within the app.""}]","[""Create a Firestore collection to store metadata for training materials (title, URL, type, target roles)"",""Implement a 'Help & Training' screen in the Flutter app that queries this collection based on user role"",""Integrate Flutter packages for launching URLs and displaying PDFs""]","[""All acceptance criteria validated and passing on both mobile platforms and the web dashboard"",""Integration testing completed successfully for opening PDFs and videos"",""UI reviewed and approved"",""Story deployed and verified in the staging environment""]"
"US-086","Data Management","User's personal data is anonymized after deactivation and retention period","Deactivated User","As a deactivated user, I want my personally identifiable information (PII) to be automatically and permanently anonymized by the system after a defined data retention period, so that my privacy is protected in accordance with data protection regulations.","Ensures compliance with data protection regulations (e.g., GDPR's Right to Erasure), mitigates data breach risks, and builds user trust.","Should Have","13","[""US-008"",""US-074"",""US-051""]","[{""scenario"":""Successful anonymization of a deactivated user after the retention period expires"",""given"":""A user has been 'deactivated' for longer than the tenant's configured retention period"",""when"":""The scheduled data anonymization Cloud Function runs"",""then"":""PII fields in the user's document (`name`, `email`) are overwritten, and references to their `userId` in other collections are updated to a non-reversible, anonymized identifier.""},{""scenario"":""User within the retention period is not anonymized"",""given"":""A user has been 'deactivated' for less than the retention period"",""when"":""The scheduled anonymization function runs"",""then"":""The user's data remains completely unchanged.""},{""scenario"":""Admin views historical records of an anonymized user"",""given"":""A user's data has been anonymized"",""when"":""An Admin views a historical report including records from that user"",""then"":""The user's name is displayed as 'Anonymized User'.""}]","[""Develop a scheduled Cloud Function to query for eligible deactivated users"",""Implement logic to perform a 'find and replace' for the `userId` across all relevant Firestore collections (users, attendance, auditLog, etc.)"",""The operation must be idempotent and handle large data volumes using batching""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function logic implemented with >80% coverage"",""Integration testing completed successfully against the Firebase Emulator Suite"",""The process is confirmed to be idempotent"",""Story deployed and verified in staging environment""]"
"US-087","Billing & Subscriptions","Admin is alerted when tenant usage approaches cost-incurring levels","Admin","As an Admin, I want to receive automated alerts when my organization's resource usage approaches the limits of our subscription tier, so that I can proactively manage consumption and avoid unexpected charges.","Provides financial predictability for customers, builds trust through cost transparency, and creates natural opportunities for upselling to higher tiers.","Could Have","13","[""US-001""]","[{""scenario"":""Admin receives an alert when a usage metric reaches the first threshold (80%)"",""given"":""An organization is on a tier with a limit of 100,000 Firestore reads and an alert threshold at 80%"",""when"":""The organization's aggregated read count reaches 80,000"",""then"":""An email notification is sent to all Admins for that tenant, and a persistent banner appears on their web dashboard.""},{""scenario"":""Alerts are sent to all Admins of a tenant"",""given"":""A tenant has three users with the 'Admin' role"",""when"":""A usage threshold is crossed for that tenant"",""then"":""All three Admins receive the identical email notification and see the dashboard banner.""},{""scenario"":""Usage alerts are cleared at the start of a new billing cycle"",""given"":""An Admin's dashboard is displaying a usage alert banner"",""when"":""The system date rolls over to the first day of the new billing cycle"",""then"":""The usage alert banner is automatically removed.""}]","[""Set up GCP Billing export to a BigQuery dataset"",""Develop a scheduled Cloud Function to process the BigQuery data, attribute usage to tenants, and compare against subscription limits"",""Integrate with SendGrid to send email alerts"",""Implement a persistent notification banner in the Admin web dashboard""]","[""All acceptance criteria validated and passing"",""Test the full integration flow: mock data -> scheduled function -> Firestore state update -> email -> UI update"",""Security review of the data access patterns completed"",""Story deployed and verified in the staging environment""]"