"story_id","epic","title","user_role","description","business_value","priority","story_points","dependencies","acceptance_criteria","technical_tasks","definition_of_done"
"US-001","Core Platform & Tenant Management","Admin registers a new organization tenant","Initial Admin User","As a new administrator, I want to register my organization by providing my details, a unique organization name, and selecting a data residency region, so that a new, isolated tenant is created for my company and I can begin configuring the system.","Enables new organizations to onboard themselves, creating the foundational tenant structure. This is the primary entry point for customer acquisition and is critical for the multi-tenant architecture.","Must Have","8","[]","[{""scenario"":""Successful registration with unique organization name"",""given"":""A potential administrator is on the registration page and has filled all required fields with valid data, including a globally unique organization name and a password meeting complexity requirements"",""when"":""The user clicks the 'Register' button"",""then"":""A new tenant document is created in Firestore, a new user is created in Firebase Authentication with the 'Admin' role, custom claims for tenantId and role are set on the user's auth token, the user is automatically logged in, and they are redirected to the Admin dashboard.""},{""scenario"":""Registration attempt with a duplicate organization name"",""given"":""An organization with the name 'Global Tech Inc.' already exists in the system"",""when"":""A new user enters 'Global Tech Inc.' as the organization name and submits the registration form"",""then"":""The system prevents form submission and displays an inline error message: 'Organization name is already taken. Please choose another.'""},{""scenario"":""Registration process creates all required data atomically"",""given"":""A user submits a valid registration form"",""when"":""An unexpected error occurs during the creation of the Firestore user document after the Firebase Auth user has been created"",""then"":""The entire transaction is rolled back, the Firebase Auth user is deleted, and no tenant or user documents are left in the database. The user is shown a generic error message like 'Registration failed. Please try again.'""}]","[""Implement Tenant Registration UI (Flutter for Web)"",""Create 'registerOrganization' callable Cloud Function in TypeScript"",""Implement atomic transaction for creating Auth user, Firestore user, and Tenant document"",""Implement server-side logic to set custom claims (tenantId, role) on the new Admin user""]","[""All acceptance criteria validated and passing"",""Unit tests for form validation and Cloud Function logic implemented with >80% coverage"",""Integration testing of the full registration flow completed successfully in the emulator suite"",""Security requirements, especially regarding custom claims and data handling, are validated"",""Story deployed and verified in the staging environment""]"
"US-002","Core Platform & Tenant Management","Admin is notified of a non-unique organization name during registration","Initial Admin User","As a Prospective Admin registering my organization for the first time, I want to be immediately notified if the organization name I enter is already in use, so that I can choose a unique name and complete the registration process without errors or confusion.","Ensures data integrity by enforcing unique tenant names, prevents user frustration during onboarding, and reduces potential support requests related to registration failures.","Must Have","3","[""US-001""]","[{""scenario"":""Duplicate organization name provided (case-insensitive)"",""given"":""an organization with the name 'Vandelay Industries' already exists in the system"",""when"":""a user enters 'vandelay industries' in the 'Organization Name' field and the field loses focus"",""then"":""an inline error message 'This organization name is already taken. Please choose another.' is displayed below the input field and the registration submission button is disabled.""},{""scenario"":""Validation in progress feedback"",""given"":""a user is on the new organization registration page"",""when"":""the user enters text into the 'Organization Name' field and the field loses focus, triggering the asynchronous validation check"",""then"":""a loading indicator is displayed next to the field until the validation check completes and is replaced by either a success or error indicator.""}]","[""Create a public-facing Cloud Function to handle the uniqueness check against the database"",""Implement an efficient query for uniqueness check (e.g., using a dedicated index collection)"",""Secure the public endpoint with rate limiting and/or Firebase App Check"",""Implement asynchronous state management (loading, success, error) on the client-side registration form""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for both frontend and backend logic with >80% coverage"",""Integration testing between the client and Cloud Function completed successfully"",""Performance requirements for the validation endpoint are verified"",""Security requirements (rate limiting, App Check) are implemented and validated""]"
"US-003","Core Platform & Tenant Management","Admin selects a data residency region during tenant creation","Initial Admin User","As an initial Admin registering my organization, I want to select a primary data residency region from a list of supported locations during the sign-up process so that I can ensure my organization's data is stored in a specific geographic area to comply with data sovereignty regulations like GDPR.","Enables the product to meet data sovereignty and regulatory compliance requirements (e.g., GDPR), expanding the addressable market to enterprise customers in regulated regions and building trust.","Should Have","8","[""US-001""]","[{""scenario"":""Successful selection of a data residency region during registration"",""given"":""A user is on the new organization registration page"",""when"":""The user fills in all required fields and selects a valid data residency region (e.g., \""Europe (Frankfurt)\"") from the dropdown list"",""then"":""The system successfully creates a new tenant and all subsequent data created for this tenant is physically stored in the infrastructure provisioned for the selected region.""},{""scenario"":""Region selection is non-modifiable after tenant creation"",""given"":""An Admin has successfully created a tenant with a specific data residency region"",""when"":""The Admin navigates to the organization settings page in the web dashboard"",""then"":""The selected data residency region is displayed as a read-only value and there is no user interface option to change it.""}]","[""Finalize and implement the architectural strategy for multi-region data storage using Firebase/GCP"",""Update the tenant creation Cloud Function to provision resources and store data in the specified region"",""Create a backend configuration service to manage the list of available regions"",""Add region selection dropdown to the registration UI""]","[""All acceptance criteria validated and passing"",""Integration testing confirms data is written to the correct regional database"",""Security requirements validated, including server-side validation of the region parameter"",""Architectural decisions and implementation details are documented"",""Story deployed and manually verified by QA in the staging environment for at least two different regions""]"
"US-004","User & Team Management","Admin invites a new user to the organization via email","Admin","As an Admin, I want to invite new employees to the application by entering their email address and assigning them a role, so that they can receive a secure registration link, create their account, and become part of my organization's tenant.","Enables the onboarding of new employees into the system, facilitating organizational growth and the core attendance tracking function. Ensures that only authorized individuals can join a specific tenant, maintaining data security and isolation.","Must Have","5","[""US-001""]","[{""scenario"":""Successful invitation of a new user"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Manage Users' page"",""when"":""I enter a valid and unique email address 'new.user@example.com', select the role 'Subordinate', and click 'Send Invitation'"",""then"":""A new user document is created in Firestore with a status of 'invited', a success notification is displayed, and a transactional email is triggered to 'new.user@example.com' with a unique, 24-hour time-limited registration link.""},{""scenario"":""Attempting to invite a user who already exists in the tenant"",""given"":""I am an Admin logged in, and a user with the email 'existing.user@example.com' already exists in my tenant"",""when"":""I attempt to invite a new user with the email 'existing.user@example.com'"",""then"":""The form submission is blocked and I see an inline error message: 'A user with this email already exists in your organization.'""}]","[""Implement 'Invite User' UI in the Admin web dashboard"",""Create a callable Cloud Function to handle the invitation logic, including creating the user document and generating a secure token"",""Integrate with SendGrid service to dispatch the invitation email""]","[""All acceptance criteria validated and passing"",""Unit tests for form validation and Cloud Function logic implemented with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements for role-based access and token generation are validated"",""Story deployed and verified in the staging environment""]"
"US-005","User & Team Management","Invited user receives an email with a time-limited registration link","Invited User","As an invited user, I want to receive an email containing a unique, time-limited registration link after an Admin invites me, so that I can securely and easily begin the process of creating my account and joining my organization's workspace.","Provides a secure and automated mechanism for new user activation, which is critical for tenant growth. Ensures only the intended recipient can register, reducing security risks and support overhead.","Must Have","5","[""US-004""]","[{""scenario"":""Successful email delivery with a valid link"",""given"":""an Admin has successfully submitted an invitation for a new user with the email 'new.user@example.com'"",""when"":""the backend system processes the invitation request"",""then"":""an email is sent to 'new.user@example.com' containing a unique registration link and explicitly mentioning that the link will expire in 24 hours.""},{""scenario"":""Email hard bounces"",""given"":""an invitation email is sent to a non-existent email address"",""when"":""the SendGrid service reports a hard bounce event"",""then"":""a webhook or monitoring process updates the invited user's profile in Firestore with a status indicating delivery failure (e.g., `invitationStatus: 'delivery_failed'`).""}]","[""Develop a responsive HTML email template for invitations"",""Configure SendGrid integration via Firebase Extension or custom Cloud Function"",""Implement secure token generation and storage"",""Set up a SendGrid webhook to handle bounce events""]","[""All acceptance criteria validated and passing"",""Cloud Function for sending invitations is implemented with unit tests passing at >80% coverage"",""Integration with SendGrid is complete and tested using the Firebase Emulator Suite"",""HTML email template is created, approved, and tested for responsiveness"",""Security review of token generation logic is complete""]"
"US-006","User & Team Management","Invited user completes registration by setting a password","Invited User","As an Invited User, I want to securely complete my account registration by clicking a unique link from my invitation email and setting a strong password, so that I can activate my account, log in for the first time, and start using the attendance application.","Enables the final, critical step of user onboarding, converting an invited user into an active user. A seamless registration process improves user adoption and reduces administrative support load.","Must Have","5","[""US-004"",""US-005""]","[{""scenario"":""Successful account activation with a valid link and strong password"",""given"":""an invited user has a valid, non-expired registration link and is on the registration completion page"",""when"":""the user enters a password that meets the organization's policy, confirms it correctly, accepts the Terms of Service, and clicks 'Activate Account'"",""then"":""the system updates the user's status from 'invited' to 'active' in Firestore, the user is automatically logged in, and they are redirected to their role-specific dashboard. The registration link is also invalidated.""},{""scenario"":""Attempting to use an expired registration link"",""given"":""an invited user has a registration link that is older than 24 hours"",""when"":""the user clicks the link"",""then"":""the user is redirected to a page that clearly states 'This invitation link has expired. Please contact your administrator to request a new invitation.'""}]","[""Create a web-based registration page using Flutter for Web"",""Develop a Firebase Cloud Function to securely process the registration token, activate the user in Firebase Auth, and update their status in Firestore"",""Implement robust client-side and server-side validation for the password policy""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for password validation logic and Cloud Function, achieving >80% coverage"",""Integration testing between the registration form and the Cloud Function completed successfully in the emulator"",""E2E test for the full registration flow is passing"",""Security requirements (token invalidation, HTTPS) validated""]"
"US-007","User & Team Management","Invited user is notified when a registration link has expired","Invited User","As an invited user who has clicked on an old invitation link, I want to be shown a clear, dedicated page explaining that the link has expired, so that I understand why I cannot register and know that I need to contact my administrator for a new invitation.","Improves the user onboarding experience by providing clear feedback for a common error scenario. This reduces user frustration, minimizes support requests, and prevents potential users from abandoning the registration process.","Must Have","3","[""US-004"",""US-005""]","[{""scenario"":""User clicks on an invitation link that has expired"",""given"":""An Admin has sent a user an invitation link which has a 24-hour validity period"",""when"":""The user clicks the invitation link more than 24 hours after it was generated"",""then"":""The system must display a dedicated 'Invitation Link Expired' page with clear, helpful information and actionable next steps.""},{""scenario"":""An already active user clicks their old invitation link"",""given"":""A user has already completed their registration and their account status is 'active'"",""when"":""The user clicks on their original (now used) invitation link"",""then"":""The system should display a page informing them that their account is already active and provide a link to the main login page.""}]","[""Configure Firebase Hosting rewrite rules to direct the registration URL path to a Cloud Function for pre-processing"",""Implement server-side validation of the invitation token's expiry in the Cloud Function"",""Create dedicated, publicly accessible informational pages using Flutter for Web (Expired, Invalid, Already Active)""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function validation logic are implemented with >80% coverage"",""Widget tests for the Flutter informational pages are implemented and passing"",""Integration testing between Hosting, Cloud Function, and Firestore is completed successfully"",""Security requirements validated, ensuring no PII is leaked""]"
"US-008","User & Team Management","Admin deactivates a user's account","Admin","As an Admin, I want to deactivate a user's account and be guided through any necessary reassignments, so that I can securely revoke access for departing employees and maintain the integrity of the organizational hierarchy.","Enhances organizational security by preventing unauthorized access from former employees. Ensures management continuity by enforcing the reassignment of subordinates before a supervisor's departure.","Must Have","5","[""US-001"",""US-004"",""US-017"",""US-051""]","[{""scenario"":""Admin successfully deactivates a user who is not a supervisor"",""given"":""I am logged in as an Admin on the user management dashboard"",""when"":""I select a user with the 'Subordinate' role, click 'Deactivate', and confirm the action"",""then"":""The system updates the user's status to 'deactivated' in the Firestore database, and the user's status is visually updated in the user list.""},{""scenario"":""Admin is blocked from deactivating a Supervisor with active subordinates"",""given"":""I am logged in as an Admin and select a 'Supervisor' user who has one or more active subordinates"",""when"":""I attempt to deactivate this Supervisor"",""then"":""The system prevents the deactivation and displays a modal or notification explaining that all subordinates must be reassigned to a new supervisor first.""},{""scenario"":""Deactivated user's active session is invalidated"",""given"":""A user is currently logged in and has an active session"",""when"":""An Admin deactivates that user's account"",""then"":""The user's authentication token is revoked, and they are automatically logged out or their next API call fails with an authentication error.""}]","[""Implement 'Deactivate' UI in the Admin dashboard"",""Create a Cloud Function for server-side logic (supervisor check, session invalidation, audit logging)"",""Use Firebase Admin SDK to revoke refresh tokens for the deactivated user"",""Update login logic to check for 'deactivated' status""]","[""All acceptance criteria validated and passing"",""Unit tests for Cloud Function logic implemented with >80% coverage"",""Integration testing for the full deactivation flow completed successfully"",""Security requirement for session invalidation is manually verified and confirmed working"",""Audit log entry is correctly generated and formatted""]"
"US-009","User & Team Management","Admin is required to reassign subordinates before deactivating a Supervisor","Admin","As an Admin, I want to be prevented from deactivating a Supervisor who still has active subordinates and be prompted to reassign them first, so that I can ensure every employee remains managed and critical workflows like attendance approvals are not broken.","Ensures organizational hierarchy integrity by preventing 'orphaned' employees. This maintains the continuity of approval workflows and avoids administrative data correction tasks later.","Must Have","5","[""US-008""]","[{""scenario"":""Attempt to deactivate a Supervisor with active subordinates"",""given"":""An Admin is logged into the web dashboard and is viewing the user list."",""when"":""The Admin attempts to deactivate a user who has the 'Supervisor' role and has one or more active subordinates assigned to them."",""then"":""The deactivation action is blocked by the system, and a modal is displayed with the list of affected subordinates and a call-to-action to reassign them.""},{""scenario"":""Successful deactivation of a Supervisor after reassigning all subordinates"",""given"":""An Admin was blocked from deactivating a Supervisor and is now in the reassignment interface."",""when"":""The Admin reassigns all of the Supervisor's active subordinates to one or more new, valid Supervisors and then re-attempts deactivation"",""then"":""The deactivation action is successful and the former Supervisor's user status is updated to 'deactivated' in the database.""}]","[""Implement a modal dialog for blocking deactivation and initiating reassignment"",""Develop a callable Cloud Function to handle the check for subordinates, block the action, and perform atomic reassignment"",""Use a Firestore batch write to update all affected subordinate documents""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function and frontend logic implemented with >80% coverage"",""Integration testing of the full Admin workflow completed successfully against the Emulator Suite"",""Performance of the subordinate check is verified to be within the defined limit"",""Security rules/function permissions are validated to restrict access to Admins""]"
"US-010","Authentication & Access Control","Deactivated user is prevented from logging in","Deactivated User","As a deactivated user, I want to be prevented from logging into the system, even with correct credentials, so that my former employer's data is secure after my access has been revoked.","Enhances security by ensuring that offboarded users cannot access tenant data, thereby protecting company information and enforcing access control policies.","Must Have","2","[""US-008"",""US-017""]","[{""scenario"":""Deactivated user attempts login with correct credentials"",""given"":""a user exists with a status of 'deactivated' in the system"",""when"":""the user attempts to log in using their correct email and password"",""then"":""the system must reject the authentication attempt, display an error 'Your account is no longer active...', and the user remains on the login screen.""},{""scenario"":""Deactivated user attempts login with incorrect credentials"",""given"":""a user exists with a status of 'deactivated' in the system"",""when"":""the user attempts to log in using an incorrect password"",""then"":""the system must reject the authentication and display a generic 'Invalid credentials' message, to prevent account status enumeration.""}]","[""Implement a Firebase Auth Blocking Function (`beforeSignIn`) to check the user's status in Firestore before issuing a token"",""Update Firestore Security Rules to deny data access to any authenticated user whose status is not 'active'"",""Update client-side login UI to handle the specific error code for deactivated accounts""]","[""All acceptance criteria validated and passing"",""Unit tests for backend logic are implemented and passing with >80% coverage"",""Integration testing confirms that login is blocked server-side for inactive users"",""Security review confirms no information leakage and that Firestore rules are updated"",""Story deployed and verified in the staging environment""]"
"US-011","User & Team Management","Admin creates a new team and assigns a Supervisor","Admin","As an Admin, I want to create a new team by providing a name and selecting an existing user as its Supervisor, so that I can accurately model my organization's structure, enabling proper approval workflows and team-based event assignments.","Enables the foundational hierarchical structure of the organization within the application. This is a prerequisite for managing user groups, assigning work, and implementing role-based approval workflows.","Must Have","5","[""US-001"",""US-004""]","[{""scenario"":""Successful creation of a new team"",""given"":""I am an Admin logged into the web dashboard and I am on the 'Team Management' page"",""when"":""I click the 'Create Team' button, enter a unique team name, select a valid user with the 'Supervisor' role, and click 'Save'"",""then"":""a new team document is created in Firestore with the specified name and the selected user's ID as `supervisorId` and a success notification is displayed.""},{""scenario"":""Attempt to create a team with a duplicate name"",""given"":""I am an Admin on the 'Create Team' form, and a team with the same name already exists in my tenant"",""when"":""I enter the duplicate team name and attempt to save"",""then"":""the system prevents the creation and displays an inline error message: 'Team name must be unique.'""},{""scenario"":""Supervisor selection list is correctly populated"",""given"":""I am an Admin on the 'Create Team' form"",""when"":""I click on the 'Select Supervisor' dropdown"",""then"":""the list only contains active users from my tenant who have the 'Supervisor' or 'Admin' role.""}]","[""Implement 'Create Team' UI modal in the Admin web dashboard"",""Develop a searchable dropdown component for supervisor selection"",""Implement client-side and server-side validation for unique team name"",""Update Firestore Security Rules to allow Admins to create documents in the `/teams` subcollection""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules written and tested to cover all access scenarios"",""Integration testing completed successfully against the Firebase Emulator Suite"",""User interface reviewed and approved by the Product Owner/UX designer"",""Feature is manually verified and passes QA in the staging environment""]"
"US-012","User & Team Management","Admin edits an existing team's name or assigned Supervisor","Admin","As an Admin, I want to edit an existing team's name and reassign its supervisor so that the application accurately reflects my organization's current structure and ensures approval workflows are routed correctly.","Maintains data accuracy of the organizational hierarchy, ensuring correct routing of approval workflows and reliability of reports. Allows the system to adapt to organizational changes without data loss.","Must Have","5","[""US-011"",""US-004"",""US-051""]","[{""scenario"":""Admin successfully edits a team's name"",""given"":""I am an Admin logged into the web dashboard and viewing the list of teams"",""when"":""I select a team to edit, change its name to a new, unique value, and click 'Save'"",""then"":""the system updates the team's name in the database, a success notification is displayed, and the team list shows the updated name.""},{""scenario"":""Admin successfully reassigns a team's supervisor"",""given"":""I am an Admin logged into the web dashboard and viewing the list of teams"",""when"":""I select a team to edit, select a different, eligible user as the new supervisor, and click 'Save'"",""then"":""the system updates the team's supervisor in the database and the team list shows the new supervisor.""},{""scenario"":""Team edit action is logged in the audit trail"",""given"":""I am an Admin editing a team's name from 'Old Name' to 'New Name'"",""when"":""I successfully save the change"",""then"":""a new, immutable document is created in the `/auditLog` collection containing the actor's ID, action type, target team's ID, and a details map with old and new values.""}]","[""Implement 'Edit Team' UI in the Admin dashboard"",""Create a callable Cloud Function for secure validation (unique name check) and atomic writes (update team + write to audit log)"",""Update Firestore Security Rules to restrict team document modification to Admins""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function, achieving >80% coverage"",""Integration tests covering the UI-to-database flow are passing in the emulator environment"",""The corresponding audit log entry is created correctly upon successful update"",""User interface reviewed for usability and adherence to design specifications""]"
"US-013","User & Team Management","Admin deletes a team","Admin","As an Admin, I want to permanently delete a team from my organization, so that I can maintain an accurate and clean organizational structure by removing teams that are obsolete or no longer exist.","Improves data hygiene and administrative efficiency by allowing the removal of outdated organizational structures, ensuring reports and user assignments reflect the current state of the company.","Should Have","5","[""US-011"",""US-014"",""US-055"",""US-051""]","[{""scenario"":""Admin successfully deletes a team"",""given"":""I am an Admin logged into the web dashboard and am viewing the list of teams"",""when"":""I click the 'Delete' action for a specific team and confirm the action"",""then"":""The system permanently deletes the team document from the database, and the team is removed from the team list in the UI.""},{""scenario"":""Team deletion is reflected in associated user profiles"",""given"":""A team with several members is being deleted"",""when"":""The Admin confirms the deletion of the team"",""then"":""The `teamId` of the deleted team is removed from the `teamIds` array field for all users who were members of that team.""},{""scenario"":""Team deletion is recorded in the audit log"",""given"":""An Admin is deleting a team"",""when"":""The deletion is successfully processed"",""then"":""A new document is created in the `/auditLog` collection with action details and a snapshot of the team's data before deletion.""}]","[""Implement 'Delete' UI with confirmation modal in the Admin dashboard"",""Create a Cloud Function to handle data consistency (updating all associated user and event documents)"",""Use Firestore Batched Writes to ensure the entire deletion operation is atomic"",""Update Firestore security rules and audit log upon deletion""]","[""All acceptance criteria validated and passing"",""Cloud Function code reviewed and approved"",""Unit tests for the Cloud Function achieve >80% code coverage"",""Integration tests covering the full data modification flow are implemented and passing in the Emulator Suite"",""E2E test scenario for the happy path is automated and passing"",""Security rules and function authentication logic are tested and verified""]"
"US-014","User & Team Management","Admin adds or removes members from any team","Admin","As an Admin, I want to add and remove users from any team within my organization, so that I can maintain accurate team rosters that reflect our current organizational structure.","Ensures data integrity of the organizational structure, which is foundational for correct reporting, supervisor approval workflows, and event assignments. Accurate rosters prevent miscommunication and operational errors.","Must Have","5","[""US-004"",""US-011""]","[{""scenario"":""Admin successfully adds a user to a team"",""given"":""I am an Admin viewing the 'Manage Members' page for a specific team"",""when"":""I initiate the 'Add Member' action, select a valid user who is not currently a member, and confirm"",""then"":""The user's name appears in the team's member list, and the backend data for both the team and the user is updated.""},{""scenario"":""Admin successfully removes a user from a team"",""given"":""I am an Admin viewing the member list for a team that has at least one member"",""when"":""I click the 'Remove' action next to a member's name and confirm"",""then"":""The user's name is removed from the team's member list, and the backend data for the team and user is updated.""},{""scenario"":""System prevents adding a user who is already a member of the team"",""given"":""I am an Admin on the 'Add Member' interface for a specific team"",""when"":""I search for users to add to the team"",""then"":""The list of available users must not include any users who are already members of that team.""}]","[""Implement 'Manage Members' UI on the Admin web dashboard"",""Develop a modal or search interface to find and select users to add"",""Use a Firestore batched write or Cloud Function to ensure atomic updates to both team and user documents"",""Update Firestore Security Rules to enforce Admin-only access""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules tests implemented and passing"",""End-to-end integration testing completed successfully"",""User interface reviewed for responsiveness and accessibility (WCAG 2.1 AA)"",""Performance requirements verified against benchmarks""]"
"US-015","User & Team Management","Supervisor adds or removes members from their own teams","Supervisor","As a Supervisor, I want to add and remove members from the teams I directly manage, so that I can maintain accurate team rosters and ensure workflows like event assignment and attendance approvals are directed to the correct people.","Empowers team leaders to manage their own rosters, improving data accuracy and operational efficiency. Reduces administrative overhead on the Admin role and ensures system functions operate on correct team data.","Should Have","5","[""US-011"",""US-004""]","[{""scenario"":""Supervisor successfully adds an eligible user to a team they manage"",""given"":""I am a logged-in Supervisor and I am viewing the details of a team I am assigned to supervise"",""when"":""I select the 'Add Member' option, and select an active user with the 'Subordinate' role who is not already on the team"",""then"":""the user is added to the team's member list, their user profile is updated with the new team ID, and the team member list in my UI refreshes.""},{""scenario"":""Supervisor is prevented from managing a team they do not supervise"",""given"":""I am a logged-in Supervisor"",""when"":""I attempt to modify the member list of a team for which I am not the designated supervisor"",""then"":""the system must reject the request with a 'permission-denied' error.""},{""scenario"":""The list of users to add excludes non-subordinate roles"",""given"":""I am a logged-in Supervisor viewing the 'Add Member' interface"",""when"":""I view the list of available users to add"",""then"":""the list must only contain users with the 'Subordinate' role.""}]","[""Implement team management UI in the Supervisor's mobile dashboard"",""Create a callable Cloud Function to provide a secure, filtered list of eligible users to add"",""Update Firestore Security Rules to allow a Supervisor to modify the `memberIds` array only on teams where their UID matches the `supervisorId`""]","[""All acceptance criteria validated and passing"",""Integration testing for both happy paths and security rule enforcement completed successfully in the emulator"",""User interface reviewed and approved for usability and adherence to design guidelines"",""Security requirements validated, especially Firestore rules"",""Story deployed and verified in the staging environment""]"
"US-016","User & Team Management","Admin is prevented from creating a circular reporting structure","Admin","As an Admin, I want the system to validate and prevent me from assigning a supervisor to a user if that assignment would create a circular reporting loop, so that I can maintain a logical and functional organizational hierarchy and ensure approval workflows operate correctly.","Ensures data integrity of the organizational hierarchy, prevents infinite loops in approval/escalation workflows, reduces administrative errors, and improves overall system stability.","Must Have","5","[""US-014""]","[{""scenario"":""Admin attempts to assign a user as their own supervisor"",""given"":""An Admin is editing the profile of 'User A'"",""when"":""The Admin attempts to select 'User A' as their own supervisor and save the change"",""then"":""The system must prevent the save operation and display an error message, such as 'A user cannot be their own supervisor.'""},{""scenario"":""Admin attempts to create a direct circular dependency (A -> B, then B -> A)"",""given"":""An organizational structure exists where 'User B' reports directly to 'Supervisor A'"",""when"":""An Admin edits the profile of 'Supervisor A' and attempts to assign 'User B' as their new supervisor"",""then"":""The system must prevent the save operation and display an error message, such as ''User B' cannot be the supervisor as they are in the reporting line of 'Supervisor A'.'""},{""scenario"":""Admin attempts to create a multi-level, indirect circular dependency (A -> B -> C, then C -> A)"",""given"":""An organizational structure exists where 'User C' reports to 'Supervisor B', and 'Supervisor B' reports to 'Manager A'"",""when"":""An Admin edits the profile of 'Manager A' and attempts to assign 'User C' as their new supervisor"",""then"":""The system must traverse the hierarchy, detect the loop, prevent the save, and display a clear error message.""}]","[""Create a callable Cloud Function to perform the validation"",""Implement a recursive or iterative algorithm to traverse the reporting hierarchy on the backend"",""Integrate the validation function call into the user profile edit form on the Admin dashboard""]","[""All acceptance criteria validated and passing"",""Server-side validation logic is implemented in a Firebase Cloud Function"",""Unit tests for the Cloud Function achieve >90% coverage of the validation logic"",""Integration testing between the web client and Cloud Function completed successfully"",""E2E tests for happy path and all error conditions are passing""]"
"US-017","Authentication & Access Control","User logs in with email and password","Any registered user","As a registered user (Admin, Supervisor, or Subordinate), I want to securely log in to the application using my email and password, so that I can access my personalized dashboard and perform actions specific to my role.","Provides the fundamental security mechanism to authenticate users and grant them role-based access to tenant-specific data, enabling all subsequent application functionality.","Must Have","3","[""US-006"",""US-021""]","[{""scenario"":""Successful login with valid credentials"",""given"":""A registered user with an 'active' status is on the login screen"",""when"":""The user enters their correct email and password and taps the 'Log In' button"",""then"":""The system successfully authenticates the user, a session is created, and the user is redirected to their role-specific dashboard.""},{""scenario"":""Login attempt with an incorrect password"",""given"":""A registered user is on the login screen"",""when"":""The user enters their correct email but an incorrect password"",""then"":""A clear, non-specific error message such as 'Invalid email or password. Please try again.' is displayed.""},{""scenario"":""Login attempt by a deactivated user"",""given"":""A user whose account status is 'deactivated' is on the login screen"",""when"":""The user enters their correct email and password"",""then"":""A specific error message is displayed, such as 'Your account has been deactivated. Please contact your administrator.', and access is denied.""}]","[""Implement login UI screen in Flutter"",""Integrate Firebase Authentication SDK for email/password sign-in"",""Implement client-side state management for loading, success, and error states"",""Implement logic to check user's 'status' field in Firestore after successful authentication""]","[""All acceptance criteria are met and have been validated by QA"",""End-to-end integration tests for all major scenarios are passing in the CI/CD pipeline"",""UI conforms to the design specifications and accessibility standards"",""Security review confirms that credentials are handled securely and no sensitive data is leaked"",""The feature is deployed and verified on the staging environment""]"
"US-018","Authentication & Access Control","User logs in with Phone OTP","Any registered user","As a registered user (Admin, Supervisor, or Subordinate), I want to log in to the application using a one-time password (OTP) sent to my registered phone number, so that I can securely and conveniently access my account without needing to remember my password.","Improves account security by offering a form of multi-factor authentication. Enhances user experience by providing a convenient, passwordless login option, potentially reducing password-related support issues.","Should Have","5","[""US-006"",""US-017"",""US-021""]","[{""scenario"":""Successful login with a valid phone number and OTP"",""given"":""I am on the login screen and have an active account with a registered and verified phone number"",""when"":""I select 'Login with Phone', enter my number, receive an SMS with a 6-digit OTP, and enter the correct OTP"",""then"":""the system validates the OTP, logs me in, and I am redirected to my role-specific dashboard.""},{""scenario"":""Entering an incorrect OTP"",""given"":""I have received an OTP and am on the verification screen"",""when"":""I enter an incorrect 6-digit OTP and tap 'Verify'"",""then"":""I see an error message stating 'Invalid code. Please try again.' and I remain on the OTP verification screen.""},{""scenario"":""Requesting to resend the OTP"",""given"":""I am on the OTP verification screen"",""when"":""I tap the 'Resend Code' button after the initial cooldown period"",""then"":""a new OTP is sent to my phone number, the expiry timer resets, and the 'Resend Code' button is disabled for another cooldown period.""}]","[""Configure Firebase Authentication for Phone Number sign-in"",""Implement multi-step UI flow for phone entry and OTP verification"",""Implement state management for timers, loading states, and error handling"",""Enforce rate limiting on OTP requests to prevent abuse""]","[""All acceptance criteria validated and passing on both iOS and Android physical devices"",""End-to-end manual testing of the full login flow completed successfully"",""Firebase project configuration for phone auth is documented"",""Security requirements, especially rate limiting, are validated"",""UI/UX reviewed and approved by the Product Owner""]"
"US-019","Authentication & Access Control","User is temporarily locked out after multiple failed login attempts","Any registered user","As a registered user, I want my account to be temporarily locked after a specific number of consecutive failed login attempts, so that my account is protected from unauthorized access via brute-force attacks.","Enhances platform security by mitigating brute-force and dictionary attacks, protecting user data, and building user trust in the system's security measures.","Must Have","3","[""US-017"",""US-020""]","[{""scenario"":""Account is locked after 5 consecutive failed login attempts"",""given"":""A user with a valid account exists"",""when"":""The user enters an incorrect password for the 5th consecutive time"",""then"":""The system locks the account for 15 minutes and displays a clear error message: 'Your account has been temporarily locked... Please try again in 15 minutes.'""},{""scenario"":""Failed login attempt counter is reset after a successful login"",""given"":""A user has 4 consecutive failed login attempts"",""when"":""The user enters the correct password on the 5th attempt"",""then"":""The user is successfully logged in and the failed login attempt counter is reset to 0.""},{""scenario"":""Successful password reset unlocks the account immediately"",""given"":""A user's account is in a locked state"",""when"":""The user successfully completes the 'Forgot Password' flow"",""then"":""The account lock is immediately removed and the failed login attempt counter is reset to 0.""}]","[""Enable Firebase Identity Platform's built-in email enumeration and brute-force protection"",""If custom logic is needed, implement server-side state management for failed attempts and lockout timestamps using Firestore and a Cloud Function"",""Update the 'Forgot Password' Cloud Function to clear any lockout status""]","[""All acceptance criteria validated and passing"",""Integration tests covering the full login/lockout/unlock flow are implemented and passing"",""UI review confirms the error message is displayed correctly on all supported platforms"",""Security review confirms that the lockout logic cannot be bypassed from the client"",""The feature is documented in the technical specification""]"
"US-020","Authentication & Access Control","User resets their forgotten password","Any registered user","As a registered user, I want to request a password reset link via my registered email address so that I can securely set a new password and regain access to my account if I forget my current one.","Provides a critical self-service mechanism for account recovery, reducing administrative support load and improving user experience by preventing users from being permanently locked out.","Must Have","2","[""US-017"",""US-073""]","[{""scenario"":""User successfully requests a password reset link"",""given"":""I am on the application's login screen"",""when"":""I click 'Forgot Password?', enter my valid and registered email address, and submit"",""then"":""I see a confirmation message, and a password reset email is sent to my address.""},{""scenario"":""User successfully resets their password using the link"",""given"":""I have received a password reset email and clicked the valid link"",""when"":""I enter a new password that meets the organization's complexity policy, confirm it, and submit"",""then"":""My password is updated, and I see a success message with a link to the login page.""},{""scenario"":""User enters an unregistered email address"",""given"":""I am on the password reset request screen"",""when"":""I enter an email address that is not registered"",""then"":""I see the exact same generic confirmation message as the happy path to prevent email enumeration.""}]","[""Implement 'Forgot Password' UI screens in Flutter"",""Integrate Firebase Authentication SDK's `sendPasswordResetEmail` and `confirmPasswordReset` functions"",""Implement deep linking to handle the link from the email"",""Integrate logic to fetch and enforce tenant-specific password policies on the reset screen""]","[""All acceptance criteria validated and passing"",""End-to-end integration test for the full flow is implemented and passing"",""User interface reviewed and approved by a UX/UI designer"",""Security check for email enumeration vulnerability has been performed and passed"",""Story deployed and verified in the staging environment""]"
"US-021","Authentication & Access Control","User sees a role-specific dashboard after logging in","Any authenticated user","As an authenticated user (Admin, Supervisor, or Subordinate), I want to be automatically routed to my role-specific dashboard immediately after a successful login, so that I can efficiently access the information and tools relevant to my responsibilities without unnecessary navigation.","Improves user efficiency and satisfaction by providing a personalized experience. Reinforces the Role-Based Access Control (RBAC) model by immediately presenting users with relevant tools and data.","Must Have","2","[""US-017""]","[{""scenario"":""Admin successfully logs into the web application"",""given"":""a registered user exists with the role 'Admin'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must redirect them to the main Admin Web Dashboard.""},{""scenario"":""Supervisor successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Supervisor'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Supervisor Mobile Dashboard (e.g., list of pending approvals).""},{""scenario"":""Subordinate successfully logs into the mobile application"",""given"":""a registered user exists with the role 'Subordinate'"",""when"":""the user successfully authenticates on the mobile application"",""then"":""the system must navigate them to the Subordinate Mobile Dashboard (e.g., the 'Check-In' screen).""},{""scenario"":""Non-Admin user attempts to log into the web application"",""given"":""a registered user exists with the role 'Supervisor' or 'Subordinate'"",""when"":""the user successfully authenticates on the web-based login page"",""then"":""the system must display a page informing them that the web dashboard is for administrative access only.""}]","[""Implement a central authentication state listener at the root of the application"",""Use a client-side routing solution (e.g., GoRouter) to handle conditional redirection"",""Read the user's role from the secure Firebase Auth ID token (custom claims)"",""Implement platform-specific logic (web vs. mobile) for redirection""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully for all roles and platforms"",""Performance requirement for redirection time is met and verified"",""Security requirements for using custom claims are validated via code review"",""Story deployed and verified in the staging environment""]"
"US-022","Core Platform & Tenant Management","Admin initiates the permanent deletion of their organization's tenant","Admin","As an Admin, I want to initiate the permanent deletion of my organization's tenant through a secure, multi-step process, so that I can comply with my company's data removal policies and ensure all our data is erased from the service when we decide to stop using it.","Provides a self-service offboarding capability, ensures compliance with data privacy regulations (e.g., GDPR's 'right to erasure'), builds customer trust by giving them control over their data, and reduces manual administrative overhead.","Should Have","5","[""US-001"",""US-017"",""US-023"",""US-024"",""US-025""]","[{""scenario"":""Admin successfully initiates tenant deletion"",""given"":""an Admin is logged into the web dashboard and has navigated to the 'Tenant Settings' page"",""when"":""the Admin clicks the 'Delete Organization' button, confirms their intent in the warning modal, and successfully re-authenticates"",""then"":""the system updates the tenant's document in Firestore to a status of 'pending_deletion' and sets a 'scheduledDeletionTimestamp' for 30 days in the future.""},{""scenario"":""UI displays clear warnings about the irreversible action"",""given"":""an Admin has clicked the 'Delete Organization' button"",""when"":""the confirmation modal is displayed"",""then"":""the modal must explicitly state that the action is irreversible after the grace period and that all data will be permanently deleted.""}]","[""Implement 'Delete Organization' UI with confirmation modal in the Admin dashboard"",""Create a callable Cloud Function to handle the secure backend logic"",""Implement the re-authentication flow (part of US-023)"",""Update the tenant document in Firestore to 'pending_deletion' status"",""Create an entry in the immutable audit log for this action""]","[""All acceptance criteria validated and passing"",""Integration testing of the full flow (UI -> Cloud Function -> Firestore) completed successfully in the emulator suite"",""User interface reviewed and approved for clarity and usability"",""Security requirements validated, including role-based access control on the Cloud Function"",""Story deployed and verified in the staging environment""]"
"US-023","Core Platform & Tenant Management","Admin must re-authenticate to confirm tenant deletion","Admin","As an Admin with the authority to delete my organization's tenant, I want to be forced to re-enter my password to confirm the deletion request, so that I can prevent accidental or unauthorized deletion of all my organization's data, ensuring a critical safeguard is in place for this irreversible action.","Prevents catastrophic, accidental data loss for an entire organization, which protects against significant business disruption and potential legal liability. This enhances system security and builds user trust.","Must Have","5","[""US-022""]","[{""scenario"":""Admin successfully re-authenticates to confirm tenant deletion"",""given"":""an Admin has clicked the final 'Delete Tenant' button, triggering the confirmation step"",""when"":""the re-authentication modal appears, the Admin enters their correct password, and clicks 'Confirm Deletion'"",""then"":""the system successfully validates the password, and the tenant deletion process is initiated.""},{""scenario"":""Admin enters an incorrect password"",""given"":""the re-authentication modal for tenant deletion is displayed"",""when"":""the Admin enters an incorrect password and clicks 'Confirm Deletion'"",""then"":""an inline error message 'Incorrect password. Please try again.' is displayed, the modal remains open, and the deletion process is not initiated.""}]","[""Implement a modal dialog for re-authentication"",""Create a secure, callable Cloud Function to handle server-side re-authentication using Firebase Admin SDK"",""Manage the UI states (idle, loading, error) on the frontend""]","[""All acceptance criteria validated and passing"",""Unit tests for the modal UI and Cloud Function implemented with >80% coverage"",""Integration testing between the frontend and backend function completed successfully using the Emulator Suite"",""Security requirements validated, including role-based access control on the Cloud Function"",""Story deployed and verified in the staging environment""]"
"US-024","Core Platform & Tenant Management","Admin is informed of the 30-day grace period for tenant deletion","Admin","As an Admin who has just confirmed a request to delete my organization's tenant, I want to be immediately and clearly informed about the 30-day grace period and the final deletion date, so that I understand the consequences of my action, feel confident that there's a safety net to prevent accidental data loss, and know how to reverse the process if needed.","Provides a critical safety mechanism to prevent accidental, irreversible data loss. This builds user trust, reduces support incidents related to accidental deletion, and aligns with enterprise-grade data management best practices.","Must Have","2","[""US-022"",""US-023""]","[{""scenario"":""Display of grace period information after deletion confirmation"",""given"":""An Admin has just successfully re-authenticated to confirm the tenant deletion request"",""when"":""the system processes the deletion request successfully"",""then"":""the UI immediately displays a prominent message stating that a 30-day grace period has begun and shows the final, permanent deletion date.""},{""scenario"":""Email notification of pending deletion"",""given"":""an Admin has successfully confirmed the tenant deletion request"",""when"":""the backend processes the request"",""then"":""the system sends an email to the initiating Admin's registered email address containing the same information about the 30-day grace period and the final deletion date.""}]","[""Implement a confirmation screen or persistent banner in the Admin dashboard"",""Update the tenant deletion Cloud Function to calculate the 30-day future date"",""Integrate with SendGrid to send a transactional email notification""]","[""All acceptance criteria validated and passing"",""Integration testing between the frontend, Cloud Function, and Firestore completed successfully"",""User interface reviewed and approved by UX/Product Owner"",""Accessibility requirements validated using automated tools and manual checks"",""Story deployed and verified in the staging environment""]"
"US-025","Core Platform & Tenant Management","Admin cancels a pending tenant deletion","Admin","As an Admin of an organization, I want to cancel a previously requested tenant deletion during the 30-day grace period, so that I can prevent the permanent loss of my organization's data and restore full access to the application if I change my mind or made a mistake.","Provides a critical safety net to prevent accidental or premature permanent data loss. Reduces customer support load by enabling self-service reversal of a destructive action. Increases user trust and confidence in the platform.","Must Have","5","[""US-022"",""US-024""]","[{""scenario"":""Admin successfully cancels a pending deletion within the grace period"",""given"":""I am an authenticated Admin for a tenant whose status is 'pending_deletion' and it is within the 30-day grace period"",""when"":""I click the 'Cancel Scheduled Deletion' button and confirm the action"",""then"":""The system updates the tenant's status in Firestore from 'pending_deletion' to 'active', and the warning banner about the pending deletion is removed from my dashboard.""},{""scenario"":""Attempt to cancel deletion outside the grace period"",""given"":""A tenant's 30-day grace period for deletion has expired"",""when"":""An Admin attempts to trigger the cancellation action"",""then"":""The system must reject the request with an error message like 'The grace period has expired.'""}]","[""Implement UI for cancellation (button within the warning banner and confirmation modal)"",""Create a callable Cloud Function to securely handle the cancellation logic"",""The function must validate that the request is within the grace period before updating the tenant status"",""Create an entry in the audit log for the cancellation action""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function and UI components, with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security rules and server-side validation logic have been peer-reviewed"",""Story deployed and verified in the staging environment""]"
"US-026","User & Team Management","User accepts Terms of Service and Privacy Policy","New User","As a new user completing my registration, I want to be presented with the Terms of Service and Privacy Policy and be required to accept them, so that I understand the rules of the service and how my data will be used, and my account can be fully activated for use.","Ensures legal and regulatory compliance (e.g., GDPR) by obtaining explicit user consent before account activation. Mitigates legal risk and builds user trust through transparency.","Must Have","2","[""US-006"",""US-021""]","[{""scenario"":""User reviews and accepts policies"",""given"":""A new user has successfully set their password and is presented with the 'Terms and Policy Acceptance' screen"",""when"":""The user checks the box to indicate acceptance and clicks the 'Accept & Continue' button"",""then"":""The system updates the user's status from 'invited' to 'active', creates an audit log of the acceptance, and redirects the user to their dashboard.""},{""scenario"":""User attempts to continue without accepting"",""given"":""A new user is on the 'Terms and Policy Acceptance' screen"",""when"":""The user attempts to click the 'Accept & Continue' button without checking the box"",""then"":""The button must be in a disabled state and no action is performed.""},{""scenario"":""User closes the app before accepting"",""given"":""A new user is on the 'Terms and Policy Acceptance' screen and closes the application"",""when"":""The user re-opens the app and logs in"",""then"":""The system must redirect them back to the 'Terms and Policy Acceptance' screen.""}]","[""Implement the 'Terms and Policy Acceptance' screen in Flutter"",""Integrate an in-app browser package to display the policy documents"",""Update the registration Cloud Function to perform an atomic write (update user status and create audit log entry)"",""Update the application's routing logic to act as a gatekeeper for un-activated users""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully, verifying Firestore updates"",""User interface reviewed and approved for UX and accessibility compliance"",""Security requirement for atomic, audited writes is validated"",""Story deployed and verified in the staging environment""]"
"US-027","User & Team Management","User password must meet complexity requirements","Any System User","As a System User (Admin, Supervisor, or Subordinate), I want my new password to be validated against a set of complexity rules when I register or reset my password, so that I can be confident my account is protected against unauthorized access.","Enhances account and data security by preventing the use of weak or easily guessable passwords. Reduces the risk of unauthorized access and supports security compliance.","Must Have","5","[""US-006"",""US-020""]","[{""scenario"":""User enters a password that meets all complexity requirements"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password that satisfies all defined complexity rules"",""then"":""Each requirement in the real-time validation checklist is marked as 'met' and the 'Submit' button becomes enabled.""},{""scenario"":""Password is missing a required character type"",""given"":""A user is on a screen to set or reset their password"",""when"":""The user enters a password that meets the length requirement but is missing a number"",""then"":""The 'at least one number' requirement in the validation checklist is marked as 'unmet' and the 'Submit' button remains disabled.""},{""scenario"":""Server-side validation rejects an invalid password"",""given"":""A user attempts to set a new password by bypassing client-side validation"",""when"":""The request contains a password that does not meet the tenant's complexity policy"",""then"":""The server-side logic (Cloud Function) must reject the request with an appropriate error.""}]","[""Create a reusable UI component for real-time password validation"",""Implement a Firebase Auth Blocking Function (`beforeCreate`) for secure server-side enforcement"",""Integrate logic to fetch and apply tenant-specific password policies (from US-073)""]","[""All acceptance criteria validated and passing"",""Server-side validation logic implemented in a Cloud Function and tested"",""Integration testing completed successfully for registration and password reset flows"",""User interface reviewed and approved for clarity and accessibility"",""Security requirements validated, including a test to bypass client-side checks""]"
"US-028","Core Attendance Workflow","Subordinate checks in for attendance","Subordinate","As a Subordinate, I want to tap a 'Check-In' button on my mobile app so that the system captures my current time and GPS location to create an official attendance record for the start of my workday.","Provides a verifiable, time-stamped, and geo-located record of when an employee starts their workday. This is the foundational data point for all attendance tracking, reporting, and approval workflows.","Must Have","5","[""US-017"",""US-021"",""US-076""]","[{""scenario"":""Successful check-in with an active internet connection"",""given"":""I am a logged-in Subordinate, have granted location permissions, and have not checked in for the day"",""when"":""I tap the 'Check-In' button"",""then"":""The system captures my timestamp and GPS, a new attendance record is created in Firestore with status 'pending', and the UI updates to show my check-in time.""},{""scenario"":""Check-in attempt with no GPS signal"",""given"":""I am a logged-in Subordinate but my device cannot acquire a GPS signal"",""when"":""I tap the 'Check-In' button"",""then"":""The app fails after a 10-second timeout and displays an error message, such as 'Could not get location...'""},{""scenario"":""Successful check-in while the device is offline"",""given"":""I am a logged-in Subordinate and my device has no internet connectivity"",""when"":""I tap the 'Check-In' button"",""then"":""The attendance record is created in the local Firestore cache with an `isOfflineEntry` flag, and the UI updates immediately. The data syncs automatically when connectivity is restored.""}]","[""Implement the main dashboard UI for the Subordinate role"",""Integrate a Flutter location plugin (e.g., 'geolocator') to access device GPS"",""Implement the logic to create a new attendance record in Firestore"",""Implement a Cloud Function to perform server-side timestamp validation""]","[""All acceptance criteria validated and passing"",""Integration testing with Firebase Emulators completed successfully"",""E2E tests for offline and permission flows are passing"",""Performance requirements for GPS lock and data sync are verified"",""Security rules for creating attendance records are deployed and tested""]"
"US-029","Core Attendance Workflow","Subordinate checks out from attendance","Subordinate","As a Subordinate, I want to check out at the end of my shift by tapping a button, so that my attendance record for the day is completed with an accurate timestamp and GPS location, ensuring my work duration is correctly logged.","Completes the daily attendance data loop, enabling accurate calculation of work duration and providing complete records for reporting, compliance, and operational management.","Must Have","5","[""US-028"",""US-030"",""US-033"",""US-077""]","[{""scenario"":""Successful check-out on an active attendance record"",""given"":""a Subordinate user has an active check-in record for the current day"",""when"":""the user taps the 'Check-Out' button"",""then"":""the system captures the current timestamp and GPS, updates the existing attendance record with 'checkOutTime' and 'checkOutGps', and displays a success message.""},{""scenario"":""Check-out action updates the correct daily record"",""given"":""a Subordinate user has an active check-in record for the current day"",""when"":""the user performs the check-out action"",""then"":""the system must update the *same* attendance document that was created during check-in for that day.""},{""scenario"":""User performs a check-out while the device is offline"",""given"":""a Subordinate user has an active check-in and their device is offline"",""when"":""the user taps the 'Check-Out' button"",""then"":""the system saves the check-out data to the local Firestore cache, and it syncs automatically when connectivity is restored.""}]","[""Implement the check-out logic in the mobile app"",""Ensure the logic finds and updates the existing daily attendance record"",""Integrate with offline caching mechanism"",""Update UI state after successful check-out""]","[""All acceptance criteria validated and passing"",""End-to-end test scenario for the check-out flow is implemented and passing"",""Manual testing confirms correct functionality on target iOS and Android physical devices"",""Performance requirements for GPS lock time are verified"",""Security rules preventing unauthorized updates are tested and validated""]"
"US-030","Core Attendance Workflow","Subordinate is prevented from checking out before checking in","Subordinate","As a Subordinate, I want the 'Check-Out' button to be disabled and visually distinct until I have successfully checked in for the day, so that I am prevented from making a logical error in my attendance record and can follow the correct workflow without confusion.","Ensures data integrity by preventing orphaned check-out records, reduces user error and subsequent correction requests, and provides a clear, guided user experience.","Must Have","2","[""US-028""]","[{""scenario"":""Initial state on a new day"",""given"":""a Subordinate user opens the attendance screen for a new day"",""when"":""they have no active attendance record for the current day"",""then"":""the 'Check-In' button is enabled and the 'Check-Out' button is disabled.""},{""scenario"":""UI state updates immediately after a successful check-in"",""given"":""a Subordinate is on the attendance screen"",""when"":""they successfully perform a check-in action"",""then"":""the 'Check-In' button immediately becomes disabled, and the 'Check-Out' button immediately becomes enabled.""},{""scenario"":""State reset on a new calendar day"",""given"":""a Subordinate had an active check-in on the previous day"",""when"":""they open the app after midnight according to the tenant's timezone"",""then"":""the attendance screen state is reset for the new day, with 'Check-In' enabled and 'Check-Out' disabled.""}]","[""Implement reactive state management for the check-in/out buttons"",""Develop logic to query the user's current check-in status for the day"",""Handle date and timezone logic to correctly identify the 'current day'""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully against the Firebase Emulator"",""Performance requirements for state lookup verified"",""Accessibility requirements for button states validated with a screen reader"",""Story deployed and verified in staging environment""]"
"US-031","Reporting & Integrations","Admin views and filters for attendance records flagged for clock discrepancy","Admin","As an Admin, I want to view and filter for attendance records that are flagged for a significant clock discrepancy between the device and the server, so that I can audit data integrity, investigate potential time manipulation, and identify users with persistent device or connectivity issues.","Enhances data integrity and trust in the attendance system by providing a mechanism to audit and investigate anomalies. Helps detect potential time fraud or recurring technical problems, supporting fair and accurate timekeeping.","Should Have","3","[""US-059"",""US-060""]","[{""scenario"":""Visual identification of a flagged record in the attendance report"",""given"":""an Admin is viewing the main attendance report"",""when"":""the report displays an attendance record that has the 'clock_discrepancy' flag"",""then"":""that record's row must display a clear and distinct visual indicator (e.g., a warning icon).""},{""scenario"":""Admin filters the report to show only records with clock discrepancies"",""given"":""the attendance report contains a mix of records"",""when"":""the Admin selects the 'Clock Discrepancy' option from the report's filter controls"",""then"":""the report view must update to show only the records that contain the 'clock_discrepancy' flag.""}]","[""Create a Cloud Function (`onWrite` trigger) to compare client and server timestamps and add the 'clock_discrepancy' flag"",""Add a new filter option for 'Clock Discrepancy' to the reporting UI"",""Add a visual indicator component to the report table rows"",""Configure a Firestore composite index on the `flags` array field""]","[""All acceptance criteria validated and passing"",""The required Firestore index is defined in `firestore.indexes.json` and deployed"",""User interface reviewed and approved by the Product Owner for clarity and consistency"",""Performance requirements for filtering verified"",""Story deployed and verified in the staging environment""]"
"US-032","Core Attendance Workflow","Subordinate's attendance is automatically checked out","Subordinate","As a Subordinate, I want the system to automatically check me out at a specific time set by my organization so that my attendance record is complete and accurate even if I forget to manually check out, which saves me from having to request a correction later.","Improves data integrity by ensuring all attendance records are closed daily. Reduces administrative overhead by minimizing the need for manual corrections of missed check-outs.","Should Have","5","[""US-028"",""US-069"",""US-070""]","[{""scenario"":""Successful auto-checkout for a user who forgot to check out"",""given"":""An organization has enabled auto-checkout for 17:30 in their configured timezone"",""when"":""The scheduled auto-checkout function runs"",""then"":""A Subordinate's record with a check-in but no check-out is updated with a 'checkOutTime' of 17:30 and an 'auto-checked-out' flag.""},{""scenario"":""Auto-checkout process ignores users who have already checked out"",""given"":""An organization has enabled auto-checkout for 17:30"",""when"":""The scheduled auto-checkout function runs"",""then"":""A Subordinate's record that was already manually checked out is NOT modified.""},{""scenario"":""Auto-checked-out record is visually distinct in the Supervisor's dashboard"",""given"":""A Subordinate's attendance record has been successfully auto-checked-out"",""when"":""Their Supervisor views the list of pending attendance records"",""then"":""The corresponding record is displayed with a clear visual indicator (e.g., an icon or label) that identifies it as an 'Auto Check-Out'.""}]","[""Implement a daily scheduled Cloud Function in TypeScript"",""The function must query for open attendance records across tenants"",""The function logic must respect each tenant's configured timezone and auto-checkout time"",""Update the Supervisor and Subordinate UIs to display the 'auto-checked-out' flag""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function implemented with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""UI changes for displaying the flag are implemented and reviewed"",""Required Firestore indexes are defined in 'firestore.indexes.json'""]"
"US-033","Core Attendance Workflow","Subordinate marks attendance while offline","Subordinate","As a Subordinate, I want to be able to check in and check out when my device is offline, so that my attendance is captured accurately at the correct time, regardless of my network connectivity.","Ensures data integrity and accuracy by capturing attendance at the moment it occurs. Increases system reliability and user trust, reducing manual corrections and support requests for missed punches due to network issues.","Must Have","5","[""US-028"",""US-029""]","[{""scenario"":""User performs a check-in while the device is offline"",""given"":""The user is logged in and their device has no internet connectivity"",""when"":""The user taps the 'Check-In' button"",""then"":""The app captures the timestamp and GPS, creates a record in the local Firestore cache with an 'isOfflineEntry' flag, and the UI updates to show a 'Checked In' status.""},{""scenario"":""Offline records are automatically synchronized when connectivity is restored"",""given"":""The user has one or more records stored in the local cache from offline actions"",""when"":""The device regains a stable internet connection"",""then"":""The Firestore SDK automatically syncs the local records to the server, and the 'isOfflineEntry' flag is preserved on the server-side record.""},{""scenario"":""User attempts to check-in/out offline without a GPS signal"",""given"":""The user is offline and the device cannot acquire a GPS signal"",""when"":""The user taps the 'Check-In' or 'Check-Out' button"",""then"":""The action is blocked, and an error message is displayed, such as 'GPS signal required...'""}]","[""Configure Firestore's offline persistence for the mobile client"",""Update the attendance marking logic to write to the local cache"",""Add an 'isOfflineEntry: true' flag to all records created offline"",""Implement UI state management to reflect pending sync status""]","[""All acceptance criteria validated and passing"",""E2E integration tests for all offline scenarios are implemented and passing"",""User interface reviewed and approved by the product owner"",""Performance of local write operations verified"",""Story deployed and verified in the staging environment on both Android and iOS physical devices""]"
"US-034","Core Attendance Workflow","Subordinate's offline attendance syncs automatically","Subordinate","As a Subordinate, I want my offline attendance records to be automatically sent to the server when my device reconnects to the internet, so that my attendance is accurately recorded without any extra effort from my side and I can trust the system to work reliably.","Ensures data integrity and accuracy by capturing all attendance records regardless of network status. Improves user experience by removing the need for manual synchronization, which builds trust and reduces administrative overhead.","Must Have","5","[""US-033""]","[{""scenario"":""Successful sync of a single offline check-in record"",""given"":""a user has performed a check-in while offline"",""when"":""the device later regains a stable internet connection"",""then"":""the Firestore SDK automatically syncs the pending write to the server, and the record's flag `isOfflineEntry: true` is persisted.""},{""scenario"":""Syncing multiple offline records"",""given"":""a user has created multiple unsynced attendance records while offline"",""when"":""the device regains a stable internet connection"",""then"":""all pending offline records are automatically sent to the server in order.""},{""scenario"":""Sync process is non-blocking for the user interface"",""given"":""the application is in the process of syncing offline data"",""when"":""the user navigates to other parts of the application"",""then"":""the UI remains responsive and is not blocked by the background sync process.""}]","[""Ensure Firestore offline persistence is enabled and configured correctly"",""Rely on the Firebase SDK's built-in automatic sync capabilities"",""Implement UI indicators for sync status (optional but recommended)"",""Test background sync behavior on both iOS and Android""]","[""All acceptance criteria validated and passing"",""Manual E2E testing on physical Android and iOS devices confirms sync works as expected in various network conditions"",""Performance requirements verified (no UI blocking)"",""Security requirements validated"",""Story deployed and verified in staging environment""]"
"US-035","Core Attendance Workflow","Subordinate is notified of a persistent sync failure","Subordinate","As a Subordinate, I want to be clearly and persistently notified within the app if my offline attendance data has failed to sync for over 24 hours, so that I can take action to resolve the issue and prevent my records from being lost.","Ensures data integrity by preventing the silent loss of offline attendance records. This builds user trust, reduces administrative overhead for manual corrections, and guarantees accurate reporting.","Should Have","5","[""US-033""]","[{""scenario"":""Notification appears for a single stale offline record"",""given"":""a user has an attendance record that has remained unsynced for more than 24 hours"",""when"":""the user opens the application"",""then"":""a persistent, non-dismissible notification banner is displayed at the top of the main screen, stating '1 record failed to sync' and including an actionable button like 'Retry Sync'.""},{""scenario"":""Successful manual sync dismisses the notification"",""given"":""the persistent sync failure notification is visible and the device has a stable internet connection"",""when"":""the user taps the 'Retry Sync' button and the sync is successful"",""then"":""the persistent banner is removed, and a temporary success message is displayed.""}]","[""Implement a client-side mechanism to track the age of locally cached records"",""Develop a persistent banner UI component"",""Implement global state management (Riverpod) to control the banner's visibility across the app"",""Implement the 'Retry Sync' logic""]","[""All acceptance criteria validated and passing"",""E2E integration test for the full offline-notify-retry cycle is implemented and passing"",""User interface reviewed and approved by the design team"",""Performance impact on app startup has been measured and is within acceptable limits"",""Story deployed and verified in the staging environment""]"
"US-036","Core Attendance Workflow","Subordinate manually re-triggers a failed data sync","Subordinate","As a Subordinate, I want to be able to manually trigger a re-sync of my offline attendance records that have failed to upload automatically, so that I can ensure my attendance data is not lost and is accurately recorded on the server.","Prevents data loss for offline attendance entries, ensures data integrity for reporting, reduces administrative overhead for manual corrections, and builds user trust in the system's reliability.","Should Have","3","[""US-033"",""US-035""]","[{""scenario"":""Successful manual re-sync of a failed record"",""given"":""I have a 'Sync Failed' notification displayed for an offline record"",""when"":""I tap the 'Retry Sync' button while my device has a stable internet connection"",""then"":""The system re-attempts to write the local record to Firestore, and upon success, the 'Sync Failed' notification is removed.""},{""scenario"":""Manual re-sync attempt fails due to no internet connectivity"",""given"":""I am viewing a 'Sync Failed' notification for an offline record"",""when"":""I tap the 'Retry Sync' button while my device is still offline"",""then"":""The system immediately displays an error message, such as 'Sync failed. Please check your internet connection and try again.', and the 'Sync Failed' notification remains visible.""}]","[""Implement the 'Retry Sync' button within the sync failure notification banner"",""Create logic to re-trigger the Firestore write operation for the specific failed record(s)"",""Handle success and various failure states (network vs. server error) with appropriate user feedback""]","[""All acceptance criteria validated and passing on both iOS and Android"",""E2E integration test for the manual sync happy path and failure path is implemented and passing"",""User interface reviewed and approved by the UX/UI designer"",""All error states are handled gracefully and logged appropriately"",""Story deployed and verified in the staging environment""]"
"US-037","Core Attendance Workflow","Supervisor views pending attendance records from subordinates","Supervisor","As a Supervisor, I want to see a clear and filterable list of all attendance records from my direct subordinates that are awaiting my review, so that I can efficiently manage my team's attendance, ensure accuracy, and take timely action on pending approvals.","Enables the core attendance approval workflow, ensuring that employee work hours are verified in a timely manner. This is a critical step for maintaining data integrity and accountability.","Must Have","5","[""US-011"",""US-015"",""US-028""]","[{""scenario"":""Supervisor views a list of pending records from direct subordinates only"",""given"":""a Supervisor is logged in and has at least one direct subordinate with a record in 'pending' status"",""when"":""the Supervisor navigates to their main dashboard"",""then"":""a list of all 'pending' records from their direct subordinates is displayed, and records from other teams are not visible.""},{""scenario"":""Supervisor has no pending records to review"",""given"":""a Supervisor is logged in and none of their subordinates have 'pending' records"",""when"":""the Supervisor navigates to the attendance review screen"",""then"":""a user-friendly message is displayed, such as 'No pending records to review.'""},{""scenario"":""Real-time Updates: List updates when a new record is submitted"",""given"":""a Supervisor is viewing their attendance review screen"",""when"":""one of their direct subordinates submits a new attendance record"",""then"":""the new 'pending' record automatically appears at the top of the list without requiring a manual refresh.""}]","[""Implement the Supervisor dashboard UI in the Flutter app"",""Develop a real-time Firestore query to fetch pending records where `supervisorId` matches the current user's ID"",""Create a composite index in `firestore.indexes.json` for the query (`supervisorId`, `status`)"",""Update Firestore Security Rules to enforce that a Supervisor can only read records of their direct reports""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this feature are written and tested"",""Required Firestore composite index is defined in `firestore.indexes.json`"",""Performance requirements (load time) verified"",""Accessibility requirements (screen reader support) validated""]"
"US-038","Core Attendance Workflow","Supervisor identifies flagged attendance records","Supervisor","As a Supervisor, I want to see clear visual indicators on attendance records that have been flagged for exceptions (like offline entry or clock discrepancy) in my approval dashboard, so that I can quickly identify records that require closer scrutiny and make more informed approval decisions.","Improves the efficiency and accuracy of the attendance approval process by focusing the Supervisor's attention on records that are anomalous or require special consideration, thereby enhancing data integrity.","Should Have","2","[""US-037"",""US-033"",""US-032""]","[{""scenario"":""Display indicator for offline entry"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'isOfflineEntry' flag"",""then"":""the record must display a distinct visual indicator (e.g., an icon or chip) representing an offline entry.""},{""scenario"":""Display indicator for clock discrepancy"",""given"":""a Supervisor is viewing their 'Pending Approvals' dashboard"",""when"":""an attendance record in the list has the 'clock_discrepancy' flag"",""then"":""the record must display a distinct visual indicator representing a clock discrepancy.""},{""scenario"":""View flag details on interaction"",""given"":""a Supervisor is viewing an attendance record with a flag indicator"",""when"":""the Supervisor taps (on mobile) or hovers (on web) over the indicator"",""then"":""a tooltip or popover must appear, displaying a short, user-friendly explanation of that flag.""}]","[""Create a reusable UI component in Flutter for displaying flags (icons/chips)"",""Update the Supervisor's dashboard list item to parse the `flags` array and render the indicators"",""Implement a tooltip or popover component for displaying flag descriptions""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented for the flag display logic, achieving >80% code coverage"",""User interface reviewed and approved by the Product Owner/Designer"",""Accessibility requirements validated with screen readers and contrast checkers"",""Story deployed and verified in the staging environment""]"
"US-039","Core Attendance Workflow","Supervisor approves a single attendance record","Supervisor","As a Supervisor, I want to approve a single pending attendance record for one of my subordinates so that I can validate their work hours and move the record to an 'approved' state for accurate reporting.","Enables the core attendance validation workflow, ensures data integrity for reporting, and provides accountability by formally confirming subordinate work hours. Approved records are the source of truth for data exports.","Must Have","2","[""US-037""]","[{""scenario"":""Successful approval of a pending record"",""given"":""I am a Supervisor viewing a 'pending' attendance record from my direct subordinate."",""when"":""I tap the 'Approve' button for that record."",""then"":""The system updates the record's status to 'approved', a success message is displayed, and the record is removed from my 'Pending Approvals' list.""},{""scenario"":""Audit Trail: Approval action is logged"",""given"":""I am a Supervisor and I am about to approve a pending record."",""when"":""The system successfully processes my approval."",""then"":""A new, immutable document is created in the `auditLog` collection with details of the approval action.""},{""scenario"":""Record was already processed by another user/process"",""given"":""I am a Supervisor viewing a 'pending' record, but an Admin has already approved it."",""when"":""I tap the 'Approve' button."",""then"":""The system prevents the update and displays an informative message, such as 'This record has already been processed.'""}]","[""Add an 'Approve' button to the pending approvals list/detail view"",""Implement the Firestore document update logic to change `status` to 'approved'"",""Update Firestore Security Rules to enforce that only the designated supervisor can approve"",""Create a Cloud Function trigger to write to the `auditLog` collection upon approval""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for this action are written and tested"",""Integration testing with the Firebase Emulator completed successfully"",""Performance requirements verified"",""Security requirements validated via security rule tests""]"
"US-040","Core Attendance Workflow","Supervisor rejects a single attendance record with a reason","Supervisor","As a Supervisor, I want to reject a subordinate's attendance record and be required to provide a reason, so that I can maintain accurate team records, provide clear feedback to my subordinate for correction, and ensure the rejection is documented for auditing purposes.","Ensures data accuracy in attendance records, provides a transparent and auditable approval workflow, and facilitates clear communication between supervisors and subordinates regarding attendance issues.","Must Have","2","[""US-037""]","[{""scenario"":""Supervisor successfully rejects a record with a valid reason"",""given"":""A Supervisor is viewing a 'pending' attendance record"",""when"":""The Supervisor selects 'Reject', enters a valid reason, and confirms"",""then"":""The record's status in Firestore is updated to 'rejected', the `rejectionReason` field is populated, and the record is removed from the pending list.""},{""scenario"":""Attempting to reject without providing a reason"",""given"":""A Supervisor has initiated the rejection process"",""when"":""The Supervisor attempts to confirm without entering a reason"",""then"":""The system displays a validation error 'A reason is required for rejection' and the action is blocked.""},{""scenario"":""Audit log is created for the rejection action"",""given"":""A Supervisor successfully rejects an attendance record"",""when"":""The record's status is updated"",""then"":""A new, immutable document is created in the `auditLog` collection detailing the rejection.""}]","[""Implement a 'Reject' button and a modal dialog for entering the rejection reason"",""Implement client-side and server-side validation for the mandatory reason"",""Update the Firestore document to set `status` to 'rejected' and save the `rejectionReason`"",""Update Firestore Security Rules to secure the rejection action""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented for the rejection dialog and its logic, achieving >80% coverage"",""Firestore Security Rules for this action are written and tested"",""An audit log entry is correctly generated upon rejection"",""Story deployed and verified in the staging environment""]"
"US-041","Core Attendance Workflow","Supervisor bulk-approves multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records from my subordinates and approve them all with a single action, so that I can efficiently manage my team's attendance and save significant time compared to approving each record individually.","Reduces administrative overhead for managers by streamlining a repetitive task, leading to faster attendance data processing and increased operational efficiency.","Should Have","5","[""US-037"",""US-039""]","[{""scenario"":""Successful bulk approval of multiple records"",""given"":""A Supervisor is viewing the 'Pending Approvals' list"",""when"":""The Supervisor selects three pending records and clicks the 'Approve Selected' button"",""then"":""The system initiates a batch update, and upon success, all three records are updated to 'approved' status and removed from the pending list.""},{""scenario"":""UI state for selection controls"",""given"":""A Supervisor is viewing the 'Pending Approvals' list"",""when"":""The Supervisor selects the first record"",""then"":""The 'Approve Selected' button becomes enabled and a counter displays '1 selected'.""},{""scenario"":""Bulk approval operation fails atomically"",""given"":""A Supervisor has selected multiple records for approval"",""when"":""The backend operation fails for any reason"",""then"":""The entire batch operation is rolled back, no records have their status changed, and an error message is shown.""}]","[""Implement multi-select UI (checkboxes, 'Select All') in the Supervisor's pending list"",""Create a callable Cloud Function to handle the backend logic securely and atomically"",""Use a Firestore Batched Write in the Cloud Function to ensure atomicity"",""Implement UI state changes (button disabled/enabled, counter updates)""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for both frontend logic and the Cloud Function, achieving >80% coverage"",""Integration testing between the client and the Cloud Function completed successfully using emulators"",""Performance requirements for the batch operation are verified"",""Security requirements, especially backend permission checks, are validated""]"
"US-042","Core Attendance Workflow","Supervisor bulk-rejects multiple attendance records","Supervisor","As a Supervisor, I want to select multiple pending attendance records and reject them all in a single action with a common reason, so that I can efficiently manage my team's attendance approvals and save time on repetitive administrative tasks.","Improves managerial efficiency by reducing the time and effort required to handle multiple similar attendance issues. Ensures consistent reasoning is applied to a batch of rejected records.","Could Have","5","[""US-037"",""US-040""]","[{""scenario"":""Supervisor successfully rejects multiple records with a common reason"",""given"":""a Supervisor has selected two or more 'pending' records"",""when"":""the Supervisor clicks 'Reject Selected', enters a valid reason in the confirmation modal, and confirms"",""then"":""the system atomically updates all selected records to 'rejected' and stores the common reason in each record.""},{""scenario"":""Supervisor attempts to reject records without providing a reason"",""given"":""a Supervisor has selected multiple records and opened the rejection modal"",""when"":""the Supervisor attempts to confirm without entering a reason"",""then"":""the system prevents the action and displays a validation error 'A reason is required'.""},{""scenario"":""One of the selected records is actioned by another process"",""given"":""a Supervisor has selected three pending records"",""when"":""an Admin approves one record, and the Supervisor then confirms the bulk rejection"",""then"":""the system processes the rejection for the remaining two 'pending' records and displays a notification to the Supervisor indicating a partial success.""}]","[""Implement multi-select UI and contextual 'Reject Selected' button"",""Create a modal for entering the common rejection reason"",""Develop a callable Cloud Function to handle the secure, atomic batch update"",""The function must validate the current status of each record before updating""]","[""All acceptance criteria validated and passing"",""Integration testing with the Firebase Emulator completed successfully"",""User interface reviewed and approved by the Product Owner/UX designer"",""Performance requirements for the batch update are verified"",""Security requirements validated, including Firestore rules and Cloud Function authorization""]"
"US-043","Core Attendance Workflow","Subordinate views the reason for a rejected record","Subordinate","As a Subordinate, I want to see the specific reason my Supervisor provided when they rejected my attendance record, so that I can understand the issue and take appropriate action, such as submitting a correction request or being more careful in the future.","Increases transparency in the approval process, reduces confusion and follow-up questions to supervisors, and empowers employees to correct their own data, leading to improved data quality and reduced administrative overhead.","Must Have","1","[""US-040""]","[{""scenario"":""Display of rejection reason for a rejected record"",""given"":""I am a Subordinate and have an attendance record that has been rejected"",""when"":""I navigate to my attendance history and view the details of the rejected record"",""then"":""The record's status is displayed as 'Rejected' and a section displays the exact text my Supervisor entered as the reason.""},{""scenario"":""Visual distinction of rejected records in the list view"",""given"":""I am a Subordinate viewing my list of attendance records"",""when"":""The list contains a rejected record"",""then"":""The rejected record must be visually distinct from others, for example, by using a red color indicator or an icon.""}]","[""Update the attendance history list item widget to show a visual indicator for 'rejected' status"",""Update the attendance detail screen to conditionally display a 'Reason for Rejection' section"",""Fetch and display the `rejectionReason` field from the Firestore document""]","[""All acceptance criteria validated and passing"",""Unit and widget tests implemented with >= 80% coverage for new code"",""Integration testing completed successfully against a staging environment"",""User interface reviewed and approved by the Product Owner/Designer"",""Accessibility requirements (screen reader, contrast) validated""]"
"US-044","Advanced Workflows","Pending approval is escalated to the next-level supervisor","System","As an Admin, I want pending attendance approvals to automatically escalate to the next supervisor in the hierarchy after a configurable period, so that approval workflows are not blocked by unavailable or unresponsive managers and attendance records are processed in a timely manner.","Ensures business continuity by preventing bottlenecks in the approval workflow. Guarantees timely processing of attendance records, improving operational efficiency and reducing the need for manual intervention by Admins.","Should Have","5","[""US-071"",""US-037"",""US-051""]","[{""scenario"":""A pending record is escalated to the next available supervisor"",""given"":""a tenant has configured an escalation period of 3 days and a record has been 'pending' for 4 days"",""when"":""the daily scheduled escalation Cloud Function runs"",""then"":""the record's `supervisorId` field is updated to the ID of the original supervisor's own manager, and an entry is created in the `auditLog`.""},{""scenario"":""The assigned supervisor is at the top of the hierarchy"",""given"":""a record is overdue and the assigned supervisor has no manager"",""when"":""the escalation function runs"",""then"":""the record's `supervisorId` remains unchanged, and the record is flagged with `escalation_failed_no_supervisor` for administrative review.""},{""scenario"":""The next-level supervisor's account is deactivated"",""given"":""a record is overdue, and the direct supervisor's manager is deactivated"",""when"":""the escalation function runs"",""then"":""the system skips the deactivated manager and successfully escalates the record to the next active supervisor in the chain.""}]","[""Implement a daily scheduled Cloud Function in TypeScript"",""Develop logic to traverse the user hierarchy stored in Firestore"",""Handle edge cases like top-level managers and deactivated users"",""Use Firestore transactions to update the attendance record and write to the audit log atomically""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function logic with >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Performance requirements (indexed query) verified"",""Story deployed and verified in staging environment via a manual E2E test plan""]"
"US-045","Advanced Workflows","Subordinate requests a correction to an attendance record","Subordinate","As a Subordinate, I want to submit a request to correct the check-in or check-out time on my attendance record and provide a mandatory reason for the change, so that I can fix any mistakes I've made and ensure my work hours are accurately reflected for my supervisor's review.","Ensures data integrity by providing a formal, auditable workflow for correcting attendance errors. This enhances accountability and streamlines the process for both employees and supervisors.","Must Have","5","[""US-028"",""US-039"",""US-051""]","[{""scenario"":""Submitting a valid correction request"",""given"":""I am viewing an 'approved' or 'rejected' attendance record in my history"",""when"":""I enter a valid new time, provide a justification of at least 20 characters, and tap 'Submit Request'"",""then"":""The attendance record's status in Firestore is updated to 'correction_pending' and the proposed changes are stored on the document.""},{""scenario"":""Submitting a request with no justification"",""given"":""I am on the attendance correction form"",""when"":""I try to submit without entering a justification"",""then"":""The submission is blocked, and an error message 'Justification is required...' is displayed.""},{""scenario"":""Submitting a correction request while offline"",""given"":""I am on the attendance correction form and my device is offline"",""when"":""I submit a valid correction request"",""then"":""The request is queued locally and automatically synced to the server when connectivity is restored.""}]","[""Implement a 'Request Correction' UI flow in the Flutter app"",""Update the Firestore data model for attendance records to include fields for proposed changes and justification"",""Update Firestore Security Rules to allow users to update their own records only to a 'correction_pending' state"",""Implement a Cloud Function trigger to create an audit log entry for the request""]","[""All acceptance criteria validated and passing"",""Integration testing for Firestore writes and security rules completed successfully"",""User interface reviewed and approved for both iOS and Android"",""Security requirements validated via emulator tests"",""Story deployed and verified in the staging environment""]"
"US-046","Advanced Workflows","Supervisor reviews an attendance correction request","Supervisor","As a Supervisor, I want to view a clear, detailed summary of an attendance correction request, including the original times, the proposed new times, and the subordinate's justification, so that I can make an informed and fair decision to either approve or reject the change.","Enables informed and auditable decisions on attendance corrections, which maintains data integrity and supports accurate record-keeping. This improves administrative efficiency by providing all necessary context in a single view.","Must Have","3","[""US-045"",""US-037""]","[{""scenario"":""Correction request detail view displays all required information"",""given"":""I am a Supervisor viewing the details of a 'Correction Pending' request"",""when"":""the view loads"",""then"":""the following information is displayed: Subordinate's name, date, original times, requested new times, and the full justification.""},{""scenario"":""Proposed changes are visually highlighted"",""given"":""I am viewing a correction request where only the check-in time was changed"",""when"":""the view is displayed"",""then"":""the 'Requested New Check-In Time' field is visually distinct (e.g., different color, bold font).""},{""scenario"":""Detail view provides clear action buttons"",""given"":""I am viewing the details of a correction request"",""when"":""the view is displayed"",""then"":""there are clearly labeled 'Approve' and 'Reject' buttons available.""}]","[""Create a new detail view screen or modal in the Supervisor's dashboard"",""Implement UI logic to conditionally highlight changed data fields"",""Fetch and display all relevant data from the 'correction_pending' Firestore document"",""Update Firestore Security Rules to ensure a Supervisor can only view requests from their direct subordinates""]","[""All acceptance criteria validated and passing"",""Integration testing against the Firebase Emulator completed successfully"",""Firestore Security Rules for this feature are written and tested"",""User interface reviewed and approved by the Product Owner/UX designer"",""Story deployed and verified in the staging environment""]"
"US-047","Advanced Workflows","Supervisor approves an attendance correction request","Supervisor","As a Supervisor, I want to approve a subordinate's attendance correction request, so that I can ensure the accuracy of their attendance records and maintain a complete, auditable history of all changes.","Ensures data integrity and accuracy for attendance records. Provides a clear, auditable trail of all data modifications for compliance and dispute resolution. Streamlines the data management workflow by empowering direct managers.","Must Have","5","[""US-045"",""US-046"",""US-051""]","[{""scenario"":""Supervisor successfully approves a correction request"",""given"":""A Supervisor is viewing a pending correction request"",""when"":""The Supervisor clicks the 'Approve' button"",""then"":""The system executes an atomic transaction to update the record's status to 'approved', apply the corrected times, add a 'manually-corrected' flag, and create an immutable audit log entry.""},{""scenario"":""Audit Log Integrity: The approval action is logged correctly"",""given"":""A Supervisor approves a correction request"",""when"":""The approval is successfully processed"",""then"":""A new document is created in the 'auditLog' collection with details of the change, including old values, new values, and justification.""}]","[""Create a callable Cloud Function to handle the secure, transactional backend logic"",""Use a Firestore Transaction in the function to ensure atomicity across the 'attendance' and 'auditLog' collections"",""Connect the 'Approve' button in the UI to call this Cloud Function"",""Update Firestore security rules to protect the action""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function, with >80% coverage"",""Integration testing completed successfully between the client and backend"",""Firestore Security Rules written, tested, and verified"",""Performance requirements verified""]"
"US-048","Advanced Workflows","Supervisor rejects an attendance correction request","Supervisor","As a Supervisor, I want to reject an invalid attendance correction request from my subordinate and provide a reason, so that I can maintain the accuracy of attendance records and ensure invalid changes are not applied.","Ensures the integrity and accuracy of attendance data by allowing supervisors to prevent incorrect or fraudulent modifications. It also provides a clear audit trail for managerial decisions and communicates the outcome transparently to the employee.","Must Have","5","[""US-045"",""US-046"",""US-049"",""US-051""]","[{""scenario"":""Supervisor successfully rejects a correction request with a reason"",""given"":""I am a Supervisor viewing a 'correction_pending' request"",""when"":""I tap 'Reject', enter a valid reason, and confirm"",""then"":""The record's status reverts to its state before the correction was requested, an audit log of the rejection is created, and the subordinate is notified.""},{""scenario"":""Supervisor attempts to reject a request without providing a reason"",""given"":""I am a Supervisor in the rejection confirmation dialog"",""when"":""I attempt to confirm without entering a reason"",""then"":""The action is prevented and an error message is displayed indicating a reason is required.""}]","[""Implement the 'Reject' button and confirmation modal in the UI"",""Create a callable Cloud Function to handle the rejection logic"",""The function must atomically revert the record's status and create an audit log entry"",""Integrate with the push notification service (FCM) to inform the subordinate""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function logic achieve >80% coverage"",""Integration tests confirming the end-to-end flow are passing in the emulator environment"",""Security rules have been written and tested to protect the action"",""The push notification content and delivery have been verified""]"
"US-049","Advanced Workflows","Subordinate is notified of a correction request's outcome","Subordinate","As a Subordinate, I want to receive a push notification on my mobile device when my attendance correction request is either approved or rejected, so that I am immediately informed of the outcome without having to manually check the app.","Improves user experience by providing timely, proactive feedback. Closes the communication loop for the correction workflow, reducing user uncertainty and the need for manual follow-ups with supervisors.","Should Have","5","[""US-047"",""US-048""]","[{""scenario"":""Notification for an approved correction request"",""given"":""a Subordinate has submitted a correction request"",""when"":""their Supervisor approves the request"",""then"":""the Subordinate's device receives a push notification: 'Your attendance correction for [Date] has been approved.'""},{""scenario"":""Tapping notification deep-links into the app"",""given"":""the Subordinate has received a notification for a correction outcome"",""when"":""the Subordinate taps on the notification"",""then"":""the application opens and navigates directly to the details screen for the specific attendance record.""}]","[""Create a Cloud Function triggered by Firestore document updates on the attendance collection"",""Integrate the FCM Admin SDK in the function to send messages"",""Implement logic in the Flutter client to handle incoming messages and deep linking""]","[""All acceptance criteria validated and passing on both iOS and Android"",""E2E tests confirming the entire flow from supervisor action to subordinate notification are passing"",""Performance of the Cloud Function is verified to be within acceptable limits"",""Story deployed and verified in the staging environment""]"
"US-050","Advanced Workflows","Admin directly edits an attendance record with mandatory, auditable justification","Admin","As an Admin, I want to directly edit any employee's attendance record and provide a mandatory justification for the change, so that I can correct data inaccuracies or exceptions efficiently and maintain a fully auditable trail of all high-privilege modifications for compliance and accountability.","Ensures data accuracy for reporting and record-keeping. Provides a mechanism for authorized personnel to correct errors that fall outside the standard workflow, maintaining operational efficiency and compliance.","Must Have","5","[""US-059"",""US-051""]","[{""scenario"":""Admin successfully edits an attendance record"",""given"":""an Admin is viewing an attendance report"",""when"":""the Admin clicks 'Edit', modifies the check-out time, provides a valid justification (20+ characters), and saves"",""then"":""the system updates the record in Firestore, adds a 'manually-corrected' flag, and creates an immutable audit log entry with the old value, new value, and justification.""},{""scenario"":""Admin attempts to save an edit with a justification that is too short"",""given"":""an Admin has opened the edit modal and made a change"",""when"":""the Admin enters a justification shorter than 20 characters and attempts to save"",""then"":""the save operation is prevented and an error message is displayed indicating the minimum character requirement.""}]","[""Implement 'Edit' UI modal in the Admin web dashboard"",""Create a transactional Firebase Cloud Function to ensure atomicity between updating the record and creating the audit log entry"",""Update Firestore Security Rules to prevent direct client-side modification, forcing use of the Cloud Function""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for UI logic and Cloud Function, achieving >80% coverage"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Security requirements validated, including Firestore rules and function authentication"",""Story deployed and verified in the staging environment""]"
"US-051","Reporting & Integrations","Admin views the audit log of data changes","Admin","As an Admin, I want to view a filterable and immutable audit log of all critical system actions, so that I can ensure compliance, maintain accountability for data changes, and troubleshoot issues effectively.","Provides a trustworthy, unalterable record for internal/external audits, enhances accountability by tracking all critical data modifications, and aids in troubleshooting by showing a clear history of events.","Must Have","8","[""US-050"",""US-047"",""US-008"",""US-086""]","[{""scenario"":""Admin accesses the audit log report and views records"",""given"":""the Admin is logged in and is on the web dashboard"",""when"":""the Admin navigates to the 'Audit Log Report' section"",""then"":""the system displays a paginated list of audit log entries in reverse chronological order.""},{""scenario"":""Admin filters the audit log by date range and Actor"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin selects a start date, end date, and a specific user (Actor) and applies the filter"",""then"":""the list updates to show only records matching both the date range and the selected actor.""},{""scenario"":""Audit log is immutable from the UI"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin interacts with the list of entries or the detail view"",""then"":""there are no UI elements (e.g., 'Edit', 'Delete' buttons) that would allow modification or deletion of a log entry.""}]","[""Implement the Audit Log report UI in the Admin web dashboard"",""Develop efficient Firestore queries with multiple optional filters"",""Define and deploy required composite indexes in `firestore.indexes.json`"",""Implement robust server-side pagination with Firestore cursors""]","[""All acceptance criteria validated and passing"",""Integration testing of Firestore queries and security rules completed successfully"",""Performance requirements (query speed) verified"",""Security requirements (role access, immutability) validated"",""All necessary Firestore indexes are defined in IaC and deployed""]"
"US-052","Event & Calendar Management","Supervisor creates a new event","Supervisor","As a Supervisor, I want to create a new event with a title, description, start time, and end time, so that I can formally schedule and communicate activities like meetings, training sessions, or field visits to my team members.","Enables formal scheduling of team activities within the application, improving team coordination and providing context for attendance records. This centralizes communication and reduces reliance on external tools.","Must Have","3","[""US-011"",""US-021""]","[{""scenario"":""Supervisor successfully creates a single, non-recurring event"",""given"":""I am a Supervisor on the 'Create Event' screen"",""when"":""I enter a valid title, description, and a valid start/end time range, and tap 'Save'"",""then"":""A new event document is created in Firestore with the provided details, and a success notification is displayed.""},{""scenario"":""Attempting to save an event where the end time is before the start time"",""given"":""I am a Supervisor on the 'Create Event' screen"",""when"":""I select an 'End Time' that is earlier than the 'Start Time' and tap 'Save'"",""then"":""A validation error 'End time must be after start time' is displayed, and the event is not saved.""},{""scenario"":""A non-supervisor user cannot create an event"",""given"":""A user with the 'Subordinate' role is logged in"",""when"":""They attempt to access the event creation functionality"",""then"":""The UI for creating an event is not visible, and any direct API attempt is rejected by Firestore Security Rules.""}]","[""Implement the 'Create Event' form UI in the Flutter app"",""Integrate native-style date/time pickers"",""Implement form state management and validation (e.g., using Riverpod)"",""Update Firestore Security Rules to allow Supervisors/Admins to write to the `/events` collection""]","[""All acceptance criteria validated and passing"",""Firestore Security Rules for event creation are written and tested"",""Integration testing against the Firebase Emulator completed successfully"",""User interface reviewed for usability and adherence to design guidelines"",""Feature is manually verified on both iOS and Android""]"
"US-053","Event & Calendar Management","Supervisor creates a recurring event","Supervisor","As a Supervisor, I want to define recurrence rules (daily, weekly, monthly) when creating an event, so that I can efficiently schedule regular activities like team meetings or site visits without manual repetition.","Reduces administrative time spent on scheduling repetitive tasks, ensures consistency in team schedules, and minimizes the risk of human error in creating regular events.","Should Have","5","[""US-052""]","[{""scenario"":""Supervisor creates a weekly recurring event for specific days"",""given"":""A Supervisor is on the 'Create Event' screen"",""when"":""the Supervisor enables 'Repeat', selects 'Weekly', checks 'Tuesday' and 'Thursday', and sets an end date four weeks away"",""then"":""the system creates 8 individual event instances, one for each Tuesday and Thursday within the period.""},{""scenario"":""Attempting to create a recurring event series longer than the allowed maximum"",""given"":""A Supervisor is creating a recurring event"",""when"":""they set an 'End Date' that is more than 1 year after the 'Start Date'"",""then"":""the system displays a validation error 'Recurring events cannot span more than one year' and prevents saving.""}]","[""Implement UI controls for defining recurrence rules in the event creation form"",""Create a Firebase Cloud Function (on document create) to process the recurrence rule and generate the individual event instances asynchronously"",""Update the event data model to support a master recurrence document and child event instances""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function's date logic implemented with >80% coverage"",""Integration testing of the end-to-end flow (UI -> Firestore -> Cloud Function -> Firestore) completed successfully"",""User interface reviewed and approved for usability and accessibility"",""Documentation for the recurrence data model and Cloud Function logic is created""]"
"US-054","Event & Calendar Management","Supervisor assigns an event to specific individuals","Supervisor","As a Supervisor, I want to select one or more specific individuals from my team(s) when creating or editing an event, so that I can accurately assign tasks, training, or appointments to only the relevant team members, ensuring clear communication and efficient scheduling.","Enables targeted task management and precise scheduling, improving operational efficiency and ensuring clear communication by reducing irrelevant notifications for team members.","Must Have","5","[""US-011"",""US-052""]","[{""scenario"":""Supervisor assigns a new event to multiple individuals"",""given"":""A Supervisor is on the 'Create Event' screen with at least two direct subordinates"",""when"":""The Supervisor selects two specific subordinates from the list and saves the event"",""then"":""A new event document is created with its 'assignedUserIds' array containing the unique IDs of the two selected subordinates.""},{""scenario"":""The list of assignable users is correctly scoped"",""given"":""A Supervisor is on the user assignment screen for an event"",""when"":""The application fetches the list of users to display for assignment"",""then"":""The list must only contain users for whom the 'supervisorId' field matches the current Supervisor's user ID.""}]","[""Implement a multi-select user list in the event creation/editing form"",""Develop a search/filter bar for the user list"",""Update Firestore Security Rules to enforce that a Supervisor can only query for their direct subordinates""]","[""All acceptance criteria validated and passing"",""Integration testing with Firestore Emulator completed successfully"",""Firestore Security Rules for this feature are implemented and tested"",""User interface reviewed and approved for usability and accessibility"",""Performance requirements verified with a large dataset""]"
"US-055","Event & Calendar Management","Supervisor assigns an event to an entire team","Supervisor","As a Supervisor, I want to assign an event to one or more of my teams in a single action, so that I can efficiently schedule activities for entire groups without having to select each team member individually.","Increases operational efficiency for managers by reducing manual data entry. Minimizes the risk of human error in event assignments. Streamlines the process of communicating scheduled activities to large groups.","Should Have","5","[""US-011"",""US-015"",""US-052"",""US-057"",""US-058""]","[{""scenario"":""Supervisor assigns a new event to a single team"",""given"":""a Supervisor is on the 'Create Event' screen"",""when"":""the Supervisor selects one team they manage from the 'Assign to Teams' list and saves the event"",""then"":""a new event document is created with the selected team's ID in the 'assignedTeamIds' array.""},{""scenario"":""Supervisor only sees teams they manage"",""given"":""a Supervisor is logged in and another team exists which they do not manage"",""when"":""the Supervisor views the 'Assign to Teams' list"",""then"":""the other team is not visible in the list of options.""}]","[""Implement a multi-select component for teams in the event creation UI"",""Update Firestore Security Rules to restrict team queries by 'supervisorId'"",""Update downstream features (Subordinate calendar view, push notifications) to resolve team-based assignments""]","[""All acceptance criteria validated and passing"",""End-to-end test scenario (Supervisor assigns, Subordinate views) is passing"",""User interface reviewed and approved by UX/Product Owner"",""Performance requirements for team list loading are verified"",""Security requirements validated via manual and automated tests""]"
"US-056","Event & Calendar Management","Subordinate links attendance to an event","Subordinate","As a Subordinate, I want to select from a list of my assigned events for the day when I check in, so that my attendance record accurately reflects the specific activity I am starting to work on.","Enriches attendance data by adding context, enabling better reporting on time spent on specific tasks. This improves resource management and provides supervisors with greater visibility into team activities.","Should Have","5","[""US-028"",""US-052"",""US-054"",""US-057""]","[{""scenario"":""User with assigned events links one during check-in"",""given"":""I am a logged-in Subordinate with multiple events assigned for the day"",""when"":""I initiate the check-in process, select one event from the list, and confirm"",""then"":""a new attendance record is created in Firestore with the `eventId` of the chosen event.""},{""scenario"":""User with no assigned events for the day performs a check-in"",""given"":""I am a logged-in Subordinate with no events assigned for the day"",""when"":""I initiate the check-in process"",""then"":""the system bypasses the event selection step and creates a new attendance record with a null `eventId`.""}]","[""Modify the check-in workflow to include a conditional event selection step"",""Implement an efficient Firestore query to fetch the user's events for the current day"",""Update the attendance data model to include an optional `eventId` field"",""Implement offline support by reading from a local cache of the user's calendar""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully for online and offline scenarios"",""User interface reviewed and approved by the design/product owner"",""Performance of the event query is verified to be within the defined limits"",""Firestore security rules updated and tested""]"
"US-057","Event & Calendar Management","Subordinate views their event calendar","Subordinate","As a Subordinate, I want to view a calendar that displays all events I am assigned to, either individually or as part of a team, so that I can clearly see my work schedule and plan my activities.","Improves operational efficiency by providing employees with clear, self-service access to their work schedules. Reduces administrative overhead for Supervisors and minimizes miscommunication regarding assignments.","Must Have","5","[""US-052"",""US-054"",""US-055""]","[{""scenario"":""Calendar displays both individually-assigned and team-assigned events"",""given"":""the Subordinate is assigned to an individual event and is a member of a team assigned to a team event"",""when"":""they view their calendar for the relevant month"",""then"":""visual indicators for both events are present on their respective days.""},{""scenario"":""User views event details"",""given"":""the user is viewing the calendar and sees an event on a specific day"",""when"":""they tap on the event indicator or the day itself"",""then"":""a details view of the event is displayed in a strictly read-only format.""},{""scenario"":""Viewing calendar while offline"",""given"":""the user has previously viewed their calendar while online, caching the data"",""when"":""they navigate to the calendar screen while offline"",""then"":""the calendar displays the last-synced events from the local cache.""}]","[""Integrate a Flutter calendar UI library"",""Implement a complex Firestore query to fetch events for a user (checking `assignedUserIds` and `assignedTeamIds`)"",""Implement client-side logic to expand recurring event rules for display"",""Integrate local data persistence for offline caching""]","[""All acceptance criteria validated and passing"",""Integration testing completed for online and offline scenarios"",""Performance requirements (load times) verified on a physical test device"",""Firestore Security Rules for event data are written and tested"",""Story deployed and verified in the staging environment""]"
"US-058","Event & Calendar Management","Subordinate receives a push notification for a new event","Subordinate","As a Subordinate, I want to receive a real-time push notification on my mobile device whenever a new event is assigned to me, so that I am immediately aware of changes to my schedule and can plan my work accordingly without having to manually check the app.","Improves timely communication of work assignments, reduces the likelihood of missed events, and increases user engagement by providing proactive updates.","Should Have","5","[""US-052"",""US-054"",""US-055"",""US-057""]","[{""scenario"":""Notification for direct event assignment"",""given"":""a Subordinate is logged in and has granted notification permissions"",""when"":""a Supervisor creates a new event and assigns it directly to that Subordinate"",""then"":""the Subordinate's device receives a push notification containing the event title within 30 seconds.""},{""scenario"":""Tapping notification opens the event calendar"",""given"":""the Subordinate has received a new event notification and the app is in the background or closed"",""when"":""the Subordinate taps the notification"",""then"":""the application launches and navigates directly to the user's event calendar view.""}]","[""Integrate Firebase Cloud Messaging (FCM) SDK into the Flutter client"",""Create an `onCreate` Cloud Function for the events collection"",""Implement backend logic to resolve all assigned users (direct and via team) and send them notifications via FCM Admin SDK"",""Implement deep-linking logic in the Flutter client""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Cloud Function code is peer-reviewed, merged, and deployed"",""Manual E2E tests confirm correct behavior for all scenarios"",""The user's FCM token is successfully stored/updated in their Firestore document upon login"",""Story deployed and verified in the staging environment""]"
"US-059","Reporting & Integrations","Admin views summary attendance reports on the web dashboard","Admin","As an Admin, I want to view aggregated summary reports of attendance for daily, weekly, and monthly periods on my web dashboard, so that I can quickly assess workforce attendance trends, monitor overall presence, and make informed operational decisions without manually analyzing individual records.","Provides immediate, actionable insights into workforce attendance, enabling efficient monitoring, trend analysis, and proactive management. Reduces administrative overhead by eliminating the need for manual data compilation.","Must Have","8","[""US-021"",""US-028"",""US-069""]","[{""scenario"":""Viewing a specific daily summary report"",""given"":""I am an Admin viewing the reports page"",""when"":""I select the 'Daily Summary' view and choose a specific past date"",""then"":""the dashboard updates to show the total number of active users, the number present, the number absent, and the attendance percentage for that date.""},{""scenario"":""Viewing a weekly summary report"",""given"":""I am an Admin viewing the reports page"",""when"":""I select the 'Weekly Summary' view and choose a specific week"",""then"":""the dashboard displays the average daily attendance percentage for that week and a trend chart visualizing daily attendance.""},{""scenario"":""Report for a period with no attendance data"",""given"":""I am viewing the reports page"",""when"":""I select a date range with no check-in data"",""then"":""the dashboard displays a message 'No attendance data available for the selected period'.""}]","[""Implement a server-side pre-aggregation strategy using a daily scheduled Cloud Function to create daily summary documents"",""Implement the reporting UI in the Admin web dashboard with tabs for Daily, Weekly, Monthly views"",""Integrate a charting library (e.g., fl_chart) for data visualization"",""Develop Firestore queries to fetch and display the aggregated data""]","[""All acceptance criteria validated and passing"",""Performance requirements verified against a large, seeded dataset"",""Security rules are in place and tested to ensure tenant data isolation"",""Documentation for the reporting feature is updated"",""Story deployed and verified in the staging environment""]"
"US-060","Reporting & Integrations","Admin filters attendance reports by multiple criteria","Admin","As an Admin, I want to apply filters for date range, user, team, and attendance status on the reporting dashboard, so that I can efficiently narrow down the data to find specific information, perform targeted analysis, and generate precise reports.","Enables efficient and targeted data analysis, saving time, improving decision-making, and supporting audit/compliance tasks by allowing Admins to isolate specific subsets of attendance data.","Must Have","5","[""US-059""]","[{""scenario"":""Filter by Date Range and Team"",""given"":""the Admin is viewing an attendance report"",""when"":""the Admin selects a start date, an end date, and a specific team"",""then"":""the report data refreshes to display only attendance records that match both the date range and the selected team.""},{""scenario"":""Clear all applied filters"",""given"":""the Admin has applied one or more filters to the report"",""when"":""the Admin clicks a 'Clear Filters' or 'Reset' button"",""then"":""all filter controls are reset to their default state and the report data reverts to the complete, unfiltered view.""},{""scenario"":""Filter combination yields no results"",""given"":""the Admin is viewing an attendance report"",""when"":""the Admin applies a combination of filters that does not match any records"",""then"":""the report area displays a user-friendly message, such as 'No records match the selected criteria'.""}]","[""Implement reusable filter components in the Admin web dashboard (date range, user/team/status dropdowns)"",""Construct dynamic, multi-conditional Firestore queries on the backend"",""Identify, create, and deploy necessary composite indexes in `firestore.indexes.json`"",""Manage the state of multiple filters on the frontend and trigger data refetches""]","[""All acceptance criteria validated and passing"",""All required Firestore composite indexes are defined in `firestore.indexes.json` and deployed"",""Performance requirements verified against a large, seeded dataset"",""UI reviewed for usability and adherence to design specifications"",""Accessibility requirements (WCAG 2.1 AA) validated""]"
"US-061","Reporting & Integrations","Admin views a late arrival / early departure report","Admin","As an Admin, I want to view a 'Late Arrival / Early Departure' report, so that I can efficiently monitor employee punctuality, identify attendance patterns, and enforce our organization's working hour policies.","Provides actionable insights into workforce punctuality, enabling data-driven management decisions, improving discipline, and supporting HR processes like performance reviews. Automates a tedious manual monitoring task.","Should Have","5","[""US-072"",""US-069"",""US-060""]","[{""scenario"":""Correctly Identifying Late Arrivals"",""given"":""the tenant's working hours are set from 09:00 to 17:00"",""when"":""a user checks in at 09:15 and I view the report"",""then"":""the report must list this record as a late arrival with a deviation of '15 minutes late'.""},{""scenario"":""Correctly Identifying Early Departures"",""given"":""the tenant's working hours are set from 09:00 to 17:00"",""when"":""a user checks out at 16:30 and I view the report"",""then"":""the report must list this record as an early departure with a deviation of '30 minutes early'.""},{""scenario"":""No Working Hours Configured"",""given"":""the default working hours have NOT been configured for my tenant"",""when"":""I navigate to the 'Late Arrival / Early Departure Report'"",""then"":""the system must display an informative message prompting me to configure working hours in Settings.""}]","[""Implement the report UI in the Admin dashboard"",""Develop report generation logic (client-side or callable Cloud Function) that performs timezone-aware calculations"",""Integrate with the central tenant configuration to fetch working hours and timezone"",""Optimize Firestore queries for performance""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully in the emulator environment"",""Performance requirements verified against a representative test dataset"",""Security rules updated and tested to restrict access to Admins"",""Story deployed and verified in the staging environment""]"
"US-062","Reporting & Integrations","Admin views an exception report to identify and manage anomalous attendance records","Admin","As an Admin, I want to view a dedicated exception report so that I can efficiently identify, review, and address attendance records that deviate from the standard process, ensuring data accuracy and policy compliance.","Improves administrative efficiency by consolidating problematic records into a single view. Enhances data integrity by enabling proactive identification and correction of errors. Supports policy enforcement by highlighting non-standard attendance events.","Should Have","5","[""US-031"",""US-032"",""US-033"",""US-050"",""US-060""]","[{""scenario"":""Viewing the exception report with all exception types"",""given"":""there are attendance records with 'isOfflineEntry', 'auto-checked-out', 'manually-corrected', or 'clock_discrepancy' flags"",""when"":""I navigate to the 'Exception Report'"",""then"":""the system displays a list of all attendance records that have at least one of these flags.""},{""scenario"":""Filtering the report by a single exception type"",""given"":""I am viewing the Exception Report"",""when"":""I use the filter control to select only 'Missed Check-out' ('auto-checked-out' flag)"",""then"":""the report view updates to show only records that have the 'auto-checked-out' flag.""},{""scenario"":""Combining exception type filters with other standard filters"",""given"":""I am viewing the Exception Report"",""when"":""I filter by exception type 'Manually Corrected', a specific date range, and a specific team"",""then"":""the report updates to show only records that meet all three criteria.""}]","[""Implement the Exception Report UI in the Admin dashboard"",""Add a multi-select filter for exception types"",""Design the Firestore query and necessary composite indexes to filter on the 'flags' array in combination with other filters"",""Add visual tags/icons to the report table to indicate exception types""]","[""All acceptance criteria validated and passing"",""E2E tests for filtering and viewing the report are passing"",""Performance requirements (load times) verified against a representative dataset"",""Required Firestore indexes are defined in `firestore.indexes.json` and deployed"",""Story deployed and verified in the staging environment""]"
"US-063","Reporting & Integrations","Admin views and filters the audit log report","Admin","As an Admin, I want to access a detailed and filterable audit log report, so that I can review all critical system actions, ensure compliance, and investigate any changes made within my organization's tenant for security and accountability purposes.","Provides a tamper-proof record of critical activities for security audits, compliance verification (e.g., GDPR), accountability, and troubleshooting administrative actions.","Must Have","5","[""US-050""]","[{""scenario"":""Admin accesses the audit log report and views records"",""given"":""the Admin is logged in"",""when"":""the Admin navigates to the 'Audit Log Report' section"",""then"":""the system displays a paginated list of audit log entries in reverse chronological order.""},{""scenario"":""Admin filters the audit log by date range and action type"",""given"":""the Admin is viewing the audit log report"",""when"":""the Admin selects a date range and an action type (e.g., 'Direct Data Edit')"",""then"":""the list of entries updates to show only records that satisfy both criteria.""},{""scenario"":""Admin views detailed information for a specific log entry"",""given"":""the Admin is viewing the list of audit log entries"",""when"":""the Admin clicks on a specific entry"",""then"":""a modal or expanded view is displayed showing all details for that entry, including `oldValue` and `newValue` if present.""}]","[""Implement the Audit Log Report UI in the Admin web dashboard, including filters and pagination"",""Design and test Firestore queries with multiple optional filters"",""Define and deploy required composite indexes in `firestore.indexes.json`"",""Implement efficient server-side pagination with Firestore cursors""]","[""All acceptance criteria validated and passing"",""Performance requirements (query speed) verified"",""Security requirements (role access, immutability) validated"",""All necessary Firestore indexes are defined in IaC and deployed"",""Story deployed and verified in the staging environment""]"
"US-064","Reporting & Integrations","Admin exports a report to CSV","Admin","As an Admin, I want to export the data from any report view on the web dashboard into a CSV file, so that I can perform offline analysis, share the data with stakeholders, or use it in other business tools.","Enables data portability for offline analysis, custom reporting, auditing, and integration with external business processes (e.g., payroll data preparation).","Should Have","5","[""US-059"",""US-060"",""US-061"",""US-062"",""US-063""]","[{""scenario"":""Exporting a filtered report"",""given"":""an Admin is viewing the 'Attendance Summary' report, filtered for 'Team Alpha'"",""when"":""the Admin clicks the 'Export to CSV' button"",""then"":""a CSV file is downloaded, and its data rows correspond exactly to the filtered data for 'Team Alpha'.""},{""scenario"":""CSV file correctly handles special characters"",""given"":""a report contains data with commas, quotes, and other special characters"",""when"":""the Admin exports the report to CSV"",""then"":""the downloaded CSV file is correctly formatted, with fields properly enclosed in quotes, and opens without data corruption.""}]","[""Develop a reusable export component in Flutter for Web"",""Use a Dart/Flutter package for client-side CSV generation"",""Implement logic to fetch all data for the current filter set (handling pagination)"",""Implement non-blocking UI feedback for potentially long-running export preparations""]","[""All acceptance criteria validated and passing"",""Manual testing confirms correct functionality and file integrity on all target browsers"",""Performance requirements verified for moderately sized reports"",""Security requirements validated (role-based access)"",""Story deployed and verified in staging environment""]"
"US-065","Reporting & Integrations","Admin configures automatic data export to Google Sheets","Admin","As an Admin, I want to configure a secure, automated, and scheduled export of approved attendance data to a Google Sheet, so that I can streamline our reporting process, perform custom analysis, and make the data easily accessible for other business functions.","Automates the data export process, reducing manual effort and potential for human error. Enables seamless integration with external business workflows (e.g., payroll, advanced analytics).","Could Have","13","[""US-021"",""US-039"",""US-066""]","[{""scenario"":""Admin successfully configures a new daily export"",""given"":""The Admin is on the 'Integrations' settings page."",""when"":""The Admin clicks 'Connect to Google Sheets', completes the OAuth flow, provides a name for a new sheet, selects a 'Daily' schedule, and saves."",""then"":""A new Google Sheet is created in the Admin's Drive, and the UI updates to show an 'Active' status.""},{""scenario"":""Scheduled export function runs successfully"",""given"":""The Google Sheets export is configured and active, and there are new 'approved' attendance records."",""when"":""The scheduled Cloud Function is triggered."",""then"":""The new records are appended as rows to the linked Google Sheet, and the 'Last Sync' timestamp is updated.""},{""scenario"":""Export fails because the target Google Sheet was deleted"",""given"":""The export is configured, but the Admin has deleted the target sheet."",""when"":""The next scheduled export runs."",""then"":""The function fails, the integration status is updated to 'Error', and the Admin dashboard displays an alert.""}]","[""Implement the full end-to-end Google Sheets export workflow"",""Create the Admin dashboard UI for the OAuth 2.0 consent flow"",""Develop a callable Cloud Function for secure token exchange and storage"",""Develop a scheduled Cloud Function to query and append records"",""Implement robust error handling and state management for the integration""]","[""All acceptance criteria validated and passing"",""Successful end-to-end integration test has been performed"",""Security review of the OAuth token handling process is complete and approved"",""UI is responsive and meets accessibility standards"",""The feature is deployed and verified in the staging environment""]"
"US-066","Reporting & Integrations","Admin authorizes Google Drive/Sheets access via OAuth 2.0","Admin","As an Admin, I want to initiate a secure OAuth 2.0 flow to authorize the application to access my Google Drive and Sheets, so that I can enable the automated export of attendance data to a designated Google Sheet without compromising my account credentials.","Enables the core functionality of automated data export (US-065) by establishing a secure, user-consented connection to Google services. This builds trust and automates a critical reporting workflow for organizations.","Could Have","5","[""US-065""]","[{""scenario"":""Successful Authorization Flow"",""given"":""The Admin is on the 'Data Export' page with a 'Not Connected' status."",""when"":""The Admin clicks 'Connect to Google Sheets', authenticates with Google, and grants permissions."",""then"":""The Admin is redirected back, a success notification is displayed, the UI shows 'Connected' status, and a refresh token is securely stored on the server.""},{""scenario"":""User Denies Permission"",""given"":""The Admin is on the Google OAuth consent screen."",""when"":""The Admin clicks 'Deny' or closes the window."",""then"":""The Admin is redirected back, an informational message 'Authorization was cancelled' is displayed, and the status remains 'Not Connected'.""},{""scenario"":""Secure Token Exchange"",""given"":""The Admin has granted permission and is redirected back with an authorization code."",""when"":""The client sends the code to a secure backend Cloud Function."",""then"":""The Cloud Function exchanges the code for a refresh token and securely stores it, never exposing the client secret.""}]","[""Configure OAuth 2.0 Client ID in the GCP project"",""Implement the 'Connect'/'Disconnect' UI in the Admin dashboard"",""Create a callable Cloud Function to handle the server-side token exchange and secure storage (e.g., in Google Secret Manager)"",""Handle redirects and UI state updates on the client""]","[""All acceptance criteria validated and passing"",""Integration testing of the full OAuth flow completed successfully"",""User interface reviewed and approved by the product owner"",""Security requirements validated, including secure storage of secrets and tokens"",""Documentation updated for setting up the OAuth client in new environments""]"
"US-067","Reporting & Integrations","Admin is alerted to a Google Sheets sync failure","Admin","As an Admin who has configured the automatic data export to Google Sheets, I want to be proactively notified with a prominent, persistent alert on my web dashboard whenever the sync process fails, so that I can immediately investigate the cause and take corrective action to ensure our reporting data is complete and accurate.","Prevents silent data integration failures, ensuring the integrity and timeliness of external reports. This builds trust in the system's automation and allows for rapid resolution of issues, minimizing data gaps.","Could Have","5","[""US-065"",""US-066"",""US-068""]","[{""scenario"":""Alert is displayed when sync fails due to revoked permissions"",""given"":""An Admin has configured the Google Sheets export"",""when"":""The sync fails because the OAuth permissions have been revoked"",""then"":""The Cloud Function updates the integration status to 'error' in Firestore, and the Admin dashboard displays a prominent alert banner stating the sync failed due to a permission issue.""},{""scenario"":""Alert persists across sessions until the issue is resolved"",""given"":""A sync failure has occurred and the alert banner is visible"",""when"":""The Admin logs out and logs back in"",""then"":""The alert banner must be visible again, as the underlying error state has not been resolved.""}]","[""Implement robust error handling in the export Cloud Function to catch API errors"",""Update the Firestore data model to store the integration's status and error type"",""Implement a conditional, persistent alert banner component in the Admin dashboard"",""Use a Firestore real-time stream to manage the banner's visibility""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""Performance requirements verified (dashboard load time impact)"",""Security requirements validated via Firestore rules tests"",""Accessibility of the alert component verified""]"
"US-068","Reporting & Integrations","Admin re-authorizes Google Sheets sync after a failure","Admin","As an Admin, I want to be prompted with clear actions to re-authenticate or link a new Google Sheet when the data sync fails, so that I can quickly restore the automated reporting feature and ensure no data is permanently lost.","Ensures the reliability and continuity of the automated reporting feature. Prevents data gaps in external reports and reduces administrative overhead by providing a self-service recovery path.","Could Have","5","[""US-067""]","[{""scenario"":""Admin successfully re-authenticates after a token revocation failure"",""given"":""the Google Sheets sync status is 'error' due to 'AUTH_ERROR'"",""when"":""the Admin clicks 'Re-authenticate' and successfully completes the Google OAuth 2.0 flow"",""then"":""the system updates the stored OAuth token, the sync status is updated to 'active', and the error alert is removed.""},{""scenario"":""System triggers a catch-up sync after successful recovery"",""given"":""the Google Sheets sync has been restored and there are records that previously failed to sync"",""when"":""the next scheduled sync job runs"",""then"":""the system exports all previously failed records to the Google Sheet without creating duplicates.""}]","[""Implement the recovery UI in the Admin dashboard (e.g., 'Re-authenticate' button)"",""Reuse the OAuth 2.0 flow from US-066 for re-authentication"",""Update the backend to handle token updates and status changes"",""Ensure the export function's logic correctly handles a backlog of unsynced records""]","[""All acceptance criteria validated and passing"",""Integration testing for the full recovery flow (failure -> prompt -> action -> success) completed successfully"",""Security requirements, especially OAuth token handling, validated"",""Documentation for the recovery process is added to the Admin user guide"",""Story deployed and verified in the staging environment""]"
"US-069","Core Platform & Tenant Management","Admin configures the organization's timezone","Admin","As an Admin, I want to select and save a default timezone for my entire organization so that all time-based calculations, business rules, and reports are consistent and accurate for all users, regardless of their individual locations.","Ensures data integrity and consistency for all time-related data and operations. This is critical for accurate reporting, correct application of business rules, and event scheduling.","Must Have","2","[""US-001"",""US-021""]","[{""scenario"":""Admin successfully sets the organization's timezone"",""given"":""I am an Admin on the 'Tenant Settings' page"",""when"":""I select a timezone (e.g., 'America/New_York') from the dropdown and click 'Save'"",""then"":""a success notification is displayed, and the tenant's configuration in Firestore is updated with the value 'America/New_York'.""},{""scenario"":""Default state for a new tenant"",""given"":""An Admin for a brand new tenant logs in for the first time"",""when"":""They navigate to the 'Tenant Settings' page"",""then"":""The timezone field is blank or set to a default, and there is a clear visual indicator prompting the Admin to configure it.""}]","[""Implement a 'Tenant Settings' page in the Admin web dashboard"",""Add a searchable dropdown menu for timezone selection (using IANA identifiers)"",""Update the Firestore tenant configuration document and its security rules"",""Ensure dependent features (e.g., auto-checkout) correctly read and use this value""]","[""All acceptance criteria validated and passing"",""Firestore security rules written and tested to protect the configuration document"",""Integration testing completed to verify a dependent feature uses the timezone correctly"",""User interface reviewed and approved for usability and accessibility"",""Story deployed and verified in the staging environment""]"
"US-070","Core Platform & Tenant Management","Admin configures the auto-checkout time","Admin","As an Admin, I want to configure a specific time of day for automatic check-outs, so that I can ensure all employee attendance records are closed for the day, which improves data accuracy and reduces my manual correction workload.","Improves data integrity by preventing open-ended attendance records. Reduces administrative overhead by automating the correction of forgotten check-outs. Enforces consistent application of company policy regarding work hours.","Should Have","2","[""US-069"",""US-021""]","[{""scenario"":""Admin enables and sets the auto-checkout time"",""given"":""I am an Admin on the 'Tenant Settings' page"",""when"":""I enable the 'Automatic Check-out' feature, select '17:30', and click 'Save'"",""then"":""I see a success message, and the configuration is saved to Firestore.""},{""scenario"":""Admin disables the auto-checkout feature"",""given"":""The 'Automatic Check-out' feature is enabled"",""when"":""I disable the feature using the toggle switch and click 'Save'"",""then"":""I see a success message, and the time picker component becomes disabled or hidden.""}]","[""Add UI components (toggle, time picker) to the 'Tenant Settings' page"",""Update the Firestore tenant configuration document with the new settings"",""Ensure the consuming Cloud Function (from US-032) correctly reads and respects this configuration""]","[""All acceptance criteria validated and passing"",""Integration testing with the Firebase Emulator completed successfully"",""User interface reviewed for usability and accessibility (WCAG 2.1 AA)"",""Firestore security rules are implemented and tested to restrict access to Admins"",""Story deployed and verified in the staging environment""]"
"US-071","Core Platform & Tenant Management","Admin configures the approval escalation period","Admin","As an Admin, I want to configure the approval escalation period in days, so that pending attendance records are automatically escalated to the next-level supervisor if they are not actioned in a timely manner, ensuring no approvals are missed and the process remains efficient.","Improves operational efficiency by preventing bottlenecks in the attendance approval workflow. Enforces managerial accountability and ensures timely processing of all attendance records without manual intervention.","Should Have","1","[""US-021""]","[{""scenario"":""Admin successfully sets a valid escalation period"",""given"":""The Admin is on the 'Tenant Settings' page"",""when"":""The Admin enters a positive integer (e.g., '3') into the 'Approval Escalation Period' field and clicks 'Save'"",""then"":""The system displays a success notification and the value '3' is persisted in the tenant's configuration in Firestore.""},{""scenario"":""Admin attempts to save a value less than one"",""given"":""The Admin is on the 'Tenant Settings' page"",""when"":""The Admin enters '0' and attempts to save"",""then"":""The system prevents the save and displays an error message, such as 'Value must be 1 or greater.'""}]","[""Add a numeric input field to the 'Tenant Settings' page"",""Implement client-side validation for the input"",""Update the Firestore tenant configuration document with the new setting"",""Ensure the consuming escalation function (from US-044) correctly reads this value""]","[""All acceptance criteria validated and passing"",""Integration testing for the save functionality and security rules completed successfully"",""User interface reviewed and approved for usability and accessibility"",""Security requirements validated, specifically the Firestore Security Rules"",""Story deployed and verified in the staging environment""]"
"US-072","Core Platform & Tenant Management","Admin configures default working hours for reporting","Admin","As an Admin, I want to define default working hours and the applicable days of the week for my organization, so that the system can automatically generate reports on late arrivals and early departures.","Enables automated exception reporting (lateness, early departure), saving administrative time and providing key insights into workforce punctuality. Standardizes the definition of a 'workday' for reporting across the entire organization.","Should Have","2","[""US-069"",""US-021""]","[{""scenario"":""Admin successfully sets working hours"",""given"":""the Admin is on the 'Tenant Settings' page"",""when"":""the Admin enters '09:00' for start time, '17:30' for end time, selects Monday through Friday, and clicks 'Save'"",""then"":""a success notification is displayed, and the configuration is saved to the tenant's settings in Firestore.""},{""scenario"":""Admin attempts to save with end time before start time"",""given"":""the Admin is on the 'Tenant Settings' page"",""when"":""the Admin sets start time to '17:00' and end time to '09:00' and clicks 'Save'"",""then"":""a validation error 'End time must be after start time' is displayed, and the data is not saved.""}]","[""Implement UI components (time pickers, day selectors) in the 'Tenant Settings' page"",""Implement client-side form validation"",""Update the Firestore tenant configuration document with the working hours data"",""Ensure the consuming reporting module (US-061) correctly reads this configuration""]","[""All acceptance criteria validated and passing"",""Integration testing against the Firebase Emulator completed successfully"",""User interface reviewed and approved for usability and accessibility"",""Firestore security rules updated and tested"",""Story deployed and verified in the staging environment""]"
"US-073","Core Platform & Tenant Management","Admin configures the tenant's password policy","Admin","As an Admin, I want to configure and enforce a custom password policy for my organization, including minimum length and character type requirements, so that I can enhance account security and ensure compliance with my company's IT policies.","Provides organizations with direct control over their security posture, enabling them to enforce internal IT policies and meet external compliance requirements, thereby reducing the risk of unauthorized account access.","Should Have","8","[""US-021"",""US-069""]","[{""scenario"":""Admin successfully saves a new password policy"",""given"":""the Admin is on the 'Password Policy' settings page"",""when"":""the Admin changes the minimum length to '12' and requires all character types, then clicks 'Save'"",""then"":""a success notification is displayed, and the new policy is written to the tenant's configuration in Firestore.""},{""scenario"":""New user registration enforces the custom password policy"",""given"":""the Admin has set a policy requiring 10 characters and a number"",""when"":""a new user registers with a compliant password like 'Password123!'"",""then"":""the password is accepted, and the account is created.""},{""scenario"":""New user registration is blocked by a non-compliant password"",""given"":""the Admin has set a policy requiring 10 characters and a number"",""when"":""a new user registers with a non-compliant password like 'Password!'"",""then"":""a clear validation error 'Password must contain at least one number' is displayed, and account creation is blocked.""}]","[""Implement the 'Password Policy' UI in the Admin dashboard"",""Implement a Firebase Auth `beforeCreate` blocking Cloud Function to enforce the policy server-side"",""Update client-side registration/password-reset flows to fetch and validate against the tenant's policy""]","[""All acceptance criteria validated and passing"",""Integration testing completed for the Admin UI -> Firestore -> Auth Function flow"",""User interface reviewed and approved by the Product Owner"",""Security requirements validated, including Firestore rules and server-side enforcement"",""Story deployed and verified in the staging environment""]"
"US-074","Core Platform & Tenant Management","Admin configures data retention periods for attendance and audit logs","Admin","As an Admin, I want to configure specific retention periods for attendance records and audit logs, so that I can ensure my organization complies with internal data governance policies and external regulations like GDPR, while also managing long-term storage costs.","Enables compliance with data protection regulations, enforces data governance policies, reduces long-term storage costs, and minimizes security risks associated with retaining old data.","Could Have","5","[""US-021""]","[{""scenario"":""Admin successfully updates and saves a retention period"",""given"":""the Admin is viewing the 'Data Retention' settings page"",""when"":""the Admin changes the retention period for 'Attendance Records' to '3' years and clicks 'Save'"",""then"":""the system displays a success notification and the new value is persisted in Firestore.""},{""scenario"":""Admin attempts to save an invalid (non-positive) retention period"",""given"":""the Admin is viewing the 'Data Retention' settings page"",""when"":""the Admin enters '0' into a retention period field and clicks 'Save'"",""then"":""a validation error 'Value must be greater than 0' is displayed and the save is prevented.""}]","[""Implement the 'Data Retention' UI section in the Admin dashboard"",""Update the Firestore tenant configuration document to store retention settings"",""Create a scheduled Firebase Cloud Function to read these settings and perform data purging/anonymization""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully using the Firebase Emulator Suite"",""User interface reviewed and approved for usability and accessibility"",""Security requirements validated (Firestore rules tested)"",""Story deployed and verified in the staging environment""]"
"US-075","Reporting & Integrations","User views a map of their check-in/check-out location","Any authenticated user","As a User (Subordinate, Supervisor, or Admin), I want to view the captured GPS coordinates for a check-in and check-out action as pins on an interactive map so that I can visually confirm the accuracy of the location data and have confidence in my attendance records.","Increases user trust and data transparency by providing intuitive, visual confirmation of captured locations. Reduces potential disputes and the need for attendance corrections by allowing users to immediately spot significant GPS inaccuracies.","Should Have","5","[""US-028"",""US-029""]","[{""scenario"":""Display map with both check-in and check-out locations"",""given"":""a user is viewing an attendance record with valid GPS coordinates for both check-in and check-out"",""when"":""the attendance detail screen loads"",""then"":""a map is displayed showing two distinct, labeled pins, and the map is zoomed to encompass both.""},{""scenario"":""User interacts with a location pin"",""given"":""a map is displayed with one or more location pins"",""when"":""the user taps on a pin"",""then"":""an info window appears above the pin, displaying the action type ('Check-In' or 'Check-Out') and the timestamp.""},{""scenario"":""Device is offline when viewing the map"",""given"":""the user's device has no active internet connection"",""when"":""the user navigates to an attendance detail screen with valid GPS data"",""then"":""the map area displays a placeholder with a message like 'Map cannot be loaded...'""}]","[""Integrate the Google Maps SDK for Flutter (`google_maps_flutter`)"",""Securely configure Google Maps API keys for both Android and iOS"",""Implement the map view component within the attendance detail screen"",""Handle multiple map states (loading, success, no data, network error)""]","[""All acceptance criteria validated and passing"",""E2E integration testing completed successfully on both Android and iOS physical devices"",""Performance requirements (map load time) verified"",""Security review of API key handling completed"",""Story deployed and verified in the staging environment""]"
"US-076","Core Attendance Workflow","User is prompted to grant location permissions","Any first-time user","As a first-time user of the mobile application, I want to be prompted to grant location permissions when I first attempt to use a location-based feature, so that I understand why my location is needed and can explicitly consent to its use, ensuring my privacy is respected.","Ensures compliance with platform policies and data privacy regulations (e.g., GDPR). Builds user trust through transparency and enables the core GPS-based attendance functionality.","Must Have","3","[""US-021""]","[{""scenario"":""User grants 'While Using the App' permission on first attempt"",""given"":""A user has logged in for the first time"",""when"":""The user taps a UI element that requires location data (e.g., 'Check-In')"",""then"":""The native OS location permission dialog is displayed. If the user grants permission, the action proceeds.""},{""scenario"":""User denies location permission"",""given"":""The native OS location permission dialog is displayed"",""when"":""The user selects the 'Deny' option"",""then"":""The location-dependent action is blocked, and an in-app message is shown explaining why the permission is needed.""}]","[""Integrate a Flutter package for managing cross-platform permissions (e.g., 'permission_handler')"",""Configure native project files (Info.plist, AndroidManifest.xml) with appropriate permission declarations and usage descriptions"",""Implement the logic to request permission contextually""]","[""All acceptance criteria validated and passing on target iOS and Android versions"",""E2E integration tests for all major permission flows are implemented and passing"",""User interface for the 'denied' state reviewed and approved by UX/Product"",""Native project files are correctly configured with usage descriptions"",""Story successfully tested and verified on physical devices for both platforms""]"
"US-077","Core Attendance Workflow","Guide user to device settings when location permission is denied","Any mobile app user","As a mobile app user, I want to be shown a helpful message with a direct link to my device's app settings if I have previously denied location permissions, so that I can easily enable them and use the core attendance features without frustration.","Improves usability and user retention by providing a clear, low-friction recovery path for a common error. Reduces user frustration and support requests.","Must Have","3","[""US-076"",""US-028""]","[{""scenario"":""User attempts a location-based action with permissions permanently denied"",""given"":""The user has previously denied location permissions"",""when"":""The user taps a button that requires location services, such as 'Check-In'"",""then"":""A modal dialog is displayed, explaining why location is required and providing an 'Open Settings' button.""},{""scenario"":""User is successfully navigated to the OS app settings screen"",""given"":""The permission guidance dialog is displayed"",""when"":""The user taps the 'Open Settings' button"",""then"":""The application deep-links the user directly to the app's specific settings page within the device's operating system.""}]","[""Integrate a Flutter package capable of opening OS-level app settings"",""Implement the guidance dialog UI"",""Handle platform-specific implementation for deep-linking to settings"",""Manage app state when it returns from the background after the user has been in settings""]","[""All acceptance criteria validated and passing on supported iOS and Android versions"",""Manual end-to-end testing completed successfully on physical devices"",""User interface reviewed and approved for clarity and usability"",""Accessibility requirements (WCAG 2.1 AA) have been validated"",""Story deployed and verified in the staging environment""]"
"US-078","Non-Functional & Operational Excellence","User interacts with an accessible application","Any user with a disability","As a user with a disability (such as visual or motor impairment), I want the application to adhere to established accessibility standards, including screen reader compatibility, sufficient color contrast, and clear navigation, so that I can independently and effectively use all of its features.","Ensures the application is inclusive and usable by the widest possible audience, mitigates legal risk by complying with accessibility legislation, and improves overall application usability.","Must Have","13","[]","[{""scenario"":""Screen Reader Compatibility for Interactive Elements"",""given"":""A user has a screen reader (e.g., VoiceOver, TalkBack) enabled"",""when"":""The user navigates to any interactive element (button, text field, toggle)"",""then"":""The screen reader clearly announces the element's name, role, and state.""},{""scenario"":""Sufficient Color Contrast for Readability"",""given"":""A user is viewing any screen in the application"",""when"":""Text or a meaningful icon is displayed against a background"",""then"":""The contrast ratio meets or exceeds WCAG 2.1 AA standards (4.5:1 for normal text).""},{""scenario"":""Adequate Touch Target Size for All Controls"",""given"":""A user is interacting with any screen containing tappable elements"",""when"":""The user attempts to tap a button, icon, or other control"",""then"":""The interactive area for the control is at least 44x44 pixels.""}]","[""Audit all existing and new UI components against WCAG 2.1 AA standards"",""Implement semantic labels for all interactive elements in Flutter"",""Use automated tools and manual testing with screen readers throughout the development process"",""Update the team's Definition of Done for all UI stories to include accessibility checks""]","[""All acceptance criteria are met and have been manually verified on both iOS and Android"",""An accessibility checklist based on WCAG 2.1 AA has been created and applied to all screens"",""The application is verified as accessible in the staging environment""]"
"US-079","Non-Functional & Operational Excellence","User adjusts the application's text size based on device settings","Any user","As a user, particularly one with visual impairments, I want the application's text to scale according to my device's system-wide font size settings so that I can adjust the text to a comfortable size for me, ensuring I can read and interact with the application effectively.","Improves application accessibility and usability, ensuring compliance with WCAG 2.1 standards (specifically 1.4.4 Resize text). This broadens the user base and enhances user satisfaction.","Should Have","5","[""US-021""]","[{""scenario"":""Text scales up when device font size is increased"",""given"":""The user has the application open"",""when"":""the user navigates to their device's system settings and increases the font size"",""then"":""all text within the application renders at the new, larger size, and the UI layout reflows gracefully without horizontal scrolling or truncation.""},{""scenario"":""Layout remains usable at maximum accessibility font size"",""given"":""The user has the application open"",""when"":""the user sets their device's font size to the maximum accessibility setting"",""then"":""no text overlaps with other text or UI elements, and all interactive elements remain visible and tappable.""}]","[""Refactor all UI layouts to use responsive widgets (e.g., Flexible, Expanded, Wrap)"",""Ensure all Flutter `Text` widgets correctly use the `MediaQuery.textScaleFactor`"",""Perform extensive manual testing across all screens at various font size settings""]","[""All acceptance criteria validated and passing on both iOS and Android"",""Manual end-to-end testing completed for all primary user flows at minimum, default, and maximum font sizes"",""Accessibility requirements (WCAG 1.4.4) verified"",""Documentation updated to include text scaling as a standard for all new UI development""]"
"US-080","Authentication & Access Control","User enables multi-factor authentication","Any active user","As a security-conscious user (Admin, Supervisor, or Subordinate), I want to enable multi-factor authentication (MFA) by verifying my phone number, so that I can add an extra layer of security to my account and prevent unauthorized access.","Increases the security of user accounts and protects sensitive organizational data from unauthorized access, thereby reducing the risk of data breaches and enhancing customer trust.","Should Have","8","[""US-017"",""US-021""]","[{""scenario"":""User successfully enables MFA with a valid phone number and OTP"",""given"":""I am on the security settings screen and MFA is disabled"",""when"":""I tap 'Enable MFA', enter a valid phone number, receive an OTP via SMS, and enter the correct OTP"",""then"":""I see a success message, and the security screen updates to show that MFA is 'Enabled'.""},{""scenario"":""MFA is enforced during a subsequent login attempt"",""given"":""I have successfully enabled MFA and logged out"",""when"":""I enter my correct email and password on the login screen"",""then"":""I am redirected to a new screen prompting me to enter a verification code sent to my phone.""}]","[""Configure Firebase Authentication to support Phone Number as a second factor"",""Implement the multi-step UI flow for MFA setup in the user profile settings"",""Modify the login flow to conditionally show the OTP verification screen"",""Implement anti-abuse measures like reCAPTCHA/App Check and rate limiting""]","[""All acceptance criteria validated and passing"",""Integration testing against the Firebase Emulator completed successfully"",""E2E test successfully completed on a physical device in the staging environment"",""Security requirements, including rate-limiting and anti-abuse, are validated"",""Documentation for the user guide is updated to explain how to enable MFA""]"
"US-081","Non-Functional & Operational Excellence","Admin is notified of planned maintenance","Admin","As an Admin, I want to receive clear, timely notifications about planned system maintenance, so that I can proactively inform my users, manage expectations, and minimize disruption to my organization's operations.","Improves customer trust and satisfaction by providing proactive communication. Reduces operational disruption for tenants and minimizes support inquiries during maintenance periods.","Could Have","5","[""US-001"",""US-021""]","[{""scenario"":""Admin receives an email notification for upcoming maintenance"",""given"":""A maintenance window is scheduled by a system operator at least 48 hours in the future"",""when"":""The system's notification process runs"",""then"":""The Admin receives an email with the maintenance start time, end time, and expected impact.""},{""scenario"":""Admin sees an in-app banner notification in the web dashboard"",""given"":""An Admin is logged in and a maintenance window is scheduled within the next 7 days"",""when"":""The Admin loads the dashboard"",""then"":""A persistent, non-dismissible banner is displayed at the top of the screen with maintenance details.""}]","[""Create a Firestore collection to store maintenance window data"",""Implement a scheduled Cloud Function to send email notifications via SendGrid"",""Develop a persistent banner component for the Admin web dashboard"",""Modify the core authentication flow to handle an 'in-maintenance' state and show a maintenance page""]","[""All acceptance criteria validated and passing"",""Integration testing between Cloud Function, Firestore, and SendGrid completed successfully"",""E2E tests for the full notification and maintenance page flow are passing"",""Internal documentation for scheduling maintenance is created"",""Story deployed and verified in the staging environment""]"
"US-082","User & Team Management","Admin downloads a CSV template for data migration","Admin","As an Admin setting up my organization, I want to download a predefined CSV template for user and team data, so that I can correctly format my existing data for a successful bulk import, minimizing errors and setup time.","Streamlines the tenant onboarding process by providing a clear, error-reducing template for data migration. This enhances user experience for new customers and reduces potential support load related to failed data imports.","Should Have","1","[""US-021""]","[{""scenario"":""Admin successfully downloads the CSV template"",""given"":""I am an Admin on the 'User Management > Data Import' section"",""when"":""I click the 'Download CSV Template' button"",""then"":""my browser downloads a file named 'user_team_import_template.csv'.""},{""scenario"":""Downloaded template has the correct headers"",""given"":""I have downloaded the template file"",""when"":""I open the file"",""then"":""the first row must contain: 'email', 'firstName', 'lastName', 'role', 'supervisorEmail', 'teamName'.""}]","[""Create the static `user_team_import_template.csv` file"",""Host the file as a static asset in Firebase Hosting"",""Implement a 'Download' button/link in the Admin web dashboard""]","[""All acceptance criteria validated and passing"",""Security requirement (Admin-only access) validated"",""The final CSV template file is checked into the repository or uploaded to Firebase Storage"",""Story deployed and verified in staging environment""]"
"US-083","User & Team Management","Admin uploads a CSV file to bulk-create users and teams","Admin","As an Admin, I want to upload a CSV file containing user and team information, so that I can efficiently bulk-create user accounts, define team structures, and automatically send out registration invitations, saving significant time during initial setup and onboarding.","Reduces manual effort and potential for error when onboarding multiple users, improving administrative efficiency and making the platform scalable for larger organizations.","Should Have","8","[""US-082"",""US-004"",""US-011"",""US-016""]","[{""scenario"":""Successful bulk import of new users and teams"",""given"":""The Admin uploads a correctly formatted CSV file"",""when"":""The import process runs"",""then"":""The system initiates an asynchronous background job, and upon completion, new user and team documents are created in Firestore, and invitation emails are sent.""},{""scenario"":""Processing a CSV with some invalid data rows"",""given"":""The Admin uploads a CSV file with a mix of valid and invalid rows"",""when"":""The import process runs"",""then"":""The system successfully processes all valid rows, and the final summary report (US-084) clearly lists which rows failed and why.""},{""scenario"":""Attempting to create a circular reporting structure"",""given"":""The Admin uploads a CSV where User A's supervisor is User B, and User B's supervisor is User A"",""when"":""The import process runs"",""then"":""The system detects the circular dependency and the summary report indicates the rows failed.""}]","[""Implement a file upload component in the Admin dashboard"",""Use Firebase Cloud Storage for temporary file storage"",""Create a Cloud Function (triggered by file upload) for asynchronous, server-side processing"",""Implement complex data validation logic (duplicates, referential integrity, circular dependencies)""]","[""All acceptance criteria validated and passing"",""Unit tests for the Cloud Function's parsing and validation logic are implemented with >= 80% coverage"",""Integration testing using the Firebase Emulator Suite is completed successfully"",""E2E test case for the happy path upload scenario is created and passing"",""Security requirements, including role-based access and data cleanup, are validated""]"
"US-084","User & Team Management","Admin reviews a data import summary report","Admin","As an Admin, I want to see a detailed summary report immediately after uploading a user and team data file, so that I can quickly verify which records were successfully imported and diagnose the specific errors for any records that failed.","Improves the efficiency and accuracy of the tenant onboarding process. Reduces administrative errors and support requests by providing immediate, actionable feedback on bulk data imports.","Should Have","8","[""US-083""]","[{""scenario"":""Partial success with some failed records"",""given"":""an Admin has uploaded a CSV file with a mix of valid and invalid records"",""when"":""the import process completes"",""then"":""the summary report accurately displays the total records, success count, and fail count, with a detailed list of failed records showing the original row number, data, and a clear error message.""},{""scenario"":""Admin downloads the failed records report"",""given"":""an Admin is viewing an import summary with at least one failed record"",""when"":""the Admin clicks the 'Download Failed Records' button"",""then"":""a CSV file is downloaded containing the full data from the failed rows, plus an additional 'Error' column detailing the failure reason.""}]","[""Implement a report view in the Admin dashboard for import summaries"",""Design a data model in Firestore for storing import job status and results"",""Implement client-side state management to reflect the asynchronous processing states ('uploading', 'processing', 'complete')"",""Create a Cloud Function to generate the downloadable failure report CSV""]","[""All acceptance criteria validated and passing"",""Integration testing of the full upload-process-report flow completed successfully"",""E2E test scenario for a partial failure and report download is automated and passing"",""User interface reviewed and approved for clarity and usability"",""All displayed error messages are verified to be user-friendly""]"
"US-085","Non-Functional & Operational Excellence","User accesses role-based training materials","All user roles","As a user (Admin, Supervisor, or Subordinate), I want to access a 'Help & Training' section within the application so that I can easily find and view guides and videos relevant to my role, enabling me to learn how to use the system effectively and solve problems on my own.","Improves user onboarding and proficiency, reduces the load on customer support by enabling user self-service, and increases overall user satisfaction and product adoption.","Could Have","3","[""US-021""]","[{""scenario"":""Subordinate views their specific training materials"",""given"":""I am a user logged in with the 'Subordinate' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see a list of training materials tagged for the 'Subordinate' role, and materials for other roles are not visible.""},{""scenario"":""Supervisor views their own and their subordinates' training materials"",""given"":""I am a user logged in with the 'Supervisor' role"",""when"":""I navigate to the 'Help & Training' section"",""then"":""I see a list of materials for the 'Supervisor' role and a separate list for the 'Subordinate' role.""},{""scenario"":""User opens a PDF training guide"",""given"":""I am viewing the list of available training materials"",""when"":""I tap on an item that is a PDF guide"",""then"":""The PDF document opens successfully in a native viewer within the app.""}]","[""Create a Firestore collection to store metadata for training materials (title, URL, type, target roles)"",""Implement the 'Help & Training' UI screen in the mobile app and web dashboard"",""Develop a Firestore query to fetch materials based on the logged-in user's role"",""Integrate Flutter packages for launching URLs and displaying PDFs""]","[""All acceptance criteria validated and passing on both mobile platforms and the web dashboard"",""Integration testing completed successfully for opening PDFs and videos"",""User interface reviewed and approved by the product owner/designer"",""Accessibility requirements validated via manual testing with screen readers"",""Documentation for managing the training materials list in Firestore is created""]"
"US-086","Core Platform & Tenant Management","User's personal data is anonymized after deactivation","Deactivated User","As a deactivated user, I want my personally identifiable information (PII) to be automatically and permanently anonymized by the system after a defined data retention period has passed, so that my privacy is protected in accordance with data protection regulations, while the company can still maintain the integrity of its historical records.","Ensures compliance with data protection regulations (e.g., GDPR's Right to Erasure), mitigates data breach risks by minimizing stored PII, and builds user trust by respecting data privacy.","Should Have","13","[""US-008"",""US-074"",""US-051""]","[{""scenario"":""Successful anonymization of a deactivated user after the retention period expires"",""given"":""A user has been 'deactivated' for longer than the tenant's configured retention period (e.g., 90 days)"",""when"":""The scheduled data anonymization Cloud Function is triggered"",""then"":""The PII fields in the user's document are overwritten, and all historical records referencing the `userId` are updated to use a non-reversible, anonymized identifier.""},{""scenario"":""User within the retention period is not anonymized"",""given"":""A user has been 'deactivated' for less than the retention period"",""when"":""The scheduled anonymization function is triggered"",""then"":""The user's data remains completely unchanged.""}]","[""Create a scheduled Firebase Cloud Function to perform the anonymization"",""Implement logic to query for eligible deactivated users based on the tenant's retention policy"",""Develop a 'find and replace' mechanism to update the `userId` across all relevant Firestore collections"",""Ensure the entire operation for a single user is atomic or idempotent""]","[""All acceptance criteria validated and passing"",""Integration testing completed successfully against the Firebase Emulator Suite"",""The scheduled function is deployed and configured to run on a daily schedule in the staging environment"",""The process is confirmed to be idempotent"",""Admin-facing UI correctly displays placeholder data for anonymized records""]"
"US-087","Core Platform & Tenant Management","Admin is alerted when tenant usage approaches subscription limits","Admin","As an Admin, I want to receive automated alerts when my organization's resource usage approaches the limits of our subscription tier, so that I can proactively manage our consumption, avoid unexpected overage charges, and make informed decisions about upgrading our plan.","Provides financial predictability for customers, builds trust through cost transparency, reduces churn from unexpected bills, and creates natural opportunities for upselling to higher tiers.","Could Have","13","[""US-001""]","[{""scenario"":""Admin receives an alert when a usage metric reaches the first threshold (80%)"",""given"":""An organization is on a tier with a limit of 100,000 Firestore reads, and an alert threshold is set at 80%"",""when"":""The organization's aggregated Firestore read count reaches 80,000"",""then"":""An email notification is sent to all Admins for that tenant, and a persistent banner appears on their web dashboard.""},{""scenario"":""Alerts are cleared at the start of a new billing cycle"",""given"":""An Admin's dashboard is displaying a 95% usage alert banner"",""when"":""The system date rolls over to the first day of the new billing cycle"",""then"":""The usage alert banner is automatically removed from the Admin's dashboard.""}]","[""Set up GCP Billing export to BigQuery to get reliable usage data"",""Develop a scheduled Cloud Function to process the aggregated usage data from BigQuery"",""Implement logic to compare usage against subscription tier limits stored in Firestore"",""Integrate with SendGrid to send email alerts"",""Implement the persistent notification banner in the Admin web dashboard""]","[""All acceptance criteria validated and passing"",""Unit tests implemented for the Cloud Function logic with >80% coverage"",""Integration testing of the data pipeline and alert mechanism completed successfully"",""User interface banner reviewed and approved by UX/Product"",""Security review of the data access patterns completed""]"