"test_id","feature_area","test_type","test_level","priority","automation_candidate","automation_roi","test_description","business_risk","technical_complexity","preconditions","test_steps","expected_result","test_data_needs","tools_required","estimated_effort_hours","automation_effort_hours","maintenance_effort_annual","dependencies","environment_requirements","success_criteria","failure_impact","regression_frequency","data_setup_complexity","cleanup_requirements","security_considerations","performance_expectations","accessibility_requirements"
"TEST-SEC-001","Security & Multi-Tenancy","Security","Integration","Critical","true","High","Verify that a user from Tenant A cannot read, write, update, or delete any data belonging to Tenant B by violating Firestore Security Rules. This is the primary test for tenant data isolation.","Critical - Failure leads to a catastrophic data breach and violates the core architectural principle of the application.","High","Firebase Emulator is running with security rules loaded. Two tenants (A and B) and one user for each tenant are created. An attendance record exists for the user in Tenant A.","1. Authenticate as User B from Tenant B. 2. Using the authenticated client, attempt to read the attendance record belonging to User A in Tenant A. 3. Attempt to write a new document into Tenant A's 'attendance' collection. 4. Verify all attempts fail.","All read and write operations must be rejected by Firestore with a 'permission-denied' error. No data leakage must occur.","Two sets of user credentials for two different tenants. Known document IDs from Tenant A.","Firebase Emulator Suite, Jest (for security rule testing), Firebase Auth","8","16","4","REQ-1-002, REQ-1-025, REQ-1-068","Integration environment (Firebase Emulator)","100% of unauthorized access attempts are blocked.","Catastrophic data breach, loss of customer trust, legal liability.","Every commit that modifies firestore.rules","Medium - Requires multi-tenant setup script for emulator.","Emulator data is cleared between test runs.","This is a foundational security test. The test suite must cover every collection and access pattern defined in the security rules.","N/A","N/A"
"TEST-OFFLINE-001","Core Attendance (Mobile)","Functional","E2E","Critical","true","High","Verify a user can perform a check-in and check-out while the device is in airplane mode, and the data automatically syncs to the server upon network restoration, preserving the original timestamps.","High - Failure leads to data loss for users in areas with poor connectivity, undermining a core feature.","High","User is logged into the mobile app. The device has been put into airplane mode.","1. In airplane mode, tap 'Check-In'. 2. Verify UI updates to 'Checked-In'. 3. Tap 'Check-Out'. 4. Verify UI updates to 'Checked-Out'. 5. Disable airplane mode. 6. Wait for sync to complete. 7. Query Firestore backend to verify the record exists with correct timestamps and the 'isOfflineEntry' flag.","Offline actions are saved locally and the UI provides immediate feedback. Upon reconnection, the data is automatically uploaded to Firestore without user intervention.","A test user account with the 'Subordinate' role.","Flutter integration_test, Appium/Espresso (for network control), Firebase Emulator Suite","6","24","8","REQ-1-009, REQ-1-046","Staging environment with physical or emulated mobile devices.","100% of offline records are successfully synced within 60 seconds of network restoration. No data is lost.","High - Loss of user attendance data, erosion of trust in the system's reliability.","Every release","Low","Delete test attendance records from Firestore.","Synced data must still be subject to all Firestore Security Rules.","UI remains responsive during offline actions.","N/A for core logic, but UI indicators must be accessible."
"TEST-HIERARCHY-001","User Management","Functional","Integration","High","true","High","Verify the system prevents an Admin from creating a multi-level circular reporting dependency (e.g., A reports to B, B reports to C, and attempting to set C's supervisor to A).","Medium - Failure could cause infinite loops in approval workflows and data corruption.","Medium","Firebase Emulator is running. A three-level user hierarchy (A->B->C) exists.","1. Authenticate as an Admin. 2. Invoke the 'updateUserSupervisor' Cloud Function (or equivalent). 3. Set the `userId` to A and the `newSupervisorId` to C. 4. Verify the function fails.","The Cloud Function must detect the circular dependency and return a specific error (e.g., 'circular-dependency-detected'). The database state must not be changed.","A hierarchy of at least three users with supervisor-subordinate links.","Firebase Emulator Suite, Jest","3","8","2","REQ-1-026","Integration environment (Firebase Emulator)","100% of circular dependency attempts are blocked.","High - Potential for system instability, infinite loops, and broken approval workflows.","Every release","Medium - Requires scripting user hierarchy creation.","Delete test users.","Validation must be enforced server-side in a Cloud Function to be secure.","Validation should complete in under 1 second for a 10-level hierarchy.","N/A"
"TEST-INTEGRATION-GSHEETS-001","Google Sheets Integration","Functional","E2E","High","true","Medium","Verify the system correctly handles a Google Sheets export failure due to a revoked OAuth token, displays an alert to the Admin, and successfully recovers after re-authentication.","Medium - Failure leads to stale external reports and erodes trust in automation features.","High","A tenant is configured for Google Sheets export. An 'approved' attendance record exists. The app's permission has been manually revoked from the Admin's Google account.","1. Trigger the scheduled export function. 2. Verify the function fails and sets the integration status to 'error' in Firestore. 3. Log in to the web dashboard as the Admin and verify a prominent error banner is visible. 4. Click the 'Re-authenticate' button and complete the OAuth flow. 5. Verify the status is updated to 'active'. 6. Trigger the export function again. 7. Verify the previously failed record is now successfully exported to the Google Sheet.","The system detects the failure, notifies the user, provides a recovery path, and performs a catch-up sync, ensuring no data is lost.","A dedicated Google test account, an Admin user account in the app, and an approved attendance record.","Flutter integration_test, Google Cloud Console, Google Account settings, SendGrid (for notifications)","8","32","10","REQ-1-008, REQ-1-058, REQ-1-060","Staging environment with live Google API integration.","Failure is detected within one run. Recovery flow is successful. No data is lost after recovery.","High - Breaks a key paid feature and can lead to data gaps for customers.","Every release","High - Requires complex setup across multiple systems (App, Google Cloud, Google Account).","Revoke test OAuth tokens, delete Google Sheet, delete test records.","Testing must not expose production OAuth credentials.","N/A","Error banners on the web dashboard must be accessible."